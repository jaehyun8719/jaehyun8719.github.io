<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaehyun&#39;s Dev Story</title>
  
  <subtitle>공부해서 남준다.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaehyun8719.github.io/"/>
  <updated>2023-01-09T13:14:22.817Z</updated>
  <id>https://jaehyun8719.github.io/</id>
  
  <author>
    <name>Jaehyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JPA - 임베디드(embedded) 타입</title>
    <link href="https://jaehyun8719.github.io/2023/01/09/jpa/basic/embedded-type/"/>
    <id>https://jaehyun8719.github.io/2023/01/09/jpa/basic/embedded-type/</id>
    <published>2023-01-08T15:00:00.000Z</published>
    <updated>2023-01-09T13:14:22.817Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>기본값 타입</li><li>임베디드 타입(embedded type, 복합 값 타입)<a id="more"></a></li></ul><h2 id="기본값-타입"><a href="#기본값-타입" class="headerlink" title="기본값 타입"></a>기본값 타입</h2><h3 id="JPA의-데이터-타입-분류"><a href="#JPA의-데이터-타입-분류" class="headerlink" title="JPA의 데이터 타입 분류"></a>JPA의 데이터 타입 분류</h3><ul><li>엔티티 타입<ul><li>@Entity로 정의하는 객체</li><li>데이터가 변해도 식별자로 지속해서 추적 가능</li><li>예) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능</li></ul></li><li>값 타입<ul><li>int, integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체</li><li>식별자가 없고 값만 있으므로 변경시 추적 불가</li><li>예) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체</li></ul></li></ul><h3 id="값-타입-분류"><a href="#값-타입-분류" class="headerlink" title="값 타입 분류"></a>값 타입 분류</h3><ul><li>기본값 타입<ul><li>자바 기본 타입(int, double)</li><li>래퍼 클래스(Integer, Long)</li><li>String</li></ul></li><li>임베디드 타입(embedded type, 복합 값 타입)</li><li>컬렉션 값 타입(collection value type)</li></ul><h3 id="기본값-타입-1"><a href="#기본값-타입-1" class="headerlink" title="기본값 타입"></a>기본값 타입</h3><ul><li>예) String name, int age</li><li>생명 주기를 엔티티의 의존<ul><li>예) 회원을 삭제하면 이름, 나이 필드도 함께 삭제</li></ul></li><li>값 타입은 공유하면 X<ul><li>자바의 primitive type은 공유가 안됨</li><li>예) 회원 이름 변경시 다른 회원의 이름도 함께 변경되면 안됨</li></ul></li></ul><h2 id="임베디드-타입-embedded-type-복합-값-타입"><a href="#임베디드-타입-embedded-type-복합-값-타입" class="headerlink" title="임베디드 타입(embedded type, 복합 값 타입)"></a>임베디드 타입(embedded type, 복합 값 타입)</h2><ul><li>새로운 값 타입을 직접 정의할 수 있음</li><li>JPA는 임베디드 타입(embedded type)이라 함</li><li>주로 기본 값 타입을 모아서 만들어서 복합 값 타입이라고도 함</li><li>int, String과 같은 값 타입</li></ul><p>Member는 id, name, workPeriod, homeAddress 4가지 타입을 가지고, Period는 2가지는 타입, Address는 3가지 타입을 가진다.<br><img src="/images/jpa/embedded-type/embedded-type1.png" width="60%"></p><h3 id="임베디드-타입-사용법"><a href="#임베디드-타입-사용법" class="headerlink" title="임베디드 타입 사용법"></a>임베디드 타입 사용법</h3><ul><li>@Embeddable: 값 타입을 정의하는 곳에 표시</li><li>@Embedded: 값 타입을 사용하는 곳에 표시</li><li>기본 생성자 필수</li></ul><h3 id="임베디드-타입의-장점"><a href="#임베디드-타입의-장점" class="headerlink" title="임베디드 타입의 장점"></a>임베디드 타입의 장점</h3><ul><li>재사용</li><li>높은 응집도</li><li>Period.isWork()처럼 해당 값 타입만 사용하는 의미 있는 메소드를 만들 수 있음</li><li>임베디드 타입을 포함한 모든 값 타입은, 값 타입을 소유한 엔티티에 생명 주기를 의존함</li></ul><h3 id="임베디드-타입과-테이블-매핑"><a href="#임베디드-타입과-테이블-매핑" class="headerlink" title="임베디드 타입과 테이블 매핑"></a>임베디드 타입과 테이블 매핑</h3><p><img src="/images/jpa/embedded-type/embedded-type2.png" width="60%"></p><figure class="highlight kotlin"><figcaption><span>Member </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">var</span> endDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> city: String? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">var</span> street: String? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">var</span> zipcode: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Member</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    city <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    street <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    zipcode <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    endDate <span class="built_in">timestamp</span>,</span><br><span class="line">    startDate <span class="built_in">timestamp</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Member 클래스에서 startDate, endDate를 Period로 묶고 city, street, zipcode을 Address로 묶어서 사용하면 다른 곳에서도 사용 가능하다는 장점이 있다.</p><p><img src="/images/jpa/embedded-type/embedded-type3.png" width="60%"></p><figure class="highlight kotlin"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 기간 Period</span></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">var</span> workPeriod: Period? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 주소 address</span></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">var</span> homeAddress: Address? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Period</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Period</span></span>(</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> startDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> endDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Address</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>(</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> city: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> street: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> zipcode: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Member</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    city <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    street <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    zipcode <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    endDate <span class="built_in">timestamp</span>,</span><br><span class="line">    startDate <span class="built_in">timestamp</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> address = Address(<span class="string">"city"</span>, <span class="string">"street"</span>, <span class="string">"1000"</span>)</span><br><span class="line">        <span class="keyword">val</span> period = Period()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> member = Member(</span><br><span class="line">            username = <span class="string">"hello"</span>,</span><br><span class="line">            homeAddress = address,</span><br><span class="line">            workPeriod = period,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* insert entity.Member */</span></span><br><span class="line"><span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        <span class="keyword">Member</span></span><br><span class="line">        (city, street, zipcode, username, endDate, startDate, <span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?)</span><br></pre></td></tr></table></figure><h2 id="임베디드-타입과-테이블-매핑-1"><a href="#임베디드-타입과-테이블-매핑-1" class="headerlink" title="임베디드 타입과 테이블 매핑"></a>임베디드 타입과 테이블 매핑</h2><ul><li>임베디드 타입은 엔티티의 값일 뿐이다.</li><li>임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다.</li><li>객체와 테이블을 아주 세밀하게(find-grained) 매핑하는 것이 가능</li><li>잘 설계한 ORM 애플리케이션은 매핑한 테이블의 수보다 클래스의 수가 더 많음</li></ul><h2 id="임베디드-타입과-연관관계"><a href="#임베디드-타입과-연관관계" class="headerlink" title="임베디드 타입과 연관관계"></a>임베디드 타입과 연관관계</h2><p><img src="/images/jpa/embedded-type/embedded-type4.png" width="80%"></p><h2 id="AttributeOverride-속성-재정의"><a href="#AttributeOverride-속성-재정의" class="headerlink" title="@AttributeOverride: 속성 재정의"></a>@AttributeOverride: 속성 재정의</h2><ul><li>한 엔티티에서 같은 값 타입을 사용하면? </li><li>컬럼 명이 중복됨</li><li>@AttributeOverrides, @AttributeOverride를 사용해서 컬럼 명 속성을 재정의</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;기본값 타입&lt;/li&gt;
&lt;li&gt;임베디드 타입(embedded type, 복합 값 타입)
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="value type" scheme="https://jaehyun8719.github.io/tags/value-type/"/>
    
      <category term="embedded type" scheme="https://jaehyun8719.github.io/tags/embedded-type/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 영속성 전이(CASCADE)와 고아 객체</title>
    <link href="https://jaehyun8719.github.io/2022/09/05/jpa/basic/cascade-orphan/"/>
    <id>https://jaehyun8719.github.io/2022/09/05/jpa/basic/cascade-orphan/</id>
    <published>2022-09-04T15:00:00.000Z</published>
    <updated>2022-09-06T04:55:56.972Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>영속성 전이(CASCADE)</li><li>고아 객체<a id="more"></a></li></ul><h2 id="영속성-전이-CASCADE"><a href="#영속성-전이-CASCADE" class="headerlink" title="영속성 전이(CASCADE)"></a>영속성 전이(CASCADE)</h2><p>특정 엔티티를 영속 상태로 만들 떄 연관된 엔티티도 함께 영속상태로 만들고 싶을 때<br>ex) 부모 엔티티를 저장할 떄 자식 엔티티도 함께 저장</p><figure class="highlight kt"><figcaption><span>Parent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"parent"</span>, fetch = FetchType.LAZY, cascade = [CascadeType.ALL])</span> <span class="comment">//cascde 추가 부분</span></span><br><span class="line">    <span class="keyword">var</span> childList: MutableList&lt;Child&gt;? = mutableListOf()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addChild</span><span class="params">(child: <span class="type">Child</span>)</span></span> &#123;</span><br><span class="line">        childList?.add(child)</span><br><span class="line">        child.parent = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>Child</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"parent_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> parent: Parent? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> child1 = Child()</span><br><span class="line">        <span class="keyword">var</span> child2 = Child()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> parent = Parent()</span><br><span class="line">        parent.addChild(child1)</span><br><span class="line">        parent.addChild(child2)</span><br><span class="line"></span><br><span class="line">        em.persist(parent)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Parent</span></span><br><span class="line"><span class="comment">        */</span> <span class="keyword">insert</span> </span><br><span class="line">        <span class="keyword">into</span></span><br><span class="line">            <span class="keyword">Parent</span></span><br><span class="line">            (<span class="keyword">name</span>, MEMBER_ID) </span><br><span class="line">        <span class="keyword">values</span></span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Child</span></span><br><span class="line"><span class="comment">        */</span> <span class="keyword">insert</span> </span><br><span class="line">        <span class="keyword">into</span></span><br><span class="line">            <span class="keyword">Child</span></span><br><span class="line">            (<span class="keyword">name</span>, parent_id, MEMBER_ID) </span><br><span class="line">        <span class="keyword">values</span></span><br><span class="line">            (?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Child</span></span><br><span class="line"><span class="comment">        */</span> <span class="keyword">insert</span> </span><br><span class="line">        <span class="keyword">into</span></span><br><span class="line">            <span class="keyword">Child</span></span><br><span class="line">            (<span class="keyword">name</span>, parent_id, MEMBER_ID) </span><br><span class="line">        <span class="keyword">values</span></span><br><span class="line">            (?, ?, ?)</span><br></pre></td></tr></table></figure><p>결과와 같이 <code>em.persist(parent)</code> 에서 parent만 persist 하였는데 child에 값까지 persit 된것을 볼 수 있다. </p><h3 id="영속성-전이-CASECADE-사용시-주의"><a href="#영속성-전이-CASECADE-사용시-주의" class="headerlink" title="영속성 전이(CASECADE) 사용시 주의"></a>영속성 전이(CASECADE) 사용시 주의</h3><ul><li>영속성 전이는 연관관계를 매핑하는 것과 아무 관련이 없다.</li><li>엔티티를 영속화할 때 연관된 엔티티도 함께 영속화하는 편리함을 제공할 뿐이다</li><li>부모와 자식과 연관관계가 하나일 떄만 사용하는것이 좋다. (자식이 다른곳에 연관 관계 일때는 사용하지 않는것이 좋음)</li></ul><h3 id="CASCADE의-종류"><a href="#CASCADE의-종류" class="headerlink" title="CASCADE의 종류"></a>CASCADE의 종류</h3><table><thead><tr><th>종류</th><th>설명</th></tr></thead><tbody><tr><td>ALL</td><td>모두 적용</td></tr><tr><td>PERSIST</td><td>영속</td></tr><tr><td>REMOVE</td><td>삭제</td></tr><tr><td>MERGE</td><td>병합</td></tr><tr><td>REFRESH</td><td>REFRESH</td></tr><tr><td>DETACH</td><td>DETACH</td></tr></tbody></table><p>ALL, PERSIST만 사용 하길 권장</p><h2 id="고아-Orphan-객체"><a href="#고아-Orphan-객체" class="headerlink" title="고아(Orphan) 객체"></a>고아(Orphan) 객체</h2><ul><li>고아 객체 제거: 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제</li><li><code>orphanRemoval = true</code></li></ul><figure class="highlight kt"><figcaption><span>Parent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"parent"</span>, fetch = FetchType.LAZY, cascade = [CascadeType.ALL], orphanRemoval = true)</span> <span class="comment">//고아객체 추가 부분</span></span><br><span class="line">    <span class="keyword">var</span> childList: MutableList&lt;Child&gt;? = mutableListOf()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addChild</span><span class="params">(child: <span class="type">Child</span>)</span></span> &#123;</span><br><span class="line">        childList?.add(child)</span><br><span class="line">        child.parent = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> child1 = Child()</span><br><span class="line">        <span class="keyword">var</span> child2 = Child()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> parent = Parent()</span><br><span class="line">        parent.addChild(child1)</span><br><span class="line">        parent.addChild(child2)</span><br><span class="line"></span><br><span class="line">        em.persist(parent)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findParent = em.find(Parent::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">parent.id)</span></span></span><br><span class="line">        findParent.childList?.removeFirst()</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line"><span class="comment">/* delete entity.Child */</span> <span class="keyword">delete</span> </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Child</span> </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        MEMBER_ID=?</span><br></pre></td></tr></table></figure><p><code>orphanRemoval</code> 옵션을 준 자식은 Collection에서 빠지면 delete 쿼리가 실행되서 삭제가 된다.</p><h3 id="고아-객체-주의-사항"><a href="#고아-객체-주의-사항" class="headerlink" title="고아 객체 주의 사항"></a>고아 객체 주의 사항</h3><ul><li>참조가 제거된 엔티티는 다른 곳에서 참조하지 않는 고아 객체로 보고 삭제하는 기능</li><li>참조하는 곳이 하나일 때 사용해야된다!</li><li>특정 엔티티가 개인 소유할 때 사용</li><li>@OneToOne, @OneToMany만 가능</li></ul><h2 id="영속성-전이-고아-객체-생명주기"><a href="#영속성-전이-고아-객체-생명주기" class="headerlink" title="영속성 전이 + 고아 객체 생명주기"></a>영속성 전이 + 고아 객체 생명주기</h2><ul><li>CascadeType.ALL + orphanRemoval=true</li><li>스스로 생명주기를 관리하는 엔티티는 em.persist()로 영속화, em.remove()로 제거</li><li>두 옵션을 모두 활성화 하면 부모 엔티티를 통해서 자식의 생명주기를 관리할 수 있음</li><li>도메인 주도 설계(DDD)의 Aggregate Root개념을 구현할 떄 유용</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;영속성 전이(CASCADE)&lt;/li&gt;
&lt;li&gt;고아 객체
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="koltin JPA" scheme="https://jaehyun8719.github.io/tags/koltin-JPA/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 지연로딩(LAZY)와 즉시로딩(EAGER)</title>
    <link href="https://jaehyun8719.github.io/2022/09/02/jpa/basic/lazy-eager/"/>
    <id>https://jaehyun8719.github.io/2022/09/02/jpa/basic/lazy-eager/</id>
    <published>2022-09-01T15:00:00.000Z</published>
    <updated>2022-09-06T04:55:56.973Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>지연로딩(LAZY)과 즉시로딩(EAGER)<a id="more"></a></li></ul><h2 id="지연로딩-LAZY"><a href="#지연로딩-LAZY" class="headerlink" title="지연로딩(LAZY)"></a>지연로딩(LAZY)</h2><p>지연 로딩(LAZY)을 사용해서 프록시로 조회</p><figure class="highlight kt"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line">) : BaseEntity() &#123;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span> <span class="comment">// 지연로딩 추가 부분</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>Team</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"NAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = arrayListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> team = Team(</span><br><span class="line">            name = <span class="string">"team1"</span></span><br><span class="line">        )</span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> member = Member(</span><br><span class="line">            username = <span class="string">"member1"</span>,</span><br><span class="line">        )</span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line">        println(<span class="string">"findMember = <span class="subst">$&#123;findMember.team!!.javaClass&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        member0_.MEMBER_ID <span class="keyword">as</span> MEMBER_I1_3_0_,</span><br><span class="line">        member0_.createdAt <span class="keyword">as</span> createdA2_3_0_,</span><br><span class="line">        member0_.deletedAt <span class="keyword">as</span> deletedA3_3_0_,</span><br><span class="line">        member0_.updatedAt <span class="keyword">as</span> updatedA4_3_0_,</span><br><span class="line">        member0_.TEAM_ID <span class="keyword">as</span> TEAM_ID6_3_0_,</span><br><span class="line">        member0_.USERNAME <span class="keyword">as</span> USERNAME5_3_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Member</span> member0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        member0_.MEMBER_ID=?</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        team0_.TEAM_ID <span class="keyword">as</span> TEAM_ID1_5_0_,</span><br><span class="line">        team0_.NAME <span class="keyword">as</span> NAME2_5_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Team team0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        team0_.TEAM_ID=?</span><br><span class="line">findMember = <span class="keyword">class</span> entity.Team</span><br></pre></td></tr></table></figure><p>여기서 지연 로딩(LAZY)로 Member 객체를 조회 하였는데, Team 정보 가지 조회 되는 현상이 나타난다.<br>원래는 지연 로딩시 Team 정보는 Proxy로 가져오고, Team을 조회 할때 정보를 가지고 와야 지연로딩이 된다고 할 수 있다.<br>지연 로딩을 하려면 프록시 객체를 만들어야 하는데, Kotlin의 모든 클래스는 final이라 상속을 받을 수 없고, 일반 클래스는 open할 수 있지만 데이터 클래스는 불가능하다.<br>JPA 표준에서는 엔티티 클래스가 final이면 안되는데 JPA 구현체로써 사용하기 때문에 작동을 한다.<br>gradle 에 아래 와 같이 <a href="https://kotlinlang.org/docs/all-open-plugin.html" rel="external nofollow noopener noreferrer" target="_blank">allOpen 플러그인</a> 추가 해주면된다.</p><figure class="highlight gradle"><figcaption><span>build.gradle.kts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">"jvm"</span>) version <span class="string">"1.5.31"</span></span><br><span class="line">    id(<span class="string">"org.jetbrains.kotlin.plugin.allopen"</span>) version <span class="string">"1.5.31"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allOpen &#123;</span><br><span class="line">    annotation(<span class="string">"javax.persistence.Entity"</span>)</span><br><span class="line">    annotation(<span class="string">"javax.persistence.MappedSuperclass"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        member0_.MEMBER_ID <span class="keyword">as</span> MEMBER_I1_3_0_,</span><br><span class="line">        member0_.createdAt <span class="keyword">as</span> createdA2_3_0_,</span><br><span class="line">        member0_.deletedAt <span class="keyword">as</span> deletedA3_3_0_,</span><br><span class="line">        member0_.updatedAt <span class="keyword">as</span> updatedA4_3_0_,</span><br><span class="line">        member0_.TEAM_ID <span class="keyword">as</span> TEAM_ID6_3_0_,</span><br><span class="line">        member0_.USERNAME <span class="keyword">as</span> USERNAME5_3_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Member</span> member0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        member0_.MEMBER_ID=?</span><br><span class="line">findMember = <span class="keyword">class</span> entity.Team$HibernateProxy$pD1cOOED</span><br></pre></td></tr></table></figure><h2 id="즉시로딩-EAGER"><a href="#즉시로딩-EAGER" class="headerlink" title="즉시로딩(EAGER)"></a>즉시로딩(EAGER)</h2><p>JPA 구현체는 가능하면 조인을 사용해서 SQL 한번에 조회</p><figure class="highlight kt"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line">) : BaseEntity() &#123;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span> <span class="comment">// 즉시로딩 추가 부분</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        member0_.MEMBER_ID <span class="keyword">as</span> MEMBER_I1_3_0_,</span><br><span class="line">        member0_.createdAt <span class="keyword">as</span> createdA2_3_0_,</span><br><span class="line">        member0_.deletedAt <span class="keyword">as</span> deletedA3_3_0_,</span><br><span class="line">        member0_.updatedAt <span class="keyword">as</span> updatedA4_3_0_,</span><br><span class="line">        member0_.TEAM_ID <span class="keyword">as</span> TEAM_ID6_3_0_,</span><br><span class="line">        member0_.USERNAME <span class="keyword">as</span> USERNAME5_3_0_,</span><br><span class="line">        team1_.TEAM_ID <span class="keyword">as</span> TEAM_ID1_5_1_,</span><br><span class="line">        team1_.NAME <span class="keyword">as</span> NAME2_5_1_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Member</span> member0_ </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">        Team team1_ </span><br><span class="line">            <span class="keyword">on</span> member0_.TEAM_ID=team1_.TEAM_ID </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        member0_.MEMBER_ID=?</span><br><span class="line">findMember = <span class="keyword">class</span> entity.Team</span><br></pre></td></tr></table></figure><h2 id="프록시와-즉시로딩-주의"><a href="#프록시와-즉시로딩-주의" class="headerlink" title="프록시와 즉시로딩 주의"></a>프록시와 즉시로딩 주의</h2><ul><li>가급적 지연 로딩(LAZY)만 사용</li><li>즉시 로딩(EAGER)을 적용하면 예상하지 못한 SQL이 발생</li><li>즉시 로딩(EAGER)은 JPQL에서 N+1 문제를 일으킨다.</li><li>@ManyToOne, @OneToOne는 기본이 지연 로딩(LAZY)</li><li>@OneToMany, @ManyToMany는 기본이 즉시 로딩(EAGER)</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li><li><a href="https://kotlinlang.org/docs/all-open-plugin.html" rel="external nofollow noopener noreferrer" target="_blank">https://kotlinlang.org/docs/all-open-plugin.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;지연로딩(LAZY)과 즉시로딩(EAGER)
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="지연로딩" scheme="https://jaehyun8719.github.io/tags/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9/"/>
    
      <category term="즉시로딩" scheme="https://jaehyun8719.github.io/tags/%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9/"/>
    
      <category term="LAZY" scheme="https://jaehyun8719.github.io/tags/LAZY/"/>
    
      <category term="EAGER" scheme="https://jaehyun8719.github.io/tags/EAGER/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 고급 맵핑(Advancded Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/09/01/jpa/basic/advanced-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/09/01/jpa/basic/advanced-mapping/</id>
    <published>2022-08-31T15:00:00.000Z</published>
    <updated>2022-09-01T11:51:08.003Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>상속관계 매핑</li><li>@MappedSuperclass<a id="more"></a></li></ul><h2 id="상속-관계-매핑"><a href="#상속-관계-매핑" class="headerlink" title="상속 관계 매핑"></a>상속 관계 매핑</h2><ul><li>관계형 데이터베이스는 상속 관계가 없다</li><li>슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사</li><li>상속관계 매핑: 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑</li></ul><p><img src="/images/jpa/advanced-mapping/advanced-mapping1.png" width="80%"></p><p>슈퍼타입 서브타입 논리 모델을 실제 물리 모델로 구현하는 방법</p><figure class="highlight kotlin"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> movie = Movie(<span class="string">"a"</span>, <span class="string">"bbb"</span>)</span><br><span class="line">        movie.name = <span class="string">"바람과함꼐 사라지다"</span></span><br><span class="line">        movie.price = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">        em.persist(movie)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMovie = em.find(Movie::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">movie.id)</span></span></span><br><span class="line">        println(<span class="string">"findMove = <span class="variable">$findMovie</span>"</span>)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Album</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span> </span>(</span><br><span class="line">    <span class="keyword">var</span> artist: String? = <span class="literal">null</span>,</span><br><span class="line">) : Item() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Movie</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span></span>(</span><br><span class="line">    <span class="keyword">var</span> director: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> actor: String? = <span class="literal">null</span>,</span><br><span class="line">) : Item() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Book</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(</span><br><span class="line">    <span class="keyword">var</span> author: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isbn: String? = <span class="literal">null</span>,</span><br><span class="line">) : Item() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="주요-어노테이션"><a href="#주요-어노테이션" class="headerlink" title="주요 어노테이션"></a>주요 어노테이션</h3><ul><li>@Inheritance(strategy = InheritanceType.XXX)<ul><li>JOINED: 조인 전략</li><li>SINGLE_TABLE: 단일 테이블 전략</li><li>TABLE_PER_CLASS: 구현 클래스마다 테이블 전략</li></ul></li><li>@DiscriminatorColumn(name=“DTYPE”)</li><li>@DiscriminatorValue(“XXX”): 자식 클래스에 어노테이션을 넣고, DTYPE에 들어갈 이름을 변경</li></ul><h3 id="조인-전략"><a href="#조인-전략" class="headerlink" title="조인 전략"></a>조인 전략</h3><ul><li>장점<ul><li>테이블 정규화</li><li>외래 키 참조 무결성 제약조건 활용가능</li><li>저장공간 효율화</li></ul></li><li>단점<ul><li>조회시 조인을 많이 사용, 성능 저하</li><li>조회 쿼리가 복잡함</li></ul></li></ul><p><img src="/images/jpa/advanced-mapping/advanced-mapping2.png" width="90%"></p><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.JOINED)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/advanced-mapping/advanced-mapping3.png" width="30%"></p><p>JOIN 전략은 상속관계마다 테이블을 생성하며, insert시 부모, 자식 2번 insert를 하고, select시 join 으로 조회를 한다.</p><h3 id="단일-테이블-전략"><a href="#단일-테이블-전략" class="headerlink" title="단일 테이블 전략"></a>단일 테이블 전략</h3><ul><li>장점<ul><li>조인이 필요 없으므로 일반적으로 조회 성능이 빠름</li><li>조회 쿼리가 단순함 </li></ul></li><li>단점<ul><li>자식 엔티티가 매핑한 컬럼은 모두 null 허용</li><li>단일테이블에모든것을저장하므로테이블이커질수있다.상 황에 따라서 조회 성능이 오히려 느려질 수 있다</li></ul></li></ul><p><img src="/images/jpa/advanced-mapping/advanced-mapping4.png" width="80%"></p><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.SINGLE_TABLE)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/advanced-mapping/advanced-mapping5.png" width="80%"></p><h3 id="구현-클래스마다-테이블-전략"><a href="#구현-클래스마다-테이블-전략" class="headerlink" title="구현 클래스마다 테이블 전략"></a>구현 클래스마다 테이블 전략</h3><ul><li>이 전략은 데이터베이스 설계자와 ORM 전문가 둘 다 추천하지 않음</li><li>장점<ul><li>서브 타입을 명확하게 구분해서 처리할 때 효과적</li><li>not null 제약조건 사용 가능</li></ul></li><li>단점<ul><li>여러 자식 테이블을 함께 조회할 때 성능이 느림(UNION SQL 필요)</li><li>자식 테이블을 통합해서 쿼리하기 어려움</li></ul></li></ul><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Item 테이블이 생성이 안되고, 나머지 자식클래스의 테이블만 생성된다.</p><p><img src="/images/jpa/advanced-mapping/advanced-mapping6.png" width="80%"></p><h2 id="MappedSuperclass"><a href="#MappedSuperclass" class="headerlink" title="@MappedSuperclass"></a>@MappedSuperclass</h2><p>공통 매핑 정보가 필요할때 사용하는 방법</p><ul><li>상속관계 매핑 안됨</li><li>엔티티, 테이블과 매핑 안됨</li><li>부모 클래스를 상속 받는 자식 클래스에 매핑 정보만 제공</li><li>조회, 검색 불가(em.find(BaseEntity) 불가)</li><li>직접 생성해서 사용할 일이 없으므로 추상 클래스 권장</li><li>테이블과 관계 없고, 단순히 엔티티가 공통으로 사용하는 매핑 정보를 모으는 역할</li><li>주로 등록일, 수정일, 등록자, 수정자 같은 전체 엔티티에서 공통 으로 적용하는 정보를 모을 때 사용</li><li>참고: @Entity 클래스는 엔티티나 @MappedSuperclass로 지 정한 클래스만 상속 가능</li></ul><figure class="highlight kotlin"><figcaption><span>BaseEntity</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> createdAt: LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> updatedAt: LocalDateTime? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deletedAt: LocalDateTime? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span>,</span><br><span class="line">) : BaseEntity() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Member 테이블에 상속 받은 BaseEntity에 있는 컬럼 값들도 같이 생성된다.<br>상속이란 개념보다 테이블생성시 공통 맵핑정보가 필요할때 이용하는 방법이다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;상속관계 매핑&lt;/li&gt;
&lt;li&gt;@MappedSuperclass
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Advancded Mapping" scheme="https://jaehyun8719.github.io/tags/Advancded-Mapping/"/>
    
      <category term="고급 맵핑" scheme="https://jaehyun8719.github.io/tags/%EA%B3%A0%EA%B8%89-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 15. 코틀린에서 다양한 함수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/26/kotlin/basic/chapter15/"/>
    <id>https://jaehyun8719.github.io/2022/08/26/kotlin/basic/chapter15/</id>
    <published>2022-08-25T15:00:00.000Z</published>
    <updated>2022-08-26T11:12:26.373Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 다양한 함수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="확장함수"><a href="#확장함수" class="headerlink" title="확장함수"></a>확장함수</h2><p>수신객체클래스를 멤버함수 처럼 사용할 수 있다.</p><ol><li>확장함수는 원본 클래스의 private, protected 멤버 접근이 안된다.</li><li>멤버함수, 확장함수 중 멤버함수에 우선권이 있다.</li><li>확장함수는 현재 타입을 기준으로 호출된다.</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">"ABC"</span></span><br><span class="line">    println(str.lastChar()) <span class="comment">// "C"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span>: <span class="built_in">Char</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="infix-함수"><a href="#infix-함수" class="headerlink" title="infix 함수"></a>infix 함수</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>.add(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>.add2(<span class="number">4</span>)</span><br><span class="line">    <span class="number">3</span> add2 <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add2</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + other</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inline-함수"><a href="#inline-함수" class="headerlink" title="inline 함수"></a>inline 함수</h2><p>함수가 호출되는 대신, 함수를 호출한 지점에 함수 본문을 그대로 복붙하고 싶을 경우</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add3</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + other</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/15-fun" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 다양한 함수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 14. 코틀린에서 컬렉션을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter14/"/>
    <id>https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter14/</id>
    <published>2022-08-24T11:00:00.000Z</published>
    <updated>2022-09-01T09:58:33.782Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 컬렉션을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>가변(Mutable) 컬렉션은 컬렉션에 elemendt를 추가, 삭제할 수 있다.<br>불변 컬렉션은 element를 추가, 삭제할 수 없다. </p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 불변</span></span><br><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// 가변</span></span><br><span class="line"><span class="keyword">val</span> numbers = mutableListOf(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">numbers.add(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> emptyList = emptyList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 값 출력</span></span><br><span class="line">println(numbers[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// For Each</span></span><br><span class="line"><span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전통적인 for문</span></span><br><span class="line"><span class="keyword">for</span> ((index, number) <span class="keyword">in</span> numbers.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">"<span class="variable">$index</span> <span class="variable">$number</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set은 List와 다르게 순서가 없고, 값은 element는 하나만 존재할 수 있다<br>자료구조적 의미만 제외하면 모든 기능은 List와 비슷하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 불변</span></span><br><span class="line"><span class="keyword">val</span> numbers = setOf(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// 가변</span></span><br><span class="line"><span class="keyword">val</span> mutableNumbers = mutableSetOf(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">val</span> map = mutableMapOf&lt;<span class="built_in">Int</span>, String&gt;()</span><br><span class="line">map[<span class="number">1</span>] = <span class="string">"MONDAY"</span></span><br><span class="line">map[<span class="number">2</span>] = <span class="string">"SUNDAY"</span></span><br><span class="line"></span><br><span class="line">mapOf(<span class="number">1</span> to <span class="string">"MONDAY"</span>, <span class="number">2</span> to <span class="string">"SUNDAY"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> map.keys) &#123;</span><br><span class="line">    println(key)</span><br><span class="line">    println(map[key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map.entries) &#123;</span><br><span class="line">    println(key)</span><br><span class="line">    println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="컬렉션의-null-가능성"><a href="#컬렉션의-null-가능성" class="headerlink" title="컬렉션의 null 가능성"></a>컬렉션의 null 가능성</h2><ul><li>List&lt;Int?&gt;: 리스트에 null 들어갈 수 있지만, 리스트는 절대 null이 아님</li><li>List<int>?: 리스트에 null 들어갈 수 없지만, 리스트는 절대 null일 수 있음</int></li><li>List&lt;Int?&gt;?: 리스트에 null이 들어갈 수도 있고, 리스트가 null일 수도 있음</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/14-collection" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 컬렉션을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 13. 코틀린에서 다양한 클래스를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter13/"/>
    <id>https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter13/</id>
    <published>2022-08-23T15:00:00.000Z</published>
    <updated>2022-08-24T12:33:07.456Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 다양한 클래스를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="Data-Class"><a href="#Data-Class" class="headerlink" title="Data Class"></a>Data Class</h2><p>data 키워드를 붙여주면, <code>equals, hashCode, toString</code>을 자동으로 만들어준다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDto</span> </span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Enum-Class"><a href="#Enum-Class" class="headerlink" title="Enum Class"></a>Enum Class</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> code: String,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    KOREA(<span class="string">"KO"</span>),</span><br><span class="line">    AMERICA(<span class="string">"US"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sealed-Class-Sealed-Interface"><a href="#Sealed-Class-Sealed-Interface" class="headerlink" title="Sealed Class, Sealed Interface"></a>Sealed Class, Sealed Interface</h2><p>컴파일 타임 때 하위 클래스의 타입을 모두 기억한다. 즉, 런타임때 클래스 타입이 추가될 수 없다.<br>하위 클래스는 같은 패키지에 있어야 한다.<br>추사화가 필요한 Entity 또는 DTO에 sealed class를 활용</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/13-various" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 다양한 클래스를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 12. 코틀린에서 object를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter12/"/>
    <id>https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter12/</id>
    <published>2022-08-22T11:00:00.000Z</published>
    <updated>2022-08-22T11:00:28.930Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 object를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="static-함수와-변수"><a href="#static-함수와-변수" class="headerlink" title="static 함수와 변수"></a>static 함수와 변수</h2><p>companion object(동행 객체)는 클래스와 동일하는 유일한 오브젝트 이다.<br>const를 붙이는 이유는 컴파일시 값을 할당한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MIN_AGE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newBaby</span><span class="params">(name: <span class="type">String</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(name, MIN_AGE)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>companion object에 인터페이스 구현 </li></ul><figure class="highlight kotlin"><figcaption><span>Log</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Person</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> Factory : Log &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MIN_AGE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newBaby</span><span class="params">(name: <span class="type">String</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(name, MIN_AGE)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"나는 Person 클래스의 동행객체 Factory 입니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="싱글톤"><a href="#싱글톤" class="headerlink" title="싱글톤"></a>싱글톤</h2><p>obejct 를 사용하면 싱글톤 객체 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line"></span><br><span class="line">    println(Singleton.a)</span><br><span class="line">    Singleton.a += 10</span><br><span class="line">    println(Singleton.a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object Singleton &#123;</span><br><span class="line">    var a: Int = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="익명-클래스"><a href="#익명-클래스" class="headerlink" title="익명 클래스"></a>익명 클래스</h2><p><code>obejct: 타입이름</code>을 이용하여 익명 클래스 선언</p><figure class="highlight kotlin"><figcaption><span>Movable</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Movable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    moveSomething(<span class="keyword">object</span> : Movable &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"move"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"fly"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">moveSomething</span><span class="params">(movable: <span class="type">Movable</span>)</span></span> &#123;</span><br><span class="line">    movable.move()</span><br><span class="line">    movable.fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/12-object" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 object를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 11. 코틀린에서 접근 제어를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter11/"/>
    <id>https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter11/</id>
    <published>2022-08-21T15:00:00.000Z</published>
    <updated>2022-08-22T10:18:00.773Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="접근-제어"><a href="#접근-제어" class="headerlink" title="접근 제어"></a>접근 제어</h2><ul><li>Koltin의 기본 접근 지시어는 <code>public</code> 이다</li></ul><table><thead><tr><th>접근 제어 명령어</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>모든 곳에서 접근 가능</td></tr><tr><td>protected</td><td>선언된 클래스 또는 하위 클래스에서만 접급 가능</td></tr><tr><td>internal</td><td>같은 모듈에서만 접근 가능</td></tr><tr><td>private</td><td>선언된 클래스 내에서만 접근 가능</td></tr></tbody></table><ul><li>Kotlin 파일</li></ul><table><thead><tr><th>접근 제어 명령어</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>기본값은 어디서든 접근</td></tr><tr><td>protected</td><td>파일(최상단)에는 사용 불가능</td></tr><tr><td>internal</td><td>같은 모듈에서만 접근 가능</td></tr><tr><td>private</td><td>같은 파일 내에서만 접근 가능</td></tr></tbody></table><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/11-visibility-modifier" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 10. 코틀린에서 상속을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter10/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter10/</id>
    <published>2022-08-20T11:00:00.000Z</published>
    <updated>2022-08-20T08:57:57.194Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 상속을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><figure class="highlight kotlin"><figcaption><span>Animal.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> species: String,</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상위 클래스의 생성자를 바로 호출</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">" 고양이가 사뿐 사뿐 걸어가~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 프로퍼치를 override 할 때 무조건 open 을 붙여 줘야 한다.</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><figure class="highlight kotlin"><figcaption><span>Flyable.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"파닥 파닥"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Swimable.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"어푸 어푸"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Penguin.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>), Swimable, Flyable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 중복되는 인터페이스를 특정할때 `super&lt;타입&gt;.함수` 사용</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Swimable&gt;.act()</span><br><span class="line">        <span class="keyword">super</span>&lt;Flyable&gt;.act()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상속-관련-키워드"><a href="#상속-관련-키워드" class="headerlink" title="상속 관련 키워드"></a>상속 관련 키워드</h2><ol><li>final: override를 할 수 없게 한다. default로 보이지 않게 존재</li><li>open: override를 열어 준다.</li><li>abstract: 반드시 override 해야 한다.</li><li>override: 상위 타입을 오버라이드 하고 있다.</li></ol><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/10-inheritance" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 상속을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 9. 코틀린에서 클래스를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter9/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter9/</id>
    <published>2022-08-19T15:00:00.000Z</published>
    <updated>2022-08-20T08:24:29.456Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 클래스를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="클래스와-프로퍼티"><a href="#클래스와-프로퍼티" class="headerlink" title="클래스와 프로퍼티"></a>클래스와 프로퍼티</h2><p>프로퍼티 = 필드 + getter + setter<br>kotlin엥서는 필드만 만들면 getter, setter를 자동으로 생성</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">    <span class="keyword">var</span> age = age</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자에서 프로퍼티와 생성자를 생성할 경우</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String, </span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성한 클래스 호출 후 데이터 입력</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    println(person.name)</span><br><span class="line">    person.age = <span class="number">10</span></span><br><span class="line">    println(person.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="생성자와-init"><a href="#생성자와-init" class="headerlink" title="생성자와 init"></a>생성자와 init</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>클래스가 초기화되는 시점에서 한번 호출하고 싶을때는 <code>init</code> 블록 생성하여 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="argument에-값을-넣고-인스턴스화-할-경우"><a href="#argument에-값을-넣고-인스턴스화-할-경우" class="headerlink" title="argument에 값을 넣고 인스턴스화 할 경우"></a>argument에 값을 넣고 인스턴스화 할 경우</h3><ul><li>주생성자(primary constructor) </li><li>부생성자(secondary constructor) 는 최종적으로 주생성자 this를 호출해야 된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 부생성자(secondary constructor)</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String): <span class="keyword">this</span>(name, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 함수</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person2 = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">val</span> person3 = Person(<span class="string">"재현"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>부생성자 사용보다는 정적 팩토리 메소드를 사용하는것이 좋음.</li></ul><h3 id="부생성자보다는-default-parameter를-권장"><a href="#부생성자보다는-default-parameter를-권장" class="headerlink" title="부생성자보다는 default parameter를 권장"></a>부생성자보다는 default parameter를 권장</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">100</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="커스텀-getter-setter"><a href="#커스텀-getter-setter" class="headerlink" title="커스텀 getter, setter"></a>커스텀 getter, setter</h2><p>프로퍼티의 속성을 나타내면 커스텀으로 생성하여 호출 해주는것이 좋음</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">idAdult</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 함수 대신 프로퍼티 처럼 생성</span></span><br><span class="line">    <span class="keyword">val</span> isAdult: <span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>예약어 <code>field</code>(자신을 가리키는) 를 사용하는 이유는 <code>name.uppercase()</code>를 사용 할 경우에 <code>name -&gt; get() -&gt; name -&gt; get()</code>을 호출 하여 무한 루프가 발생한다. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">        <span class="keyword">get</span>() = field.uppercase()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>backing field를 사용안하고 하는 경우 <code>this.name</code>을 이용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> getUpperCaseName: String </span><br><span class="line">       <span class="keyword">get</span>() = <span class="keyword">this</span>.name.uppercase()</span><br></pre></td></tr></table></figure><h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>setter 도 getter 와 동일하나 var를 이용해서 생성하면된다. 하지만 setter를 무분별하게 이용하는걸 지양하기때문에 update 와 같은 함수를 이용해서 호출하는 방법이 좋다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/9-class" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 클래스를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 8. 코틀린에서 함수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/18/kotlin/basic/chapter8/"/>
    <id>https://jaehyun8719.github.io/2022/08/18/kotlin/basic/chapter8/</id>
    <published>2022-08-17T15:00:00.000Z</published>
    <updated>2022-08-20T06:19:11.330Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 함수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="함수-선언-문법"><a href="#함수-선언-문법" class="headerlink" title="함수 선언 문법"></a>함수 선언 문법</h2><p>if - else 문은 expression 이기때문에 아래와 같이 함수 선언이 가능하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> =</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 추론이 가능하기때문에 type 생략 가능</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max3</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span>  b</span><br></pre></td></tr></table></figure><h2 id="default-parameter"><a href="#default-parameter" class="headerlink" title="default parameter"></a>default parameter</h2><p>JAVA에서 Overloading을 하여 parameter 값을 넣어줘야하는데, parameter 값이 없을떄는 default parameter 값이 적용된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">2</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">6</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="named-argument"><a href="#named-argument" class="headerlink" title="named argument"></a>named argument</h2><p>parameter를 통해서 직접 지정하고, 지정되지 않는 parameter는 기본값을 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, useNewLine = <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="같은-타입의-여러-파라미터-받기-가변인자"><a href="#같은-타입의-여러-파라미터-받기-가변인자" class="headerlink" title="같은 타입의 여러 파라미터 받기 (가변인자)"></a>같은 타입의 여러 파라미터 받기 (가변인자)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAll(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    printAll(*array) <span class="comment">// spread 연산자</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAll</span><span class="params">(<span class="keyword">vararg</span> strings: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (str <span class="keyword">in</span> strings) &#123;</span><br><span class="line">        println(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/8-fun" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 함수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 7. 코틀린에서 예외를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter7/"/>
    <id>https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter7/</id>
    <published>2022-08-13T01:00:00.000Z</published>
    <updated>2022-08-13T07:27:53.821Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 예외를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="try-cahtch-finally-구문"><a href="#try-cahtch-finally-구문" class="headerlink" title="try cahtch finally 구문"></a>try cahtch finally 구문</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseIntOrThrow</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.toInt()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"주어진 <span class="subst">$&#123;str&#125;</span>은 숫자가 아닙니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 코드를 반환할 경우</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseIntOrThrow2</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">        str.toInt()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Checked-Exception과-Unchecked-Exception"><a href="#Checked-Exception과-Unchecked-Exception" class="headerlink" title="Checked Exception과 Unchecked Exception"></a>Checked Exception과 Unchecked Exception</h2><p>Kotlin에서는 Checked Exception과 Unchecked Exception을 구분하지 않는다.<br>모두 Unchecked Excpetion 이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> currentFile = File(<span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">val</span> file = File(currentFile.absolutePath + <span class="string">"/a.txt"</span>)</span><br><span class="line">    <span class="keyword">val</span> reader = BufferedReader(FileReader(file))</span><br><span class="line">    println(reader.readLine())</span><br><span class="line">    reader.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try with resources"></a>try with resources</h2><p>java에서 try with resource가 kotlin에서는 <code>use</code>를 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readFile</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    BufferedReader(FileReader(path)).use &#123;reader -&gt;</span><br><span class="line">        println(reader.readLine())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/7-exception" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 예외를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 6. 코틀린에서 반복문을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter6/"/>
    <id>https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter6/</id>
    <published>2022-08-12T15:00:00.000Z</published>
    <updated>2022-08-13T07:05:17.725Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 반복문을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="for-each-문"><a href="#for-each-문" class="headerlink" title="for each 문"></a>for each 문</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = listOf(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>)</span><br><span class="line"><span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전통적인 for문</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자가 내려가는 for문</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3</span> downTo <span class="number">1</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2씩 올리는 경우</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Progression과-Range"><a href="#Progression과-Range" class="headerlink" title="Progression과 Range"></a>Progression과 Range</h2><h3 id="연산자"><a href="#연산자" class="headerlink" title="..연산자"></a>..연산자</h3><ol><li>.. 연산자는 범위를 만들어 내는 연산자로 1..3은 1부터 3의 범위를 나타낸다.</li><li>IntRange는 IntProgression(등차수열)을 상속 받어 등차수열을 만든다.</li><li>downTo, step 도 함수(중위 호출 함수)</li></ol><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/6-loop" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 반복문을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 5. 코틀린에서 제어문를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter5/"/>
    <id>https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter5/</id>
    <published>2022-08-12T11:00:00.000Z</published>
    <updated>2022-08-12T11:58:19.781Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 제어문을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><p>Kotlin에서는 if-else는 Expression 이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getPassOrFail</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (score &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="string">"P"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="string">"F"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getGradeWithSwitch</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="number">9</span> -&gt; <span class="string">"A"</span></span><br><span class="line">        <span class="number">8</span> -&gt; <span class="string">"B"</span></span><br><span class="line">        <span class="number">7</span> -&gt; <span class="string">"C"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"D"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getGradeWithSwitchRange</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (score) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">90</span>..<span class="number">99</span> -&gt; <span class="string">"A"</span></span><br><span class="line">        <span class="keyword">in</span> <span class="number">80</span>..<span class="number">89</span> -&gt; <span class="string">"B"</span></span><br><span class="line">        <span class="keyword">in</span> <span class="number">70</span>..<span class="number">79</span> -&gt; <span class="string">"C"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"D"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startsWithA</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">is</span> String -&gt; obj.startsWith(<span class="string">"A"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">judgeNumber</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (number) &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span> -&gt; println(<span class="string">"어디서 많이 본 숫자입니다"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"1, 0, -1 아닙니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when 조건 값이 없을 경우</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">judgeNumber2</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> &#123;</span><br><span class="line">        number == <span class="number">0</span> -&gt; println(<span class="string">"주어진 숫자는 0 입니다"</span>)</span><br><span class="line">        number % <span class="number">2</span> == <span class="number">0</span> -&gt; println(<span class="string">"주어진 숫자는 짝수입니다"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; print(<span class="string">"주어지는 숫자는 홀수입니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/5-if" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 제어문을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 4. 코틀린에서 연사자를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter4/"/>
    <id>https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter4/</id>
    <published>2022-08-11T15:00:00.000Z</published>
    <updated>2022-08-12T11:27:46.954Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 연산자를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="비교-연산자와-동등성-동일성"><a href="#비교-연산자와-동등성-동일성" class="headerlink" title="비교 연산자와 동등성, 동일성"></a>비교 연산자와 동등성, 동일성</h2><p>Kotlin에서는 동일성에 <code>===</code>를 사용, 동등성에 <code>==</code>를 호출 <code>==</code>를 사용하면 간접적으로 equals를 호출해준다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person1 = Person(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> person2 = person1</span><br><span class="line"><span class="keyword">val</span> person3 = Person(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">println(person1 == person3) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="논리연산자"><a href="#논리연산자" class="headerlink" title="논리연산자"></a>논리연산자</h2><p>Java 처럼 Lazy 연산을 수행</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fun1() || fun2()) &#123;</span><br><span class="line">        println(<span class="string">"본문"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun1</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">"fun 1"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun2</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">"fun 2"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---- 결과</span><br><span class="line">fun1</span><br><span class="line">본문</span><br></pre></td></tr></table></figure><h2 id="특이한-연산자"><a href="#특이한-연산자" class="headerlink" title="특이한 연산자"></a>특이한 연산자</h2><h3 id="in-in"><a href="#in-in" class="headerlink" title="in / !in"></a>in / !in</h3><p>컬렉션이나 범위에 포함되어 있다, 포함되어 있지 않다</p><h3 id="a-b"><a href="#a-b" class="headerlink" title="a..b"></a>a..b</h3><p>a부터 b까지의 범위 객체를 생성한다.</p><h3 id="a-i"><a href="#a-i" class="headerlink" title="a[i]"></a>a[i]</h3><p>a의 특정 index i에 b를 넣는다.</p><h2 id="연산자-오버로딩"><a href="#연산자-오버로딩" class="headerlink" title="연산자 오버로딩"></a>연산자 오버로딩</h2><figure class="highlight kotlin"><figcaption><span>Money.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span></span>(</span><br><span class="line">    <span class="keyword">val</span> amount: <span class="built_in">Long</span></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Money</span>)</span></span>: Money &#123;</span><br><span class="line">        <span class="keyword">return</span> Money(<span class="keyword">this</span>.amount + other.amount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 연산자 오버로딩</span></span><br><span class="line">    <span class="keyword">val</span> money1 = Money(<span class="number">1_000L</span>)</span><br><span class="line">    <span class="keyword">val</span> money2 = Money(<span class="number">2_000L</span>)</span><br><span class="line"></span><br><span class="line">    Money(amount=<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/4-operator" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 연산자를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 3. 코틀린에서 Type을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter3/"/>
    <id>https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter3/</id>
    <published>2022-08-11T11:00:00.000Z</published>
    <updated>2022-08-12T10:35:18.190Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 Type을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="기본타입"><a href="#기본타입" class="headerlink" title="기본타입"></a>기본타입</h2><p>Byte, Short, Int, Long, Float, Double 부호 없는 정수들</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number1 = <span class="number">3</span>     <span class="comment">// Int</span></span><br><span class="line"><span class="keyword">val</span> number2 = <span class="number">3L</span>    <span class="comment">// Long</span></span><br><span class="line"><span class="keyword">val</span> number3 = <span class="number">3.0F</span>  <span class="comment">// Float</span></span><br><span class="line"><span class="keyword">val</span> number4 = <span class="number">3.0</span>   <span class="comment">// Double</span></span><br></pre></td></tr></table></figure><p>kotlin은 기본 타입간의 변환은 명시적<code>(to변환타입())</code>으로 이루어 져야 한다. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number1 = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1 <span class="comment">// Type mismatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경</span></span><br><span class="line"><span class="keyword">val</span> number1 = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1.toLong()</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 이 올수 있는 type</span></span><br><span class="line"><span class="keyword">val</span> number1: <span class="built_in">Int</span>? = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1?.toLong() ?: <span class="number">0L</span></span><br></pre></td></tr></table></figure><h2 id="타입-캐스팅"><a href="#타입-캐스팅" class="headerlink" title="타입 캐스팅"></a>타입 캐스팅</h2><h3 id="is-as"><a href="#is-as" class="headerlink" title="is, as"></a>is, as</h3><p>java에서 <code>instanceOf</code>를 <code>is</code>로 사용하고, 타입 캐스팅은 <code>as</code>를 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">        <span class="keyword">val</span> person = obj <span class="keyword">as</span> Person</span><br><span class="line">        println(person.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타입 캐스팅 as 생략가능한 스마트 캐스트</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">        println(obj.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="is"><a href="#is" class="headerlink" title="!is"></a>!is</h2><p><code>!is</code>를 붙여 타입 체크를 하면 반대의 오브젝트만 올수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !<span class="keyword">is</span> Person) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="as"><a href="#as" class="headerlink" title="as?"></a>as?</h3><p><code>as?</code>를 이용해서 Object 앖이 null 인지를 체크 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAgeIfPerson(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfAsPerson</span><span class="params">(obj: <span class="type">Any</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = obj <span class="keyword">as</span>? Person</span><br><span class="line">    println(person?.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="특이한-타입-3가지"><a href="#특이한-타입-3가지" class="headerlink" title="특이한 타입 3가지"></a>특이한 타입 3가지</h2><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li>JAVA의 Object 역할</li><li>모든 Primitive Type의 최상의 타입도 Any</li><li>Any 자체로는 null을 포함할 수 없어 null 포함하고 싶다면, Any?로 표현</li><li>Any에 equals / hashCode / toString 존재</li></ul><h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><ul><li>Unit은 Java의 void와 동일한 역할</li><li>void와 다르게 Unit은 그 자체로 타입 인자로 사용 가능</li><li>함수형 프로그래밍에서 Unit은 단 하나의 인스턴스만 갖는 타입을 의미. 즉, 코틀린의 Unit은 실제 존재하는 타입이라는 것을 표현</li></ul><h3 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h3><ul><li>Nothing은 함수가 정상적으로 끝나지 않았다는 사실을 표현하는 역할</li><li>무조건 예외를 반환하는 함수 / 무한 루프 함수 등</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fail</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Nothing</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> IllegalArgumentException(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-interpolation-String-indexing"><a href="#String-interpolation-String-indexing" class="headerlink" title="String interpolation / String indexing"></a>String interpolation / String indexing</h2><h3 id="String-interpolation"><a href="#String-interpolation" class="headerlink" title="String interpolation"></a>String interpolation</h3><p>변수 이름만 사용하더라도 ${변수}를 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> age = <span class="number">77</span></span><br><span class="line"><span class="keyword">val</span> log = <span class="string">"사람의 나이는 <span class="subst">$&#123;age&#125;</span> 입니다."</span></span><br></pre></td></tr></table></figure><h3 id="String-indexing"><a href="#String-indexing" class="headerlink" title="String indexing"></a>String indexing</h3><p><code>&quot;&quot;&quot;&quot;&quot;&quot;</code>를 사용 하여 칸이동 등 자유롭게 문자사용 가능</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"""</span></span><br><span class="line"><span class="string">    ABC</span></span><br><span class="line"><span class="string">    EFG</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">"""</span>.trimIndent() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력</span></span><br><span class="line">    ABC</span><br><span class="line">    EFG</span><br><span class="line">    <span class="number">77</span></span><br></pre></td></tr></table></figure><p>kotlin에서 문자열의 특정 문자 가져오기</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"ABC"</span></span><br><span class="line"><span class="keyword">val</span> ch = str[<span class="number">1</span>] <span class="comment">// A 출력</span></span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/3-type" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 Type을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 2. 코틀린에서 null을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter2/"/>
    <id>https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter2/</id>
    <published>2022-08-10T15:00:00.000Z</published>
    <updated>2022-08-11T11:20:58.723Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 null을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="코틀린에서-null-체크"><a href="#코틀린에서-null-체크" class="headerlink" title="코틀린에서 null 체크"></a>코틀린에서 null 체크</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA1</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"null이 들어왔습니다."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA2</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA3</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>startWithA1</code>에서 parameter값에 null이 올수 있기 때문에 type에 <code>?</code> 붙여 null이 들어올 수 있음을 명시</li><li><code>startWithA2</code>에서 return type에 null이 올수 있기 떄문에 return type에 <code>?</code> 붙여 null이 들어올 수 있음을 명시</li><li>1번과 동일</li></ol><h2 id="Safe-Call과-Elvis-연산자"><a href="#Safe-Call과-Elvis-연산자" class="headerlink" title="Safe Call과 Elvis 연산자"></a>Safe Call과 Elvis 연산자</h2><h3 id="Safe-Call"><a href="#Safe-Call" class="headerlink" title="Safe Call"></a>Safe Call</h3><p>Safe Call(?)은 null 아니면 실행하고, null이면 실행하지 않고 null값을 반환 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str: String? = <span class="string">"ABC"</span></span><br><span class="line">str.length <span class="comment">// 불가능</span></span><br><span class="line">str?.length <span class="comment">// 가능!</span></span><br></pre></td></tr></table></figure><h3 id="Elvis-연산자"><a href="#Elvis-연산자" class="headerlink" title="Elvis 연산자"></a>Elvis 연산자</h3><p>Elvis 연산자(?:)는 앞의 연산 결과가 null이면 뒤의 값을 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2: String? = <span class="literal">null</span></span><br><span class="line">str2?.length ?: <span class="number">0</span> <span class="comment">// null 이면 무조건 0</span></span><br></pre></td></tr></table></figure><h3 id="코틀린에서-null-체크를-코틀린-스럽게-변경"><a href="#코틀린에서-null-체크를-코틀린-스럽게-변경" class="headerlink" title="코틀린에서 null 체크를 코틀린 스럽게 변경"></a>코틀린에서 null 체크를 코틀린 스럽게 변경</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA1</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>) ?: <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"null이 들어왔습니다."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA2</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA3</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>) ?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="null-아님-단언"><a href="#null-아님-단언" class="headerlink" title="null 아님 단언"></a>null 아님 단언</h2><p>nullable type이지만, 아무리 생각해도 null이 될 수 없는 경우 <code>!!</code>를 사용<br>만약 null 값이 들어왔을 경우는 nullPointException이 발생</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWith</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str!!.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/2-null" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 null을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 1. 코틀린에서 변수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/09/kotlin/basic/chapter1/"/>
    <id>https://jaehyun8719.github.io/2022/08/09/kotlin/basic/chapter1/</id>
    <published>2022-08-08T15:00:00.000Z</published>
    <updated>2022-08-09T11:17:14.119Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 변수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="변수-선언-키워드-var과-val의-차이점"><a href="#변수-선언-키워드-var과-val의-차이점" class="headerlink" title="변수 선언 키워드 - var과 val의 차이점"></a>변수 선언 키워드 - var과 val의 차이점</h2><p>코틀린에서 가변은 <code>var</code> 불변은 <code>val</code>을 사용 하면된다.</p><ul><li>var(발)는 Variable의 약자</li><li>val(밸)은 Value의 약자</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number1 = <span class="number">10L</span></span><br><span class="line"><span class="keyword">val</span> number2 = <span class="number">10L</span></span><br></pre></td></tr></table></figure><p>코틀린은 Type추론이 가능하기 때문에 원한다면 :Type을 작성해서 사용 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number1: <span class="built_in">Long</span> = <span class="number">10L</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = <span class="number">10L</span></span><br></pre></td></tr></table></figure><h2 id="초기값을-지정해주지-않는-경우"><a href="#초기값을-지정해주지-않는-경우" class="headerlink" title="초기값을 지정해주지 않는 경우"></a>초기값을 지정해주지 않는 경우</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number: <span class="built_in">Int</span></span><br><span class="line">println(a) <span class="comment">// 컴파일 에러 발생, Variable 'a' must be initialize</span></span><br></pre></td></tr></table></figure><h2 id="Primitive-Type"><a href="#Primitive-Type" class="headerlink" title="Primitive Type"></a>Primitive Type</h2><p>코틀린에서는 boxing/unboxing을 고려하지 않아도 되도록 처리</p><h2 id="nullable"><a href="#nullable" class="headerlink" title="nullable"></a>nullable</h2><p>코틀린에서 null이 변수에 들어갈 수 있다면 <code>?</code>를 사용해야 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number3: <span class="built_in">Long</span>? = <span class="number">1_000L</span></span><br><span class="line">number3 = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="객체-인스턴스화"><a href="#객체-인스턴스화" class="headerlink" title="객체 인스턴스화"></a>객체 인스턴스화</h2><p>코틀린에서는 객체 인스턴스화를 할 때에는 new를 붙이지 않는다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person = Person(<span class="string">"사람1"</span>)</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/1-variable" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 변수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 연관관계 매핑(Realation Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/05/28/jpa/basic/relation-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/05/28/jpa/basic/relation-mapping/</id>
    <published>2022-05-27T15:00:00.000Z</published>
    <updated>2022-05-28T09:58:56.262Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>방향(Direction): 단방향, 양방향</li><li>연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요<a id="more"></a></li></ul><h2 id="단방향-연관관계"><a href="#단방향-연관관계" class="headerlink" title="단방향 연관관계"></a>단방향 연관관계</h2><p><img src="/images/jpa/relation-mapping/relation-mapping1.png" width="50%"></p><p>DB 기준에서 <code>Member</code>와 <code>Team</code>관계는 <code>다대일(N:1)</code>이다.  </p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> userName: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findTeam = findMember.team</span><br><span class="line">        <span class="keyword">if</span> (findTeam != <span class="literal">null</span>) &#123;</span><br><span class="line">            println(<span class="string">"findTeam = "</span> + findTeam.name)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findTeam = TeamA</span><br></pre></td></tr></table></figure><ol><li><code>다대일(N:1)</code>관계 이므로 <code>@ManyToOne</code> 사용</li><li>객체관계여서 <code>Team</code>에 아이디 Join을 하기 위한 <code>@JoinColumn(name = &quot;TEAM_ID&quot;)</code> 사용</li><li>find를 이용해서 Member에 있는 Team 객체를 이용할 수 있다.</li></ol><h2 id="양방향-연관관계와-연관관계의-주인"><a href="#양방향-연관관계와-연관관계의-주인" class="headerlink" title="양방향 연관관계와 연관관계의 주인"></a>양방향 연관관계와 연관관계의 주인</h2><p><img src="/images/jpa/relation-mapping/relation-mapping2.png" width="50%"></p><figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = arrayListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단방향과 같으나 <code>members</code>객체를 추가</p><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line">        <span class="keyword">val</span> members = findMember.team?.members</span><br><span class="line"></span><br><span class="line">        members?.forEach &#123;</span><br><span class="line">            println(<span class="string">"member = "</span> + it.username)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">member = member1</span><br></pre></td></tr></table></figure><ul><li>양방향 객체 연관관계는 <code>회원 -&gt; 팀</code> 연관관계 1개(단방향), <code>팀 -&gt; 회원</code> 1개(단방향)서로 다른 방향으로 각각 1개씩 해서 2개(양방향)이라고 생각해야된다.</li><li>테이블 연관관계는 PK, FK로 JOIN 을 해서 <code>회원, 팀</code>을 서로 알 수 있다.</li></ul><h3 id="연관관계의-주인-Owner"><a href="#연관관계의-주인-Owner" class="headerlink" title="연관관계의 주인(Owner)"></a>연관관계의 주인(Owner)</h3><ul><li>객체의 두 관계중 하나를 연관관계의 주인으로 지정(외래 키가 있는 곳을 주인으로 지정)</li><li>연관관계의 주인만이 외래 키를 관리(등록, 수정)</li><li>주인이 아닌 쪽은 읽기만 가능</li><li>주인은 <code>mappedBy</code> 속성 사용 안함</li><li>주인이 아니면 <code>mappedBy</code> 속성으로 주인 지정</li></ul><h2 id="양방향-매핑시-주의점"><a href="#양방향-매핑시-주의점" class="headerlink" title="양방향 매핑시 주의점"></a>양방향 매핑시 주의점</h2><h3 id="연관관계-주인에-값을-입력-하지-않음"><a href="#연관관계-주인에-값을-입력-하지-않음" class="headerlink" title="연관관계 주인에 값을 입력 하지 않음"></a>연관관계 주인에 값을 입력 하지 않음</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">team.members.add(member)</span><br><span class="line">em.persist(team)</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/relation-mapping/relation-mapping3.png" width="30%"></p><ul><li><code>Member</code>테이블을 보면 <code>TEAM_ID</code>컬럼 값이 null 값인걸 확인 할 수 있다. 그 이유는 위에서 설정한<code>(@OneToMany(mappedBy = &quot;team&quot;))</code> 연관관계의 주인이 <code>team</code> 이므로 아래의 코드와 같이 주인을 먼저 insert 쿼리를 실행 해야된다. (mappedBy 설정한 부분은 읽기 전용) </li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/relation-mapping/relation-mapping4.png" width="30%"></p><h3 id="순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음"><a href="#순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음" class="headerlink" title="순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음"></a>순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음</h3><p>team.members 입력하면 영속상태(1차캐시)이므로 바로 조회해서 사용 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line">team.members.add(member)</span><br></pre></td></tr></table></figure><h3 id="연관관계-편의-메소드를-생성"><a href="#연관관계-편의-메소드를-생성" class="headerlink" title="연관관계 편의 메소드를 생성"></a>연관관계 편의 메소드를 생성</h3><p>양쪽에 값을 입력 하다보면 실수를 할 수 있으니, 주인에 값을 입력할때 같이 입력 할 수 있는 함수(편의 메소드)를 생성</p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 편의 메소드 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.changeTeam(team) <span class="comment">// 편의 메소드 추가</span></span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><h3 id="양방향-매핑시에-무한-루프-조심"><a href="#양방향-매핑시에-무한-루프-조심" class="headerlink" title="양방향 매핑시에 무한 루프 조심"></a>양방향 매핑시에 무한 루프 조심</h3><ul><li>toString, JSON 생성 라이브러리 사용시 반복적으로 객체 를 호출 하면서 무한 루프에 빠지게 된다.</li><li>JSON 생성 라이브러리 사용시 Entity 를 반환하지 말고 DTO로 변환해서 반환을 해야 된다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;방향(Direction): 단방향, 양방향&lt;/li&gt;
&lt;li&gt;연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Realation" scheme="https://jaehyun8719.github.io/tags/Realation/"/>
    
      <category term="Realation Mapping" scheme="https://jaehyun8719.github.io/tags/Realation-Mapping/"/>
    
      <category term="연관관계 맵핑" scheme="https://jaehyun8719.github.io/tags/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
</feed>
