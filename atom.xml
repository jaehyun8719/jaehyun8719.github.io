<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaehyun&#39;s Dev Story</title>
  
  <subtitle>공부해서 남준다.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaehyun8719.github.io/"/>
  <updated>2022-08-20T08:57:57.194Z</updated>
  <id>https://jaehyun8719.github.io/</id>
  
  <author>
    <name>Jaehyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 10. 코틀린에서 상속을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter10/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter10/</id>
    <published>2022-08-20T11:00:00.000Z</published>
    <updated>2022-08-20T08:57:57.194Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 상속을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><figure class="highlight kotlin"><figcaption><span>Animal.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> species: String,</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상위 클래스의 생성자를 바로 호출</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">" 고양이가 사뿐 사뿐 걸어가~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 프로퍼치를 override 할 때 무조건 open 을 붙여 줘야 한다.</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><figure class="highlight kotlin"><figcaption><span>Flyable.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"파닥 파닥"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Swimable.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"어푸 어푸"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Penguin.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>), Swimable, Flyable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 중복되는 인터페이스를 특정할때 `super&lt;타입&gt;.함수` 사용</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Swimable&gt;.act()</span><br><span class="line">        <span class="keyword">super</span>&lt;Flyable&gt;.act()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상속-관련-키워드"><a href="#상속-관련-키워드" class="headerlink" title="상속 관련 키워드"></a>상속 관련 키워드</h2><ol><li>final: override를 할 수 없게 한다. default로 보이지 않게 존재</li><li>open: override를 열어 준다.</li><li>abstract: 반드시 override 해야 한다.</li><li>override: 상위 타입을 오버라이드 하고 있다.</li></ol><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/10-inheritance" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 상속을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 11. 코틀린에서 접근 제어를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter11/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter11/</id>
    <published>2022-08-20T11:00:00.000Z</published>
    <updated>2022-08-22T10:04:34.756Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><ul><li>Koltin의 기본 접근 지시어는 <code>public</code> 이다</li></ul><table><thead><tr><th>접근 제어 명령어</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>모든 곳에서 접근 가능</td></tr><tr><td>protected</td><td>선언된 클래스 또는 하위 클래스에서만 접급 가능</td></tr><tr><td>internal</td><td>같은 모듈에서만 접근 가능</td></tr><tr><td>private</td><td>선언된 클래스 내에서만 접근 가능</td></tr></tbody></table><ul><li>Kotlin 파일</li></ul><table><thead><tr><th>접근 제어 명령어</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>기본값은 어디서든 접근</td></tr><tr><td>protected</td><td>파일(최상단)에는 사용 불가능</td></tr><tr><td>internal</td><td>같은 모듈에서만 접근 가능</td></tr><tr><td>private</td><td>같은 파일 내에서만 접근 가능</td></tr></tbody></table><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/11-visibility-modifier" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 9. 코틀린에서 클래스를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter9/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter9/</id>
    <published>2022-08-19T15:00:00.000Z</published>
    <updated>2022-08-20T08:24:29.456Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 클래스를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="클래스와-프로퍼티"><a href="#클래스와-프로퍼티" class="headerlink" title="클래스와 프로퍼티"></a>클래스와 프로퍼티</h2><p>프로퍼티 = 필드 + getter + setter<br>kotlin엥서는 필드만 만들면 getter, setter를 자동으로 생성</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">    <span class="keyword">var</span> age = age</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자에서 프로퍼티와 생성자를 생성할 경우</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String, </span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성한 클래스 호출 후 데이터 입력</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    println(person.name)</span><br><span class="line">    person.age = <span class="number">10</span></span><br><span class="line">    println(person.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="생성자와-init"><a href="#생성자와-init" class="headerlink" title="생성자와 init"></a>생성자와 init</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>클래스가 초기화되는 시점에서 한번 호출하고 싶을때는 <code>init</code> 블록 생성하여 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="argument에-값을-넣고-인스턴스화-할-경우"><a href="#argument에-값을-넣고-인스턴스화-할-경우" class="headerlink" title="argument에 값을 넣고 인스턴스화 할 경우"></a>argument에 값을 넣고 인스턴스화 할 경우</h3><ul><li>주생성자(primary constructor) </li><li>부생성자(secondary constructor) 는 최종적으로 주생성자 this를 호출해야 된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 부생성자(secondary constructor)</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String): <span class="keyword">this</span>(name, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 함수</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person2 = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">val</span> person3 = Person(<span class="string">"재현"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>부생성자 사용보다는 정적 팩토리 메소드를 사용하는것이 좋음.</li></ul><h3 id="부생성자보다는-default-parameter를-권장"><a href="#부생성자보다는-default-parameter를-권장" class="headerlink" title="부생성자보다는 default parameter를 권장"></a>부생성자보다는 default parameter를 권장</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">100</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="커스텀-getter-setter"><a href="#커스텀-getter-setter" class="headerlink" title="커스텀 getter, setter"></a>커스텀 getter, setter</h2><p>프로퍼티의 속성을 나타내면 커스텀으로 생성하여 호출 해주는것이 좋음</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">idAdult</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 함수 대신 프로퍼티 처럼 생성</span></span><br><span class="line">    <span class="keyword">val</span> isAdult: <span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>예약어 <code>field</code>(자신을 가리키는) 를 사용하는 이유는 <code>name.uppercase()</code>를 사용 할 경우에 <code>name -&gt; get() -&gt; name -&gt; get()</code>을 호출 하여 무한 루프가 발생한다. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">        <span class="keyword">get</span>() = field.uppercase()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>backing field를 사용안하고 하는 경우 <code>this.name</code>을 이용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> getUpperCaseName: String </span><br><span class="line">       <span class="keyword">get</span>() = <span class="keyword">this</span>.name.uppercase()</span><br></pre></td></tr></table></figure><h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>setter 도 getter 와 동일하나 var를 이용해서 생성하면된다. 하지만 setter를 무분별하게 이용하는걸 지양하기때문에 update 와 같은 함수를 이용해서 호출하는 방법이 좋다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/9-class" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 클래스를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 8. 코틀린에서 함수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/18/kotlin/basic/chapter8/"/>
    <id>https://jaehyun8719.github.io/2022/08/18/kotlin/basic/chapter8/</id>
    <published>2022-08-17T15:00:00.000Z</published>
    <updated>2022-08-20T06:19:11.330Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 함수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="함수-선언-문법"><a href="#함수-선언-문법" class="headerlink" title="함수 선언 문법"></a>함수 선언 문법</h2><p>if - else 문은 expression 이기때문에 아래와 같이 함수 선언이 가능하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> =</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 추론이 가능하기때문에 type 생략 가능</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max3</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span>  b</span><br></pre></td></tr></table></figure><h2 id="default-parameter"><a href="#default-parameter" class="headerlink" title="default parameter"></a>default parameter</h2><p>JAVA에서 Overloading을 하여 parameter 값을 넣어줘야하는데, parameter 값이 없을떄는 default parameter 값이 적용된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">2</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">6</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="named-argument"><a href="#named-argument" class="headerlink" title="named argument"></a>named argument</h2><p>parameter를 통해서 직접 지정하고, 지정되지 않는 parameter는 기본값을 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, useNewLine = <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="같은-타입의-여러-파라미터-받기-가변인자"><a href="#같은-타입의-여러-파라미터-받기-가변인자" class="headerlink" title="같은 타입의 여러 파라미터 받기 (가변인자)"></a>같은 타입의 여러 파라미터 받기 (가변인자)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAll(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    printAll(*array) <span class="comment">// spread 연산자</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAll</span><span class="params">(<span class="keyword">vararg</span> strings: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (str <span class="keyword">in</span> strings) &#123;</span><br><span class="line">        println(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/8-fun" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 함수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 7. 코틀린에서 예외를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter7/"/>
    <id>https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter7/</id>
    <published>2022-08-13T01:00:00.000Z</published>
    <updated>2022-08-13T07:27:53.821Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 예외를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="try-cahtch-finally-구문"><a href="#try-cahtch-finally-구문" class="headerlink" title="try cahtch finally 구문"></a>try cahtch finally 구문</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseIntOrThrow</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.toInt()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"주어진 <span class="subst">$&#123;str&#125;</span>은 숫자가 아닙니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 코드를 반환할 경우</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseIntOrThrow2</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">        str.toInt()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Checked-Exception과-Unchecked-Exception"><a href="#Checked-Exception과-Unchecked-Exception" class="headerlink" title="Checked Exception과 Unchecked Exception"></a>Checked Exception과 Unchecked Exception</h2><p>Kotlin에서는 Checked Exception과 Unchecked Exception을 구분하지 않는다.<br>모두 Unchecked Excpetion 이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> currentFile = File(<span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">val</span> file = File(currentFile.absolutePath + <span class="string">"/a.txt"</span>)</span><br><span class="line">    <span class="keyword">val</span> reader = BufferedReader(FileReader(file))</span><br><span class="line">    println(reader.readLine())</span><br><span class="line">    reader.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try with resources"></a>try with resources</h2><p>java에서 try with resource가 kotlin에서는 <code>use</code>를 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readFile</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    BufferedReader(FileReader(path)).use &#123;reader -&gt;</span><br><span class="line">        println(reader.readLine())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/7-exception" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 예외를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 6. 코틀린에서 반복문을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter6/"/>
    <id>https://jaehyun8719.github.io/2022/08/13/kotlin/basic/chapter6/</id>
    <published>2022-08-12T15:00:00.000Z</published>
    <updated>2022-08-13T07:05:17.725Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 반복문을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="for-each-문"><a href="#for-each-문" class="headerlink" title="for each 문"></a>for each 문</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = listOf(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>)</span><br><span class="line"><span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전통적인 for문</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자가 내려가는 for문</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3</span> downTo <span class="number">1</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2씩 올리는 경우</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Progression과-Range"><a href="#Progression과-Range" class="headerlink" title="Progression과 Range"></a>Progression과 Range</h2><h3 id="연산자"><a href="#연산자" class="headerlink" title="..연산자"></a>..연산자</h3><ol><li>.. 연산자는 범위를 만들어 내는 연산자로 1..3은 1부터 3의 범위를 나타낸다.</li><li>IntRange는 IntProgression(등차수열)을 상속 받어 등차수열을 만든다.</li><li>downTo, step 도 함수(중위 호출 함수)</li></ol><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/6-loop" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 반복문을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 5. 코틀린에서 제어문를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter5/"/>
    <id>https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter5/</id>
    <published>2022-08-12T11:00:00.000Z</published>
    <updated>2022-08-12T11:58:19.781Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 제어문을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><p>Kotlin에서는 if-else는 Expression 이다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getPassOrFail</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (score &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="string">"P"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="string">"F"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getGradeWithSwitch</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="number">9</span> -&gt; <span class="string">"A"</span></span><br><span class="line">        <span class="number">8</span> -&gt; <span class="string">"B"</span></span><br><span class="line">        <span class="number">7</span> -&gt; <span class="string">"C"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"D"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getGradeWithSwitchRange</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (score) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">90</span>..<span class="number">99</span> -&gt; <span class="string">"A"</span></span><br><span class="line">        <span class="keyword">in</span> <span class="number">80</span>..<span class="number">89</span> -&gt; <span class="string">"B"</span></span><br><span class="line">        <span class="keyword">in</span> <span class="number">70</span>..<span class="number">79</span> -&gt; <span class="string">"C"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"D"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startsWithA</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">is</span> String -&gt; obj.startsWith(<span class="string">"A"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">judgeNumber</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (number) &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span> -&gt; println(<span class="string">"어디서 많이 본 숫자입니다"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"1, 0, -1 아닙니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when 조건 값이 없을 경우</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">judgeNumber2</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> &#123;</span><br><span class="line">        number == <span class="number">0</span> -&gt; println(<span class="string">"주어진 숫자는 0 입니다"</span>)</span><br><span class="line">        number % <span class="number">2</span> == <span class="number">0</span> -&gt; println(<span class="string">"주어진 숫자는 짝수입니다"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; print(<span class="string">"주어지는 숫자는 홀수입니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/5-if" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 제어문을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 4. 코틀린에서 연사자를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter4/"/>
    <id>https://jaehyun8719.github.io/2022/08/12/kotlin/basic/chapter4/</id>
    <published>2022-08-11T15:00:00.000Z</published>
    <updated>2022-08-12T11:27:46.954Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 연산자를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="비교-연산자와-동등성-동일성"><a href="#비교-연산자와-동등성-동일성" class="headerlink" title="비교 연산자와 동등성, 동일성"></a>비교 연산자와 동등성, 동일성</h2><p>Kotlin에서는 동일성에 <code>===</code>를 사용, 동등성에 <code>==</code>를 호출 <code>==</code>를 사용하면 간접적으로 equals를 호출해준다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person1 = Person(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> person2 = person1</span><br><span class="line"><span class="keyword">val</span> person3 = Person(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">println(person1 == person3) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="논리연산자"><a href="#논리연산자" class="headerlink" title="논리연산자"></a>논리연산자</h2><p>Java 처럼 Lazy 연산을 수행</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fun1() || fun2()) &#123;</span><br><span class="line">        println(<span class="string">"본문"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun1</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">"fun 1"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun2</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">"fun 2"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---- 결과</span><br><span class="line">fun1</span><br><span class="line">본문</span><br></pre></td></tr></table></figure><h2 id="특이한-연산자"><a href="#특이한-연산자" class="headerlink" title="특이한 연산자"></a>특이한 연산자</h2><h3 id="in-in"><a href="#in-in" class="headerlink" title="in / !in"></a>in / !in</h3><p>컬렉션이나 범위에 포함되어 있다, 포함되어 있지 않다</p><h3 id="a-b"><a href="#a-b" class="headerlink" title="a..b"></a>a..b</h3><p>a부터 b까지의 범위 객체를 생성한다.</p><h3 id="a-i"><a href="#a-i" class="headerlink" title="a[i]"></a>a[i]</h3><p>a의 특정 index i에 b를 넣는다.</p><h2 id="연산자-오버로딩"><a href="#연산자-오버로딩" class="headerlink" title="연산자 오버로딩"></a>연산자 오버로딩</h2><figure class="highlight kotlin"><figcaption><span>Money.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span></span>(</span><br><span class="line">    <span class="keyword">val</span> amount: <span class="built_in">Long</span></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Money</span>)</span></span>: Money &#123;</span><br><span class="line">        <span class="keyword">return</span> Money(<span class="keyword">this</span>.amount + other.amount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 연산자 오버로딩</span></span><br><span class="line">    <span class="keyword">val</span> money1 = Money(<span class="number">1_000L</span>)</span><br><span class="line">    <span class="keyword">val</span> money2 = Money(<span class="number">2_000L</span>)</span><br><span class="line"></span><br><span class="line">    Money(amount=<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/4-operator" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 연산자를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 3. 코틀린에서 Type을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter3/"/>
    <id>https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter3/</id>
    <published>2022-08-11T11:00:00.000Z</published>
    <updated>2022-08-12T10:35:18.190Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 Type을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="기본타입"><a href="#기본타입" class="headerlink" title="기본타입"></a>기본타입</h2><p>Byte, Short, Int, Long, Float, Double 부호 없는 정수들</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number1 = <span class="number">3</span>     <span class="comment">// Int</span></span><br><span class="line"><span class="keyword">val</span> number2 = <span class="number">3L</span>    <span class="comment">// Long</span></span><br><span class="line"><span class="keyword">val</span> number3 = <span class="number">3.0F</span>  <span class="comment">// Float</span></span><br><span class="line"><span class="keyword">val</span> number4 = <span class="number">3.0</span>   <span class="comment">// Double</span></span><br></pre></td></tr></table></figure><p>kotlin은 기본 타입간의 변환은 명시적<code>(to변환타입())</code>으로 이루어 져야 한다. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number1 = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1 <span class="comment">// Type mismatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경</span></span><br><span class="line"><span class="keyword">val</span> number1 = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1.toLong()</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 이 올수 있는 type</span></span><br><span class="line"><span class="keyword">val</span> number1: <span class="built_in">Int</span>? = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1?.toLong() ?: <span class="number">0L</span></span><br></pre></td></tr></table></figure><h2 id="타입-캐스팅"><a href="#타입-캐스팅" class="headerlink" title="타입 캐스팅"></a>타입 캐스팅</h2><h3 id="is-as"><a href="#is-as" class="headerlink" title="is, as"></a>is, as</h3><p>java에서 <code>instanceOf</code>를 <code>is</code>로 사용하고, 타입 캐스팅은 <code>as</code>를 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">        <span class="keyword">val</span> person = obj <span class="keyword">as</span> Person</span><br><span class="line">        println(person.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타입 캐스팅 as 생략가능한 스마트 캐스트</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">        println(obj.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="is"><a href="#is" class="headerlink" title="!is"></a>!is</h2><p><code>!is</code>를 붙여 타입 체크를 하면 반대의 오브젝트만 올수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !<span class="keyword">is</span> Person) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="as"><a href="#as" class="headerlink" title="as?"></a>as?</h3><p><code>as?</code>를 이용해서 Object 앖이 null 인지를 체크 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAgeIfPerson(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfAsPerson</span><span class="params">(obj: <span class="type">Any</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = obj <span class="keyword">as</span>? Person</span><br><span class="line">    println(person?.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="특이한-타입-3가지"><a href="#특이한-타입-3가지" class="headerlink" title="특이한 타입 3가지"></a>특이한 타입 3가지</h2><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul><li>JAVA의 Object 역할</li><li>모든 Primitive Type의 최상의 타입도 Any</li><li>Any 자체로는 null을 포함할 수 없어 null 포함하고 싶다면, Any?로 표현</li><li>Any에 equals / hashCode / toString 존재</li></ul><h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><ul><li>Unit은 Java의 void와 동일한 역할</li><li>void와 다르게 Unit은 그 자체로 타입 인자로 사용 가능</li><li>함수형 프로그래밍에서 Unit은 단 하나의 인스턴스만 갖는 타입을 의미. 즉, 코틀린의 Unit은 실제 존재하는 타입이라는 것을 표현</li></ul><h3 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h3><ul><li>Nothing은 함수가 정상적으로 끝나지 않았다는 사실을 표현하는 역할</li><li>무조건 예외를 반환하는 함수 / 무한 루프 함수 등</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fail</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Nothing</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> IllegalArgumentException(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-interpolation-String-indexing"><a href="#String-interpolation-String-indexing" class="headerlink" title="String interpolation / String indexing"></a>String interpolation / String indexing</h2><h3 id="String-interpolation"><a href="#String-interpolation" class="headerlink" title="String interpolation"></a>String interpolation</h3><p>변수 이름만 사용하더라도 ${변수}를 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> age = <span class="number">77</span></span><br><span class="line"><span class="keyword">val</span> log = <span class="string">"사람의 나이는 <span class="subst">$&#123;age&#125;</span> 입니다."</span></span><br></pre></td></tr></table></figure><h3 id="String-indexing"><a href="#String-indexing" class="headerlink" title="String indexing"></a>String indexing</h3><p><code>&quot;&quot;&quot;&quot;&quot;&quot;</code>를 사용 하여 칸이동 등 자유롭게 문자사용 가능</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"""</span></span><br><span class="line"><span class="string">    ABC</span></span><br><span class="line"><span class="string">    EFG</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">"""</span>.trimIndent() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력</span></span><br><span class="line">    ABC</span><br><span class="line">    EFG</span><br><span class="line">    <span class="number">77</span></span><br></pre></td></tr></table></figure><p>kotlin에서 문자열의 특정 문자 가져오기</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"ABC"</span></span><br><span class="line"><span class="keyword">val</span> ch = str[<span class="number">1</span>] <span class="comment">// A 출력</span></span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/3-type" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 Type을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 2. 코틀린에서 null을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter2/"/>
    <id>https://jaehyun8719.github.io/2022/08/11/kotlin/basic/chapter2/</id>
    <published>2022-08-10T15:00:00.000Z</published>
    <updated>2022-08-11T11:20:02.163Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 null을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="코틀린에서-null-체크"><a href="#코틀린에서-null-체크" class="headerlink" title="코틀린에서 null 체크"></a>코틀린에서 null 체크</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA1</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"null이 들어왔습니다."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA2</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA3</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>startWithA1</code>에서 parameter값에 null이 올수 있기 때문에 type에 <code>?</code> 붙여 null이 들어올 수 있음을 명시</li><li><code>startWithA2</code>에서 return type에 null이 올수 있기 떄문에 return type에 <code>?</code> 붙여 null이 들어올 수 있음을 명시</li><li>1번과 동일</li></ol><h2 id="Safe-Call과-Elvis-연산자"><a href="#Safe-Call과-Elvis-연산자" class="headerlink" title="Safe Call과 Elvis 연산자"></a>Safe Call과 Elvis 연산자</h2><h3 id="Safe-Call"><a href="#Safe-Call" class="headerlink" title="Safe Call"></a>Safe Call</h3><p>Safe Call(?)은 null 아니면 실행하고, null이면 실행하지 않고 null값을 반환 </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> str: String? = <span class="string">"ABC"</span></span><br><span class="line">str.length <span class="comment">// 불가능</span></span><br><span class="line">str?.length <span class="comment">// 가능!</span></span><br></pre></td></tr></table></figure><h3 id="Elvis-연산자"><a href="#Elvis-연산자" class="headerlink" title="Elvis 연산자"></a>Elvis 연산자</h3><p>Elvis 연산자(?:)는 앞의 연산 결과가 null이면 뒤의 값을 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str2: String? = <span class="literal">null</span></span><br><span class="line">str2?.length ?: <span class="number">0</span> <span class="comment">// null 이면 무조건 0</span></span><br></pre></td></tr></table></figure><h3 id="코틀린에서-null-체크를-코틀린-스럽게-변경"><a href="#코틀린에서-null-체크를-코틀린-스럽게-변경" class="headerlink" title="코틀린에서 null 체크를 코틀린 스럽게 변경"></a>코틀린에서 null 체크를 코틀린 스럽게 변경</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA1</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>) ?: <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"null이 들어왔습니다."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA2</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA3</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>) ?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="null-아님-단언"><a href="#null-아님-단언" class="headerlink" title="null 아님 단언"></a>null 아님 단언</h2><p>nullable type이지만, 아무리 생각해도 null이 될 수 없는 경우 <code>!!</code>를 사용<br>만약 null 값이 들어왔을 경우는 nullPointException이 발생</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWith</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str!!.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/2-null" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 null을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 1. 코틀린에서 변수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/09/kotlin/basic/chapter1/"/>
    <id>https://jaehyun8719.github.io/2022/08/09/kotlin/basic/chapter1/</id>
    <published>2022-08-08T15:00:00.000Z</published>
    <updated>2022-08-09T11:17:14.119Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 변수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="변수-선언-키워드-var과-val의-차이점"><a href="#변수-선언-키워드-var과-val의-차이점" class="headerlink" title="변수 선언 키워드 - var과 val의 차이점"></a>변수 선언 키워드 - var과 val의 차이점</h2><p>코틀린에서 가변은 <code>var</code> 불변은 <code>val</code>을 사용 하면된다.</p><ul><li>var(발)는 Variable의 약자</li><li>val(밸)은 Value의 약자</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number1 = <span class="number">10L</span></span><br><span class="line"><span class="keyword">val</span> number2 = <span class="number">10L</span></span><br></pre></td></tr></table></figure><p>코틀린은 Type추론이 가능하기 때문에 원한다면 :Type을 작성해서 사용 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number1: <span class="built_in">Long</span> = <span class="number">10L</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = <span class="number">10L</span></span><br></pre></td></tr></table></figure><h2 id="초기값을-지정해주지-않는-경우"><a href="#초기값을-지정해주지-않는-경우" class="headerlink" title="초기값을 지정해주지 않는 경우"></a>초기값을 지정해주지 않는 경우</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number: <span class="built_in">Int</span></span><br><span class="line">println(a) <span class="comment">// 컴파일 에러 발생, Variable 'a' must be initialize</span></span><br></pre></td></tr></table></figure><h2 id="Primitive-Type"><a href="#Primitive-Type" class="headerlink" title="Primitive Type"></a>Primitive Type</h2><p>코틀린에서는 boxing/unboxing을 고려하지 않아도 되도록 처리</p><h2 id="nullable"><a href="#nullable" class="headerlink" title="nullable"></a>nullable</h2><p>코틀린에서 null이 변수에 들어갈 수 있다면 <code>?</code>를 사용해야 된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number3: <span class="built_in">Long</span>? = <span class="number">1_000L</span></span><br><span class="line">number3 = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="객체-인스턴스화"><a href="#객체-인스턴스화" class="headerlink" title="객체 인스턴스화"></a>객체 인스턴스화</h2><p>코틀린에서는 객체 인스턴스화를 할 때에는 new를 붙이지 않는다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> person = Person(<span class="string">"사람1"</span>)</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/1-variable" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 변수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 연관관계 매핑(Realation Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/05/28/jpa/relation-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/05/28/jpa/relation-mapping/</id>
    <published>2022-05-27T15:00:00.000Z</published>
    <updated>2022-05-28T09:58:56.262Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>방향(Direction): 단방향, 양방향</li><li>연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요<a id="more"></a></li></ul><h2 id="단방향-연관관계"><a href="#단방향-연관관계" class="headerlink" title="단방향 연관관계"></a>단방향 연관관계</h2><p><img src="/images/jpa/relation-mapping/relation-mapping1.png" width="50%"></p><p>DB 기준에서 <code>Member</code>와 <code>Team</code>관계는 <code>다대일(N:1)</code>이다.  </p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> userName: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findTeam = findMember.team</span><br><span class="line">        <span class="keyword">if</span> (findTeam != <span class="literal">null</span>) &#123;</span><br><span class="line">            println(<span class="string">"findTeam = "</span> + findTeam.name)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findTeam = TeamA</span><br></pre></td></tr></table></figure><ol><li><code>다대일(N:1)</code>관계 이므로 <code>@ManyToOne</code> 사용</li><li>객체관계여서 <code>Team</code>에 아이디 Join을 하기 위한 <code>@JoinColumn(name = &quot;TEAM_ID&quot;)</code> 사용</li><li>find를 이용해서 Member에 있는 Team 객체를 이용할 수 있다.</li></ol><h2 id="양방향-연관관계와-연관관계의-주인"><a href="#양방향-연관관계와-연관관계의-주인" class="headerlink" title="양방향 연관관계와 연관관계의 주인"></a>양방향 연관관계와 연관관계의 주인</h2><p><img src="/images/jpa/relation-mapping/relation-mapping2.png" width="50%"></p><figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = arrayListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단방향과 같으나 <code>members</code>객체를 추가</p><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line">        <span class="keyword">val</span> members = findMember.team?.members</span><br><span class="line"></span><br><span class="line">        members?.forEach &#123;</span><br><span class="line">            println(<span class="string">"member = "</span> + it.username)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">member = member1</span><br></pre></td></tr></table></figure><ul><li>양방향 객체 연관관계는 <code>회원 -&gt; 팀</code> 연관관계 1개(단방향), <code>팀 -&gt; 회원</code> 1개(단방향)서로 다른 방향으로 각각 1개씩 해서 2개(양방향)이라고 생각해야된다.</li><li>테이블 연관관계는 PK, FK로 JOIN 을 해서 <code>회원, 팀</code>을 서로 알 수 있다.</li></ul><h3 id="연관관계의-주인-Owner"><a href="#연관관계의-주인-Owner" class="headerlink" title="연관관계의 주인(Owner)"></a>연관관계의 주인(Owner)</h3><ul><li>객체의 두 관계중 하나를 연관관계의 주인으로 지정(외래 키가 있는 곳을 주인으로 지정)</li><li>연관관계의 주인만이 외래 키를 관리(등록, 수정)</li><li>주인이 아닌 쪽은 읽기만 가능</li><li>주인은 <code>mappedBy</code> 속성 사용 안함</li><li>주인이 아니면 <code>mappedBy</code> 속성으로 주인 지정</li></ul><h2 id="양방향-매핑시-주의점"><a href="#양방향-매핑시-주의점" class="headerlink" title="양방향 매핑시 주의점"></a>양방향 매핑시 주의점</h2><h3 id="연관관계-주인에-값을-입력-하지-않음"><a href="#연관관계-주인에-값을-입력-하지-않음" class="headerlink" title="연관관계 주인에 값을 입력 하지 않음"></a>연관관계 주인에 값을 입력 하지 않음</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">team.members.add(member)</span><br><span class="line">em.persist(team)</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/relation-mapping/relation-mapping3.png" width="30%"></p><ul><li><code>Member</code>테이블을 보면 <code>TEAM_ID</code>컬럼 값이 null 값인걸 확인 할 수 있다. 그 이유는 위에서 설정한<code>(@OneToMany(mappedBy = &quot;team&quot;))</code> 연관관계의 주인이 <code>team</code> 이므로 아래의 코드와 같이 주인을 먼저 insert 쿼리를 실행 해야된다. (mappedBy 설정한 부분은 읽기 전용) </li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/relation-mapping/relation-mapping4.png" width="30%"></p><h3 id="순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음"><a href="#순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음" class="headerlink" title="순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음"></a>순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음</h3><p>team.members 입력하면 영속상태(1차캐시)이므로 바로 조회해서 사용 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line">team.members.add(member)</span><br></pre></td></tr></table></figure><h3 id="연관관계-편의-메소드를-생성"><a href="#연관관계-편의-메소드를-생성" class="headerlink" title="연관관계 편의 메소드를 생성"></a>연관관계 편의 메소드를 생성</h3><p>양쪽에 값을 입력 하다보면 실수를 할 수 있으니, 주인에 값을 입력할때 같이 입력 할 수 있는 함수(편의 메소드)를 생성</p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 편의 메소드 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.changeTeam(team) <span class="comment">// 편의 메소드 추가</span></span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><h3 id="양방향-매핑시에-무한-루프-조심"><a href="#양방향-매핑시에-무한-루프-조심" class="headerlink" title="양방향 매핑시에 무한 루프 조심"></a>양방향 매핑시에 무한 루프 조심</h3><ul><li>toString, JSON 생성 라이브러리 사용시 반복적으로 객체 를 호출 하면서 무한 루프에 빠지게 된다.</li><li>JSON 생성 라이브러리 사용시 Entity 를 반환하지 말고 DTO로 변환해서 반환을 해야 된다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;방향(Direction): 단방향, 양방향&lt;/li&gt;
&lt;li&gt;연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Realation" scheme="https://jaehyun8719.github.io/tags/Realation/"/>
    
      <category term="Realation Mapping" scheme="https://jaehyun8719.github.io/tags/Realation-Mapping/"/>
    
      <category term="연관관계 맵핑" scheme="https://jaehyun8719.github.io/tags/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 엔티티 매핑(Entity Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/05/23/jpa/entity-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/05/23/jpa/entity-mapping/</id>
    <published>2022-05-22T15:00:00.000Z</published>
    <updated>2022-05-23T13:28:27.216Z</updated>
    
    <content type="html"><![CDATA[<hr><p>JPA 엔티티 맵핑(Entity Mapping) 란?</p><ul><li>객체와 테이블 매핑: @Entity, @Table</li><li>필드와 컬럼 매핑: @Column</li><li>기본 키 매핑: @Id</li><li>연관관계 매핑: @ManyToOne, @JoinColumn<a id="more"></a></li></ul><h2 id="객체와-테이블-매핑"><a href="#객체와-테이블-매핑" class="headerlink" title="객체와 테이블 매핑"></a>객체와 테이블 매핑</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><ul><li><code>@Entity</code>가 붙은 클래스는 JPA가 관리</li><li>JPA를 사용해서 테이블과 매핑할 클래스는 `@Entity 필수</li><li>주의<ul><li>기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)</li><li>final 클래스, enum, interface, inner 클래스 사용할 수 없음</li><li>저장할 필드에 fianl 사용할 수 없음</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p><code>@Table</code>은 엔티티와 맵핑할 테이블 지정</p><table><thead><tr><th>속성</th><th>가능</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>매핑할 테이블 이름</td><td>엔티티 이름을 사용</td></tr><tr><td>catalog</td><td>데이터베이스 catalog 매핑</td><td></td></tr><tr><td>schema</td><td>데이터베이스 schema 매핑</td><td></td></tr><tr><td>uniqueConstraints(DDL)</td><td>DDL 생성 시에 유티크 제약 조건 생성</td><td><br></td></tr></tbody></table><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=<span class="meta-string">"MemeberName"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="데이터베이스-스키마-자동-생성"><a href="#데이터베이스-스키마-자동-생성" class="headerlink" title="데이터베이스 스키마 자동 생성"></a>데이터베이스 스키마 자동 생성</h2><p>DDL을 애플리케이션 실행 시점에 자동 생성(DDL 관련은 개발서버에서만 사용)</p><p><code>hibernate.hbm2ddl.auto</code> 옵션 속성 값</p><table><thead><tr><th>속성</th><th>설명</th></tr></thead><tbody><tr><td>create</td><td>기존테이블 삭제 후 다시 생성(DROP + CREATE)</td></tr><tr><td>create-drop</td><td>create와 같으나 종료시점에 테이블 DROP</td></tr><tr><td>update</td><td>변경분만 반영(운영DB에는 사용하면 안됨)</td></tr><tr><td>validate</td><td>엔티티와 테이블이 정상 매핑되었는지만 확인</td></tr><tr><td>none</td><td>사용하지 않음</td></tr></tbody></table><p>ex) create 속성<br><figure class="highlight kotlin"><figcaption><span>createOptionResult</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    drop table Member <span class="keyword">if</span> exists</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table Member (</span><br><span class="line">       id bigint not <span class="literal">null</span>,</span><br><span class="line">        name varchar(<span class="number">255</span>),</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h2 id="필드와-컬럼매핑"><a href="#필드와-컬럼매핑" class="headerlink" title="필드와 컬럼매핑"></a>필드와 컬럼매핑</h2><table><thead><tr><th>어노테이션</th><th>설명</th></tr></thead><tbody><tr><td>@Column</td><td>컬럼 매핑</td></tr><tr><td>@Temporal</td><td>날짜 타입 매핑</td></tr><tr><td>@Enumerated</td><td>enum 타입 매핑</td></tr><tr><td>@Lob</td><td>BLOB, CLOB 매핑</td></tr><tr><td>@Transient</td><td>특정 필드를 컬럼에서 제외</td></tr></tbody></table><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"name"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">var</span> roleType: RoleType? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createDate: LocalDate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lastModifiedDate: LocalDate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lob</span></span><br><span class="line">    <span class="keyword">var</span> description: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">var</span> temp: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table Member (</span><br><span class="line">    id bigint not <span class="literal">null</span>,</span><br><span class="line">    age integer not <span class="literal">null</span>,</span><br><span class="line">    createDate timestamp,</span><br><span class="line">    description clob,</span><br><span class="line">    lastModifiedDate timestamp,</span><br><span class="line">    roleType varchar(<span class="number">255</span>),</span><br><span class="line">    name varchar(<span class="number">255</span>),</span><br><span class="line">    primary key (id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>필드와 매핑할 테이블의 컬럼 이름</td><td>객체의 필드 이름</td></tr><tr><td>insert<br>update</td><td>등록, 변경 가능 여부</td><td>true</td></tr><tr><td>nullable(DDL)</td><td>null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약조건을 걸떄 사용한다</td><td></td></tr><tr><td>unique(DDL)</td><td>@Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸 떄 사용한다</td><td></td></tr><tr><td>columnDefinition(DDL)</td><td>데이터베이스 컬럼 정보를 직접 줄 수 있다. ex)varchar(100) default ‘EMPTY’</td><td>필드의 자바 타입과 방언 정보를 사용</td></tr><tr><td>length(DDL)</td><td>문자 길이 제약조건, String 타입에만 사용한다.</td><td>255</td></tr><tr><td>precision<br>scale(DDL)</td><td>BigDecimal 타입에서 사용한다(BigInteger도 사용할 수 있다).<br>precision은 소수점을 포함한 전체 자릿수, scale은 소수의 자릿수다. 참고로 double, float 타입에는 적용되지 않는다. 아주 큰 숫자나 정 밀한 소수를 다루어야 할 때만 사용한다.</td><td>precision=19<br>scale=2</td></tr></tbody></table><h3 id="Enumerated"><a href="#Enumerated" class="headerlink" title="@Enumerated"></a>@Enumerated</h3><p>enum Type을 매핑 할때 사용</p><div class="note danger no-icon">            <p>ORINAL은 사용하지 말것</p>          </div><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>value</td><td>EnumType.ORDINAL은 enum 순서를 데이터베이스에 저장<br>EnumType.STRING은 enum 이름을 데이터 베이스에 저장</td><td>EnumType.ORDINAL</td></tr></tbody></table><h2 id="기본-키-매핑"><a href="#기본-키-매핑" class="headerlink" title="기본 키 매핑"></a>기본 키 매핑</h2><ul><li>직접 할당: <code>@id</code> 만 사용</li><li>자동 생성: <code>@GeneratedValue</code><ul><li>IDENTITY, SEQUENCE, TABLE, AUTO</li></ul></li></ul><h3 id="IDENTITY-전략"><a href="#IDENTITY-전략" class="headerlink" title="IDENTITY 전략"></a>IDENTITY 전략</h3><p>기본 키 생성을 DB에 위임<br>IDENTITY 전략은 <code>em.persist()</code> 시점에 즉시 INSERT SQL 실행 하고 DB에서 식별자를 조회</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="SEQUENCE-전략"><a href="#SEQUENCE-전략" class="headerlink" title="SEQUENCE 전략"></a>SEQUENCE 전략</h3><p>DB 시퀀스는 유일한 값을 순서대로 생성하는 특별한 DB 오브젝트</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@SequenceGenerator(</span></span><br><span class="line"><span class="meta">        name = “MEMBER_SEQ_GENERATOR<span class="meta-string">",</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        sequenceName = “MEMBER_SEQ"</span>, //매핑할 데이터베이스 시퀀스 이름</span></span><br><span class="line"><span class="meta">        initialValue = 1, allocationSize = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>)</span></span><br><span class="line">  <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>식별자 생성기 이름</td><td>필수</td></tr><tr><td>sequenceName</td><td>데이터베이스에 등록되어 있는 시퀀스 이름</td><td>hibernate_sequence</td></tr><tr><td>initialValue</td><td>DDL 생성 시에만 사용됨, 시퀀스 DDL을 생성할 때 처음 1 시작하는 수를 지정한다.</td><td>1</td></tr><tr><td>allocationSize</td><td>시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨 데이터베이스 시퀀스 값이 하나씩 증가하도록 설정되어 있으면 이 값 을 반드시 1로 설정해야 한다</td><td>50</td></tr><tr><td>catalog, schema</td><td>데이터베이스 catalog, schema 이름</td><td>50</td></tr></tbody></table><h3 id="TABLE-전략"><a href="#TABLE-전략" class="headerlink" title="TABLE 전략"></a>TABLE 전략</h3><p>키 생성 전용 테이블을 하나 만들어서 DB 시퀀스를 흉내내는 전략</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> MY_SEQUENCES (</span><br><span class="line">    sequence_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    next_val <span class="built_in">bigint</span>,</span><br><span class="line">    primary <span class="keyword">key</span> ( sequence_name )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@TableGenerator(</span></span><br><span class="line"><span class="meta">        name = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>,</span></span><br><span class="line"><span class="meta">        table = <span class="meta-string">"MY_SEQUENCES"</span>,</span></span><br><span class="line"><span class="meta">        pkColumnValue = <span class="meta-string">"MEMBER_SEQ"</span>, allocationSize = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.TABLE, generator = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>)</span></span><br><span class="line">  <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>식별자 생성기 이름</td><td>필수</td></tr><tr><td>table</td><td>키생성 테이블명</td><td>hibernate_sequence</td></tr><tr><td>pkColumnName</td><td>시퀀스 컬럼명</td><td>sequence_name</td></tr><tr><td>valueColumnNa</td><td>시퀀스 값 컬럼명</td><td>next_val</td></tr><tr><td>pkColumnValue</td><td>키로 사용할 값 이름</td><td>엔티티 이름</td></tr><tr><td>initialValue</td><td>초기 값, 마지막으로 생성된 값이 기준이다.</td><td>0</td></tr><tr><td>allocationSize</td><td>시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨)</td><td>50</td></tr><tr><td>catalog, schema</td><td>데이터베이스 catalog, schema 이름</td><td></td></tr><tr><td>uniqueConstraint s(DDL)</td><td>유니크 제약 조건을 지정할 수 있다.</td><td><br></td></tr></tbody></table><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;JPA 엔티티 맵핑(Entity Mapping) 란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체와 테이블 매핑: @Entity, @Table&lt;/li&gt;
&lt;li&gt;필드와 컬럼 매핑: @Column&lt;/li&gt;
&lt;li&gt;기본 키 매핑: @Id&lt;/li&gt;
&lt;li&gt;연관관계 매핑: @ManyToOne, @JoinColumn
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Entity" scheme="https://jaehyun8719.github.io/tags/Entity/"/>
    
      <category term="Entity Mapping" scheme="https://jaehyun8719.github.io/tags/Entity-Mapping/"/>
    
      <category term="엔티티 맵핑" scheme="https://jaehyun8719.github.io/tags/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 영속성 컨텍스트(Persistence Context)</title>
    <link href="https://jaehyun8719.github.io/2022/05/14/jpa/persistence-context/"/>
    <id>https://jaehyun8719.github.io/2022/05/14/jpa/persistence-context/</id>
    <published>2022-05-13T15:00:00.000Z</published>
    <updated>2022-05-14T18:41:52.766Z</updated>
    
    <content type="html"><![CDATA[<hr><p>JPA 영속성 컨텍스트(Persistence Context) 란?</p><ul><li>엔티티를 영구 저장하는 환경</li><li>영속성 컨텍스트는 논리적인 개념으로 눈에 보이지 않고, 엔티티 매니저를 통해서 영속성 컨텍스트에 접근함<a id="more"></a></li></ul><h2 id="엔티티의-생명주기"><a href="#엔티티의-생명주기" class="headerlink" title="엔티티의 생명주기"></a>엔티티의 생명주기</h2><p><img src="/images/jpa/persistence-context/persistence-context1.png" width="50%"></p><h3 id="비영속-new-transient"><a href="#비영속-new-transient" class="headerlink" title="비영속(new/transient)"></a>비영속(new/transient)</h3><p>JPA 와 전혀 관련 없이 객체만 생성된 상태가 비영속 상태</p><p><img src="/images/jpa/persistence-context/persistence-context2.png" width="50%"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="number">1L</span></span><br><span class="line">member.name = <span class="string">"helloA"</span></span><br></pre></td></tr></table></figure><h3 id="영속-managed"><a href="#영속-managed" class="headerlink" title="영속(managed)"></a>영속(managed)</h3><p>영속성 컨텍스트에 관리되는 상태<br>영속성 상태라고 DB에 저장 되는 것이 아니고, commit 이후에 DB에 저장 된다.</p><p><img src="/images/jpa/persistence-context/persistence-context3.png" width="50%"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 생성한 상태(비영속)</span></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="number">1L</span></span><br><span class="line">member.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 저장한 상태(영속)</span></span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><h3 id="준영속-detached"><a href="#준영속-detached" class="headerlink" title="준영속(detached)"></a>준영속(detached)</h3><p>영속성 컨텍스트에 저장되었다가 분리된 상태</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태</span></span><br><span class="line">em.detach(member)</span><br></pre></td></tr></table></figure><h3 id="삭제-removed"><a href="#삭제-removed" class="headerlink" title="삭제(removed)"></a>삭제(removed)</h3><p>상제된 상태</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//객체를 삭제한 상태(삭제)</span></span><br><span class="line">em.remove(member)</span><br></pre></td></tr></table></figure><h2 id="엔티티-조회"><a href="#엔티티-조회" class="headerlink" title="엔티티 조회"></a>엔티티 조회</h2><p><img src="/images/jpa/persistence-context/persistence-context4.png" alt></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="string">"memeber1"</span><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    <span class="comment">// 강제 DB Insert</span></span><br><span class="line">    em.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">    member.name = <span class="string">"helloUpdate"</span></span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br><span class="line">member.name = <span class="string">"회원1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에 저장됨</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에서 조회</span></span><br><span class="line"><span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br></pre></td></tr></table></figure><p><code>em.persist(member)</code>1차 캐시에 저장 후 <code>find(&quot;memeber1&quot;)</code> 하게되면 DB를 조회하는게 아니고 1차 캐시를 조회함</p><p><img src="/images/jpa/persistence-context/persistence-context5.png" alt></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DB에 member1 값이 있다고 가정</span></span><br><span class="line"><span class="keyword">val</span> findMember1 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"><span class="keyword">val</span> findMember2 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br></pre></td></tr></table></figure><ol><li><code>find(&quot;memeber2&quot;)</code>를 하면 영속성 컨텍스트 안 1차 캐시를 조회</li><li>1차 캐시에 값이 없으면 DB를 조회</li><li>1차 캐시에 <code>member2</code> 저장</li><li><code>member2</code>를 반환</li><li>한번 1차 캐시에 저장되면 <code>member2</code> 조회시 1차 캐시에서 조회</li><li><code>find</code>로 2번 호출하는데 실제로 <code>select</code>쿼리는 한번 발생, 이유는 <code>findMember2</code>는 1차 캐쉬에서 조회<br>주의점) 트랙잰션 단위로 움직임</li></ol><h2 id="영속-엔티티의-동일설-보장"><a href="#영속-엔티티의-동일설-보장" class="headerlink" title="영속 엔티티의 동일설 보장"></a>영속 엔티티의 동일설 보장</h2><p>동일한 트랜잭션 안에서는 1차캐시에 저장되어있기 때문에 동일한 주소값을 참조(Collection에 똑같은 객체를 사용하는것과 같음)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DB에 member1 값이 있다고 가정</span></span><br><span class="line"><span class="keyword">val</span> findMember1 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"><span class="keyword">val</span> findMember2 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"></span><br><span class="line">println(findMember1 == findMember2) <span class="comment">// 결과값: true</span></span><br></pre></td></tr></table></figure><h2 id="트랙잭션을-지원하는-쓰기-지연"><a href="#트랙잭션을-지원하는-쓰기-지연" class="headerlink" title="트랙잭션을 지원하는 쓰기 지연"></a>트랙잭션을 지원하는 쓰기 지연</h2><p>JPA는 트랜잭션을 하기전까지 영속성 컨텍스트 안에 데이터를 쌓고 있다.<br>트랙잭션 <code>commit</code>을 해야 SQL을 데이터베이스로 보낸다.</p><p><img src="/images/jpa/persistence-context/persistence-context6.png" alt></p><ol><li><code>persist</code>에 <code>memberA</code>를 넣으면 1차 캐시에 저장과 동시에 <code>memberA</code>에 Entity를 분석하여 SQL 문을 생성하여 <code>쓰기 지연 SQL 저장소</code>에 저장</li><li><code>memberB</code>도 동일하게 SQL문을 생성하여 <code>쓰기 지연 SQL 저장소</code> 저장</li><li><code>memberA</code>와 <code>memberB</code>가 <code>쓰기 지연 SQL 저장소</code>에 쌓인다</li></ol><p><img src="/images/jpa/persistence-context/persistence-context7.png" alt></p><ol start="4"><li><code>commit()</code>을 실행하면 <code>쓰기 지연 SQL 저장소</code>에 있던 SQL문이 <code>flush</code>로 데이터 베이스에 전달</li></ol><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><figure class="highlight kotlin"><figcaption><span>wrtieBehind.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> memberB = Member()</span><br><span class="line">    memberB.id = <span class="number">2L</span></span><br><span class="line">    memberB.name = <span class="string">"helloB"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    em.persist(memberB)</span><br><span class="line">    println(<span class="string">"=============== persist"</span>)</span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">=============== persist</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br></pre></td></tr></table></figure><ul><li>주석처리 한 부분에서 insert 쿼리문이 실행 되지 않고 commit 시점에 sql문 실행</li><li><code>hibernate.jdbc.batch_size</code> 옵션으로 <code>쓰기지연 SQL 저장소</code>에 쌓이면 처리 갯수 설정 가능(버퍼링 기능이나 실전에서 잘 사용하지 않음)</li></ul><h2 id="Entity-수정-변경-감지"><a href="#Entity-수정-변경-감지" class="headerlink" title="Entity 수정(변경 감지)"></a>Entity 수정(변경 감지)</h2><p><img src="/images/jpa/persistence-context/persistence-context8.png" alt></p><ol><li>데이터가 처음 읽어온 상태를 스냅샷으로 저장</li><li>commit 시점에서 <code>Entity</code>와 <code>스냅샷</code>을 비교 하여 변경 된 부분의 update 문을 DB에 전달</li></ol><figure class="highlight kotlin"><figcaption><span>dirtyChecking.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    <span class="comment">// 강제 DB Insert</span></span><br><span class="line">    em.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">    member.name = <span class="string">"helloUpdate"</span></span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* update</span></span><br><span class="line"><span class="comment">        entity.Member */</span> update</span><br><span class="line">            Member </span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">            name=? </span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            id=?</span><br></pre></td></tr></table></figure><ul><li>JPA는 update 코드가 있는게 아니라 Collection 처럼 변경되는 시점을 자동으로 감지해서 수정</li></ul><h2 id="Entity-삭제"><a href="#Entity-삭제" class="headerlink" title="Entity 삭제"></a>Entity 삭제</h2><p>변경 감지와 동일하게 작동</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">em.remove(member)</span><br></pre></td></tr></table></figure><h2 id="플러시-Flush"><a href="#플러시-Flush" class="headerlink" title="플러시(Flush)"></a>플러시(Flush)</h2><ul><li>영속성 컨텍스트를 비우지 않음</li><li>영속성 컨텍스트의 변경내용을 DB에 동기화</li><li>commit 직전에만 동기화</li></ul><h2 id="준영속-상태"><a href="#준영속-상태" class="headerlink" title="준영속 상태"></a>준영속 상태</h2><p>JPA가 영속성 컨텍스트에서 분리</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">em.detach(member)</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;JPA 영속성 컨텍스트(Persistence Context) 란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엔티티를 영구 저장하는 환경&lt;/li&gt;
&lt;li&gt;영속성 컨텍스트는 논리적인 개념으로 눈에 보이지 않고, 엔티티 매니저를 통해서 영속성 컨텍스트에 접근함
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="영속성 컨텍스트" scheme="https://jaehyun8719.github.io/tags/%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="Persistence Context" scheme="https://jaehyun8719.github.io/tags/Persistence-Context/"/>
    
      <category term="flush" scheme="https://jaehyun8719.github.io/tags/flush/"/>
    
  </entry>
  
  <entry>
    <title>6. webpack-dev-server</title>
    <link href="https://jaehyun8719.github.io/2020/06/24/webpack/dev-server/"/>
    <id>https://jaehyun8719.github.io/2020/06/24/webpack/dev-server/</id>
    <published>2020-06-23T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br><a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">webpack-dev-server</a>는 운영환경과 동일하게 배포전에 서버 구동을 하여 테스트할 수 있는 환경을 제공해 준다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/dev-server/dev-server_1.png" alt></p><h2 id="설치-amp-사용법"><a href="#설치-amp-사용법" class="headerlink" title="설치 &amp; 사용법"></a>설치 &amp; 사용법</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="app-js-수정"><a href="#app-js-수정" class="headerlink" title="app.js 수정"></a>app.js 수정</h3><figure class="highlight js"><figcaption><span>app.js </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><h3 id="style-scss-수정"><a href="#style-scss-수정" class="headerlink" title="style.scss 수정"></a>style.scss 수정</h3><figure class="highlight scss"><figcaption><span>style.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"./src/variables.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$brand-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>variables.scss</code>에 <code>$brand-color: #2ac1bc;</code>변수값을 설정 했다.</p>          </div><h3 id="package-json에-추가"><a href="#package-json에-추가" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="서버-구동"><a href="#서버-구동" class="headerlink" title="서버 구동"></a>서버 구동</h3><p>package.json에 등록한 명령어로 실행을 하여 서버를 구동한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_2.png" alt></p><ul><li>localhost:8080 으로 접속해 보면 결과물을 확인할 수 있고, webpack 서버는 파일 변화를 감지하면 webpack 을 재빌드 하여 브라우져를 갱신하여 변화된 코드로 화면을 보여준다.</li></ul><p><img src="/images/webpack/dev-server/dev-server_3.gif" alt></p><h2 id="기본-옵션-설정"><a href="#기본-옵션-설정" class="headerlink" title="기본 옵션 설정"></a>기본 옵션 설정</h2><p>webpack 설정 파일의 devServer 객체에 <a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">서버 옵션</a>을 설정할 수 있다.</p><h3 id="기본-옵셜-설명"><a href="#기본-옵셜-설명" class="headerlink" title="기본 옵셜 설명"></a>기본 옵셜 설명</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">"dist"</span>), </span><br><span class="line">        publicPath: <span class="string">"/"</span>, </span><br><span class="line">        host: <span class="string">"dev.domain.com"</span>,</span><br><span class="line">        overlay: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">8081</span>,</span><br><span class="line">        stats: <span class="string">"errors-only"</span>,</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>contentBase</td><td>정적파일 제공 경로(기본값: webpack의 output)</td></tr><tr><td>publicPath</td><td>브라우저 접근 경로(기본값: / )</td></tr><tr><td>host</td><td>Domain 환경을 맞춤</td></tr><tr><td>overlay</td><td>빌드시 에러나 경고를 브라우저에 출력</td></tr><tr><td>port</td><td>개발 서버 포트 번호를 설정</td></tr><tr><td>stats</td><td>상태 메시지 수준 설정(‘none’, ‘errors-only’, ‘minimal’, ‘normal’, ‘verbose’)</td></tr><tr><td>historyApiFallBack</td><td>history api를 사용하여 SPA 개발시 404가 발생하면 index.html으로 리다이렉트</td></tr></tbody></table><h3 id="webpack-config-js-수정"><a href="#webpack-config-js-수정" class="headerlink" title="webpack.config.js 수정"></a>webpack.config.js 수정</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    overlay: <span class="literal">true</span>,</span><br><span class="line">    stats: <span class="string">"errors-only"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="서버-구동-1"><a href="#서버-구동-1" class="headerlink" title="서버 구동"></a>서버 구동</h3><p>서버 구동후 에러를 발생시켜 브라우저 화면에 에러가 출력을 확인한다.</p><p><img src="/images/webpack/dev-server/dev-server_4.gif" alt></p><h2 id="Hot-Module-Replacement-HMR"><a href="#Hot-Module-Replacement-HMR" class="headerlink" title="Hot Module Replacement(HMR)"></a>Hot Module Replacement(HMR)</h2><p><a href="https://webpack.js.org/concepts/hot-module-replacement/" rel="external nofollow noopener noreferrer" target="_blank">Hot Module Replacement</a>는 브라우저 전체 화면을 갱신하지 않고, 변경된 모듈만 갱신한다. </p><h3 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h3><p><a href="https://webpack.js.org/configuration/dev-server/#devserverhot" rel="external nofollow noopener noreferrer" target="_blank">devServer.hot</a> 속성을 설정</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    hot:<span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="서버-구동-2"><a href="#서버-구동-2" class="headerlink" title="서버 구동"></a>서버 구동</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>서버 구동을 완료하고, <code>src/style.scss</code> 파일에 배경화면을 값을 변경하여 브라우저가 갱신을 하지 않고 배경색깔이 변경되는 것을 확인</p><p><img src="/images/webpack/dev-server/dev-server_5.gif" alt></p><h3 id="핫로딩-지원하는-로더"><a href="#핫로딩-지원하는-로더" class="headerlink" title="핫로딩 지원하는 로더"></a>핫로딩 지원하는 로더</h3><p><a href="https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks" rel="external nofollow noopener noreferrer" target="_blank">Hot Module Replacemnt 지원하는 로더</a>는 참고</p><figure class="highlight js"><figcaption><span>style-loader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(</span><br><span class="line">        $&#123;loaderUtils.stringifyRequest(<span class="keyword">this</span>, <span class="string">`!!<span class="subst">$&#123;request&#125;</span>`</span>)&#125;,</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>style-loader코드에서 보면 <code>if (module.hot)</code> 값이 <code>true</code>일 경우 <code>module.hot.accept</code>함수를 사용한다.</p>          </div><h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><p>웹팩을 최적화 하는 방법중에 <a href="https://webpack.js.org/configuration/mode/" rel="external nofollow noopener noreferrer" target="_blank">mode</a> 값을 설정하는 방식</p><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>development</td><td>NamedChunksPlugin, NamedModulesPlugin</td></tr><tr><td>production</td><td>FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin, TerserPlugin</td></tr></tbody></table><ul><li>설정한 <code>mode</code> 옵션 값에 따라 사용하는 플러그인이 다르게 사용된다.</li></ul><h3 id="webpack-config-js-mode-값-추가"><a href="#webpack-config-js-mode-값-추가" class="headerlink" title="webpack.config.js mode 값 추가"></a>webpack.config.js mode 값 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mode = process.env.NODE_ENV || <span class="string">"development"</span>; <span class="comment">// 기본값을 `development` 설정</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="package-json-수정"><a href="#package-json-수정" class="headerlink" title="package.json 수정"></a>package.json 수정</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --progress"</span> <span class="comment">// 개발시 NODE_ENV=development로 변경</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="빌드"><a href="#빌드" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><div class="note warning no-icon">            <p>운영체제가 window일 경우 <strong>‘NODE_ENV’은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는<br>배치 파일이 아닙니다.</strong> 메세지 발생시 <code>$ npm install -g win-node-env</code> 설치</p>          </div><h4 id="NODE-ENV-production-빌드-결과"><a href="#NODE-ENV-production-빌드-결과" class="headerlink" title="NODE_ENV=production 빌드 결과"></a>NODE_ENV=production 빌드 결과</h4><p><img src="/images/webpack/dev-server/dev-server_6.png" alt></p><h4 id="NODE-ENV-development-빌드-결과"><a href="#NODE-ENV-development-빌드-결과" class="headerlink" title="NODE_ENV=development 빌드 결과"></a>NODE_ENV=development 빌드 결과</h4><p><img src="/images/webpack/dev-server/dev-server_7.png" alt></p><ul><li>두 결과물을 보면 <code>NODE_ENV=production</code>과 <code>NODE_ENV=development</code>로 빌드 시 사용되는 플러그인이 다른 것을 확인할 수 있다.</li></ul><h2 id="optimazation-속성으로-최적화"><a href="#optimazation-속성으로-최적화" class="headerlink" title="optimazation 속성으로 최적화"></a>optimazation 속성으로 최적화</h2><p>빌드 과정에서 커스터마이징할 수 있는 <a href="https://webpack.js.org/configuration/optimization/" rel="external nofollow noopener noreferrer" target="_blank">optimazation</a>속성을 사용.</p><h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><p><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production" rel="external nofollow noopener noreferrer" target="_blank">optimize-css-assets-webpack-plugin</a>은 css 파일을 압축하는 최적화 플러그인</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h4><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: mode === <span class="string">'production'</span> ? [ <span class="comment">// mode가 production일 경우만 실행</span></span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(),</span><br><span class="line">        ] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>optimization.minimizer</code>는 <code>OptimizeCSSAssetsPlugin</code>을 전달해서 css파일을 압축하도록 하는 플러그인</li></ul><h4 id="NODE-ENV-production-빌드"><a href="#NODE-ENV-production-빌드" class="headerlink" title="NODE_ENV=production 빌드"></a>NODE_ENV=production 빌드</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_8.png" alt></p><ul><li>빌드 후 css 코드가 압축된 것을 확인할 수 있다.</li></ul><h3 id="terser-webpack-plugin"><a href="#terser-webpack-plugin" class="headerlink" title="terser-webpack-plugin"></a>terser-webpack-plugin</h3><p><a href="https://webpack.js.org/plugins/terser-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">TerserWebpackPlugin</a>는 debugger 구문을 제거하거나, 옵션 값으로 <code>console.log</code>도 배포전에 삭제하는 플러그인이다.</p><h4 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D terser-webpack-plugin</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h4><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     optimization: &#123;</span><br><span class="line">        minimizer: mode === <span class="string">'production'</span> ? [ <span class="comment">// mode가 production일 경우만 실행</span></span><br><span class="line">            <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">                terserOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        drop_console: <span class="literal">true</span>, <span class="comment">// console.log를 제거</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">        ] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NODE-ENV-production-빌드-1"><a href="#NODE-ENV-production-빌드-1" class="headerlink" title="NODE_ENV=production 빌드"></a>NODE_ENV=production 빌드</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_9.png" alt></p><ul><li>빌드 후 <code>consol.log</code>를 검색해보면 삭제 된 것을 확인할 수 있다. </li></ul><h2 id="코드-스플리팅"><a href="#코드-스플리팅" class="headerlink" title="코드 스플리팅"></a>코드 스플리팅</h2><p>코드를 하나로 압축 하는 것 외에 코드 결과물을 여러개로 쪼개서 다운로드 속도를 빠르게 할 수 있다</p><div class="note warning no-icon">            <p>초기 프로젝트에는 크게 사용할 일이 없지만, 프로젝트 파일이 커지면 적용하면 좋은 거지 꼭 해야 되는 것은 아니다.<br>코드 스플리팅에대해서 간단하게만 설명하고, 다이나익 임포트에 대해서는 설명을 안한다.</p>          </div><h3 id="result-js-파일-생성"><a href="#result-js-파일-생성" class="headerlink" title="result.js 파일 생성"></a>result.js 파일 생성</h3><figure class="highlight js"><figcaption><span>result.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    hide() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hide"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"show"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="app-js-수정-1"><a href="#app-js-수정-1" class="headerlink" title="app.js 수정"></a>app.js 수정</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</span><br><span class="line"><span class="keyword">import</span> result <span class="keyword">from</span> <span class="string">"./result"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line">result.hide();</span><br><span class="line">result.show();</span><br></pre></td></tr></table></figure><h3 id="중복-코드-제거"><a href="#중복-코드-제거" class="headerlink" title="중복 코드 제거"></a>중복 코드 제거</h3><p><a href="https://webpack.js.org/guides/code-splitting/#prevent-duplication" rel="external nofollow noopener noreferrer" target="_blank">SplitChunksPlugin</a>는 코드를 분리할때 중복을 예방하는 플러그인이다.</p><h3 id="webpack-config-js에-추가-2"><a href="#webpack-config-js에-추가-2" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span>,</span><br><span class="line">        result: <span class="string">"./src/result.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">"all"</span>, <span class="comment">// 중복 제거 플로그인 옵션</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="빌드-1"><a href="#빌드-1" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_10.png" alt></p><p>index.html 에 result.js 추가 확인</p><p><img src="/images/webpack/dev-server/dev-server_11.png" alt></p><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><p><a href="https://webpack.js.org/configuration/externals/" rel="external nofollow noopener noreferrer" target="_blank">externals</a>은 패키지로 제공될때 이미 빌드 과정을 한것을 제외시켜 최적화 시키는 방법이다.<br>axios같은 써드파티 라이브러리로 예를 들어보자.</p><h3 id="CopyWebpackPlugin-amp-axios설치"><a href="#CopyWebpackPlugin-amp-axios설치" class="headerlink" title="CopyWebpackPlugin &amp; axios설치"></a>CopyWebpackPlugin &amp; axios설치</h3><p>(CopyWebpackPlugin)[<a href="https://webpack.js.org/plugins/copy-webpack-plugin/]은" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/plugins/copy-webpack-plugin/]은</a> 파일을 복사하는 플러그인이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D copy-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D axios</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-3"><a href="#webpack-config-js에-추가-3" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyPlugin = <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">        axios: <span class="string">'axios'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">        patterns: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">from</span>: <span class="string">"./node_modules/axios/dist/axios.min.js"</span>,</span><br><span class="line">                to: <span class="string">"./axios.min.js"</span> <span class="comment">// 목적지 파일에 들어간다</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>axois를 번들에 포함 하지 않고 빌드하며, <code>to</code>는 목적지로 파일을 복사한다.</p><h3 id="index-html에-추가"><a href="#index-html에-추가" class="headerlink" title="index.html에 추가"></a>index.html에 추가</h3><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="빌드-2"><a href="#빌드-2" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_12.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/dev-server/</a></li><li><a href="https://webpack.js.org/concepts/hot-module-replacement/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/hot-module-replacement/</a></li><li><a href="https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks</a></li><li><a href="https://webpack.js.org/configuration/mode/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/mode/</a></li><li><a href="https://webpack.js.org/configuration/optimization/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/optimization/</a></li><li><a href="https://webpack.js.org/guides/code-splitting/#prevent-duplication" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/code-splitting/#prevent-duplication</a></li><li><a href="https://webpack.js.org/plugins/copy-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/plugins/copy-webpack-plugin/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack-dev-server&lt;/a&gt;는 운영환경과 동일하게 배포전에 서버 구동을 하여 테스트할 수 있는 환경을 제공해 준다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack dev-server" scheme="https://jaehyun8719.github.io/tags/webpack-dev-server/"/>
    
  </entry>
  
  <entry>
    <title>5. ESLint &amp; prettier</title>
    <link href="https://jaehyun8719.github.io/2020/06/22/webpack/eslint-prettier/"/>
    <id>https://jaehyun8719.github.io/2020/06/22/webpack/eslint-prettier/</id>
    <published>2020-06-21T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.</p><ol><li><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a>는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구</li><li><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">Prettier</a>는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.<a id="more"></a></li></ol><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/eslint-prettier/eslint-prettier_1.png" alt></p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a>는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구</p><h3 id="ESLint-설치"><a href="#ESLint-설치" class="headerlink" title="ESLint 설치"></a>ESLint 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D eslint</span><br></pre></td></tr></table></figure><h3 id="ESLint-초기화"><a href="#ESLint-초기화" class="headerlink" title="ESLint 초기화"></a>ESLint 초기화</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx eslint --init</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_2.gif" alt></p><div class="note info no-icon">            <p>대화식 명령어로 진행하는데 현재 사용하고 있는 환경에 대해 답을 하면 된다.<br><code>.eslintrc</code> 파일이 자동 생성된다.</p>          </div><h3 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title="eslintrc.js"></a>eslintrc.js</h3><p>ESLint 가 제공하는 여러 가지 규칙을 미리 정해 놓은 eslint:recommended 설정<br><a href="https://eslint.org/docs/rules/" rel="external nofollow noopener noreferrer" target="_blank">ESLint 규칙</a> 목록에서 왼쪽에 체크 표시되어 있는 설정을 활성화</p><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: <span class="number">11</span>,</span><br><span class="line">        sourceType: <span class="string">"module"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>node: true</code>는 <code>webpack.config.js</code> 빌드시 node 환경도 적용</li><li>이 설정 외에 규칙이 필요하면 rules 속성에 추가하면 된다.</li></ul><div class="note info no-icon">            <p>외부 스타일 가이드 중에 <a href="https://github.com/airbnb/javascript" rel="external nofollow noopener noreferrer" target="_blank">Airbnb Style Guide</a>, <a href="https://github.com/google/eslint-config-google" rel="external nofollow noopener noreferrer" target="_blank">Google Style Guide</a>가 대표적인 가이드로 많이 사용된다.</p>          </div><h3 id="eslintignore-생성-선택-사항"><a href="#eslintignore-생성-선택-사항" class="headerlink" title=".eslintignore 생성(선택 사항)"></a>.eslintignore 생성(선택 사항)</h3><p>ESLint에 적용되지 않는 대상을 정하는 파일</p><figure class="highlight js"><figcaption><span>.eslintignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="package-json에-추가"><a href="#package-json에-추가" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --progress"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><code>eslint src --fix</code> 명령어로 <code>src</code> 하위 폴더에 있는 파일을 ESLint 적용, <code>--fix</code>는 ESLint에 적용된 파일을 자동으로 스타일 코드로 수정</li></ul><h3 id="app-js-코드-수정"><a href="#app-js-코드-수정" class="headerlink" title="app.js 코드 수정"></a>app.js 코드 수정</h3><figure class="highlight js"><figcaption><span>src/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);;;;;;;;;;;;;;;;;;;;;</span><br></pre></td></tr></table></figure><ul><li><code>;;;;;;;;;;;;;;;;;;;;</code>을 추가하여 ESLint 불필요한 부분 수정되는지 확인</li></ul><h3 id="ESLint-빌드"><a href="#ESLint-빌드" class="headerlink" title="ESLint 빌드"></a>ESLint 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_3.gif" alt></p><ul><li><code>;;;;;;;;;;;;;;;;;;;;</code>삭제되었는지 확인</li><li>이외에도 여러 가지 스타일 코드대로 수정이 된다.</li></ul><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>여기서는 단독으로 Prettier 방법보다 ESLint와 함께 통합하는 방법에 대해서만 설명한다.<br><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">Prettier</a>는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.</p><h3 id="prettier-설치"><a href="#prettier-설치" class="headerlink" title="prettier 설치"></a>prettier 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D prettier</span><br></pre></td></tr></table></figure><h3 id="eslint-plugin-prettier-설치"><a href="#eslint-plugin-prettier-설치" class="headerlink" title="eslint-plugin-prettier 설치"></a>eslint-plugin-prettier 설치</h3><p><a href="https://github.com/prettier/eslint-plugin-prettier" rel="external nofollow noopener noreferrer" target="_blank">eslint-plugin-prettier</a>는 프리티어 규칙을 ESLint 규칙으로 추가하는 플러그인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D eslint-plugin-prettier</span><br></pre></td></tr></table></figure><h3 id="prettierrc-생성"><a href="#prettierrc-생성" class="headerlink" title=".prettierrc 생성"></a>.prettierrc 생성</h3><p>prettier에 대한 <a href="https://prettier.io/docs/en/options.html" rel="external nofollow noopener noreferrer" target="_blank">Option</a>에 대해서 설정</p><figure class="highlight js"><figcaption><span>.prettierrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"tabWidth"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여기서는 탭 간격만 기본값이 2를 tab 간격을 4로 설정하였다.</li></ul><h3 id="eslintrc-js-수정"><a href="#eslintrc-js-수정" class="headerlink" title="eslintrc.js 수정"></a>eslintrc.js 수정</h3><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: <span class="number">11</span>,</span><br><span class="line">        sourceType: <span class="string">"module"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="app-js-코드-수정-1"><a href="#app-js-코드-수정-1" class="headerlink" title="app.js 코드 수정"></a>app.js 코드 수정</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log();;;;;;;</span><br></pre></td></tr></table></figure><h3 id="ESLint-빌드-1"><a href="#ESLint-빌드-1" class="headerlink" title="ESLint 빌드"></a>ESLint 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log();</span><br><span class="line"></span><br><span class="line">name = <span class="string">"jaehyun"</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_4.gif" alt></p><ul><li>2번째 줄에서는 ESLint의 에러가 발생으로 로그창 에 에러 내용 출력</li><li>3번째 줄에서는 prettier의 <code>;;;;;;</code> 삭제</li><li>5번째 줄에서는 prettier의 <code>&#39;&#39;</code> 을 <code>&quot;&quot;</code>로 변경</li></ul><h2 id="자동화"><a href="#자동화" class="headerlink" title="자동화"></a>자동화</h2><p>git commit 시 자동으로 ESLint 빌드를 실행하기 위해서는 Git Hook을 이용해야 된다.<br>Git Hook을 쉽게 사용할 수 있는 도구는 <a href="https://github.com/typicode/husky" rel="external nofollow noopener noreferrer" target="_blank">husky</a>이다.</p><h3 id="husky-설치"><a href="#husky-설치" class="headerlink" title="husky 설치"></a>husky 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D husky</span><br></pre></td></tr></table></figure><h3 id="package-json에-추가-1"><a href="#package-json에-추가-1" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>commit 하기 전에 ESLint 실행하고 오류를 발견하면 커밋 과정은 취소된다.</p>          </div><h3 id="변경된-파일만-ESLint-검사"><a href="#변경된-파일만-ESLint-검사" class="headerlink" title="변경된 파일만 ESLint 검사"></a>변경된 파일만 ESLint 검사</h3><p><a href="https://github.com/okonet/lint-staged" rel="external nofollow noopener noreferrer" target="_blank">lint-staged</a>를 이용해서 변경된 파일만 ESLint 실행하는 도구</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D lint-staged</span><br></pre></td></tr></table></figure><h3 id="package-json-수정"><a href="#package-json-수정" class="headerlink" title="package.json 수정"></a>package.json 수정</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">  <span class="string">"*.js"</span>: <span class="string">"eslint --fix"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_5.png" alt></p><ul><li>app.js에 변수명을 선언하지 않았기 때문에 commit을 할 수 없고, ESLint 에러가 나타난다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">https://eslint.org/</a></li><li><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">https://prettier.io/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://eslint.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ESLint&lt;/a&gt;는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://prettier.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Prettier&lt;/a&gt;는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack lint" scheme="https://jaehyun8719.github.io/tags/webpack-lint/"/>
    
      <category term="webpack prettier" scheme="https://jaehyun8719.github.io/tags/webpack-prettier/"/>
    
  </entry>
  
  <entry>
    <title>4. babel &amp; sass</title>
    <link href="https://jaehyun8719.github.io/2020/06/17/webpack/babel/"/>
    <id>https://jaehyun8719.github.io/2020/06/17/webpack/babel/</id>
    <published>2020-06-16T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>webpack에서 로더 형태로 제공하는 <a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">babel-loader</a>을 이용하여 사용한다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/babel/babel_1.png" alt></p><h2 id="babel-loader-설치"><a href="#babel-loader-설치" class="headerlink" title="babel-loader 설치"></a>babel-loader 설치</h2><p><a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">babel-loader</a>을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D babel-loader</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>, <span class="comment">// 바벨 로더를 추가</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test에는 <code>.js</code> 확장자로 끝난 파일이 babel-loader가 처리하도록 설정</li><li>exclude에는 <code>/node_modules/</code>에 있는 <code>.js</code> 파일이 처리되지 않도록 설정(바벨 로더의 속도 향상)</li><li>loader에는 <code>babel-loader</code> 추가 </li></ul><h2 id="env-preset-설정과-polyfile"><a href="#env-preset-설정과-polyfile" class="headerlink" title="env preset 설정과 polyfile"></a>env preset 설정과 polyfile</h2><h3 id="preset-env-설치"><a href="#preset-env-설치" class="headerlink" title="preset-env 설치"></a>preset-env 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D @babel/preset-env</span><br></pre></td></tr></table></figure><h3 id="타켓-브라우져-설정"><a href="#타켓-브라우져-설정" class="headerlink" title="타켓 브라우져 설정"></a>타켓 브라우져 설정</h3><p>env preset은 브라우저에 맞는 플러그인들을 찾아 최적 코드로 출력해 준다.</p><h4 id="babel-config-js-생성"><a href="#babel-config-js-생성" class="headerlink" title="babel.config.js 생성"></a>babel.config.js 생성</h4><p><a href="https://babeljs.io/docs/en/config-files#project-wide-configuration" rel="external nofollow noopener noreferrer" target="_blank">babel.config.js</a>는 기본 설정 파일이다.</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                    chrome: <span class="string">"79"</span>, <span class="comment">// 크롬 79까지 지원하는 코드 생성</span></span><br><span class="line">                    ie: <span class="string">"11"</span> <span class="comment">// 익스플로러 11 까지 지원하는 코드 생성</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="webpack-빌드-확인"><a href="#webpack-빌드-확인" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/babel/babel_2.png" alt></p><p><code>app.js</code>에 작성된 코드가 <code>dist/main.js</code>에서 const가 var로 변환 되어 익스플로러도 지원을 한다.</p><h3 id="polyfile-설정"><a href="#polyfile-설정" class="headerlink" title="polyfile 설정"></a>polyfile 설정</h3><p>바벨은 ECMAScript2015+를 ECMAScript5 버전으로 변환할 수 있는 것만 빌드하고, 그렇지 못한 것들을 <code>polyfile</code>이라고 부르는 코드 조각으로 해결한다.<br>(참고 <a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.promise.js" rel="external nofollow noopener noreferrer" target="_blank">core-js promise</a>)</p><h4 id="core-js-설치"><a href="#core-js-설치" class="headerlink" title="core-js 설치"></a>core-js 설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D core-js@3</span><br></pre></td></tr></table></figure><h4 id="src-app-js-수정"><a href="#src-app-js-수정" class="headerlink" title="src/app.js 수정"></a>src/app.js 수정</h4><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// core-js</span></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'foo'</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);  <span class="comment">// expected output: "foo"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(promise1); <span class="comment">// expected output: [object Promise]</span></span><br></pre></td></tr></table></figure><h4 id="babel-config-js에-추가"><a href="#babel-config-js에-추가" class="headerlink" title="babel.config.js에 추가"></a>babel.config.js에 추가</h4><p><code>env preset</code>은 <code>polyfile</code>을 지정할 수 있는 옵션 제공</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                    chrome: <span class="string">"79"</span>, <span class="comment">// 크롬 79까지 지원하는 코드 생성</span></span><br><span class="line">                    ie: <span class="string">"11"</span> <span class="comment">// 익스플로러 11 까지 지원하는 코드 생성</span></span><br><span class="line">                &#125;,</span><br><span class="line">                useBuiltIns: <span class="string">"usage"</span>, <span class="comment">// 폴리필 사용 방식 지정</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                    version: <span class="number">3</span> <span class="comment">// 폴리필 버전 지정</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins" rel="external nofollow noopener noreferrer" target="_blank">userBuiltIns</a>은 polyfile 사용할지 설정하는 옵션(기본값 : false)</li><li><a href="https://babeljs.io/docs/en/babel-preset-env#corejs" rel="external nofollow noopener noreferrer" target="_blank">core-js</a>에 3버전 모듈을 가지고 온다.</li></ul><h4 id="webpack-빌드-확인-1"><a href="#webpack-빌드-확인-1" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><ul><li><a href="https://caniuse.com/#search=Promise" rel="external nofollow noopener noreferrer" target="_blank">caniuse</a> 에서 <code>Promise()</code> 브라우저 지원 확인</li></ul><p><img src="/images/webpack/babel/babel_3.png" alt></p><ul><li>ie 11버젼에서 작동 확인</li></ul><p><img src="/images/webpack/babel/babel_4.png" alt></p><p><code>app.js</code>에 작성된 <code>new Promise()</code>가 변환 되어 익스플로러에서도 작동한다.</p><h2 id="sass-설정"><a href="#sass-설정" class="headerlink" title="sass 설정"></a>sass 설정</h2><h3 id="sass-loader-설치"><a href="#sass-loader-설치" class="headerlink" title="sass-loader 설치"></a>sass-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D sass-loader</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D node-sass</span><br></pre></td></tr></table></figure><h3 id="variables-scss-파일-생성"><a href="#variables-scss-파일-생성" class="headerlink" title="variables.scss 파일 생성"></a>variables.scss 파일 생성</h3><figure class="highlight scss"><figcaption><span>variables.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brand-color</span>: <span class="number">#2ac1bc</span>;</span><br><span class="line"><span class="variable">$primary-color</span>: blue;</span><br><span class="line"><span class="variable">$secondary-color</span>: <span class="number">#aaa</span>;</span><br><span class="line"><span class="variable">$white-color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$border-color</span>: lighten(<span class="variable">$secondary-color</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$span</span>: <span class="number">4px</span>;</span><br></pre></td></tr></table></figure><h3 id="style-scss-파일-생성"><a href="#style-scss-파일-생성" class="headerlink" title="style.scss 파일 생성"></a>style.scss 파일 생성</h3><figure class="highlight scss"><figcaption><span>style.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"./src/variables.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$brand-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-sass-loader-추가"><a href="#webpack-config-js에-sass-loader-추가" class="headerlink" title="webpack.config.js에 sass-loader 추가"></a>webpack.config.js에 sass-loader 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(scss|css)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                        <span class="string">"style-loader"</span>,</span><br><span class="line">                        <span class="string">"css-loader"</span>,</span><br><span class="line">                        <span class="string">"sass-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-빌드-확인-2"><a href="#webpack-빌드-확인-2" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/babel/babel_5.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://babeljs.io/" rel="external nofollow noopener noreferrer" target="_blank">https://babeljs.io/</a></li><li><a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/babel/babel-loader</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;webpack에서 로더 형태로 제공하는 &lt;a href=&quot;https://github.com/babel/babel-loader&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;babel-loader&lt;/a&gt;을 이용하여 사용한다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="babel" scheme="https://jaehyun8719.github.io/tags/babel/"/>
    
      <category term="babel preset" scheme="https://jaehyun8719.github.io/tags/babel-preset/"/>
    
      <category term="babel polyfile" scheme="https://jaehyun8719.github.io/tags/babel-polyfile/"/>
    
      <category term="sass" scheme="https://jaehyun8719.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>3. webpack plugin</title>
    <link href="https://jaehyun8719.github.io/2020/06/10/webpack/plugin/"/>
    <id>https://jaehyun8719.github.io/2020/06/10/webpack/plugin/</id>
    <published>2020-06-09T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.128Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>플러그인(plugin)는 로더는 파일 단위로 처리하는 반면 플러그인은 번들 된 결과물을 처리한다.<br><a id="more"></a></p><h2 id="커스텀-플러그인-만들기"><a href="#커스텀-플러그인-만들기" class="headerlink" title="커스텀 플러그인 만들기"></a>커스텀 플러그인 만들기</h2><p>플러그인을 사용하기 전에 커스텀 플러그인을 만들어서 확인해 보자.</p><h3 id="customPlugin-js-생성"><a href="#customPlugin-js-생성" class="headerlink" title="customPlugin.js 생성"></a>customPlugin.js 생성</h3><figure class="highlight javascript"><figcaption><span>customPlugin.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.done.tap(<span class="string">"Custom Plugin"</span>, stats =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Hello World"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CustomPlugin;</span><br></pre></td></tr></table></figure><ul><li>로더와 다르게 플러그인은 클래스로 작성해야 한다. 플로그인 작업이 완료되는 시점에 <code>console.log(&quot;Hello World&quot;);</code> 함수 호출</li></ul><h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CustomPlugin = <span class="built_in">require</span>(<span class="string">"./src/customPlugin.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CustomPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="커스텀-플러그인-실행-결과-확인"><a href="#커스텀-플러그인-실행-결과-확인" class="headerlink" title="커스텀 플러그인 실행 결과 확인"></a>커스텀 플러그인 실행 결과 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_1.png" alt></p><h2 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h2><p><a href="https://webpack.js.org/plugins/banner-plugin/" rel="external nofollow noopener noreferrer" target="_blank">BannerPlugin</a>은 웹팩으로 빌드 한 결과물에 정보를 입력할 수 있다.</p><h3 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> customPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">            banner: <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                <span class="string">`commitVersion: <span class="subst">$&#123;childProcess.execSync(<span class="string">"git rev-parse --short HEAD"</span>)&#125;</span>`</span> +</span><br><span class="line">                <span class="string">`Build Date: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()&#125;</span>\n`</span> +</span><br><span class="line">                <span class="string">`Author: <span class="subst">$&#123;childProcess.execSync(<span class="string">"git config user.name"</span>)&#125;</span>`</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>빌드 날짜, 커밋 해쉬, 빌드 한 유저 정보 추가</li></ul><h3 id="BannerPlugin-빌드"><a href="#BannerPlugin-빌드" class="headerlink" title="BannerPlugin 빌드"></a>BannerPlugin 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_2.png" alt></p><ul><li><code>./dist/main.js</code>에 BannerPlugin을 이용한 정보를 확인</li></ul><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p><a href="https://webpack.js.org/plugins/define-plugin/" rel="external nofollow noopener noreferrer" target="_blank">DefinePlugin</a>은 개발 환경과 운영 환경의 API서버 주소가 다르기 때문에 빌드를 할 때 명령어로 개발 관련, 운영 관련 환경으로 빌드를 하게 한다.</p><h3 id="webpack-config-js에-추가-2"><a href="#webpack-config-js에-추가-2" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">"v.1.2.3"</span>),</span><br><span class="line">            PRODUCTION : process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>) : <span class="built_in">JSON</span>.stringify(<span class="literal">false</span>),</span><br><span class="line">            MAX_COUNT: <span class="built_in">JSON</span>.stringify(<span class="number">999</span>),</span><br><span class="line">            <span class="string">"api.domain"</span>: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">JSON</span>.stringify(<span class="string">"http://prod.api.domain.com"</span>) : <span class="built_in">JSON</span>.stringify(<span class="string">"http://dev.api.domain.com"</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>process.env.NODE_ENV 웹팩 빌드 시 설정한 값에 따라 운영, 개발 환경 변경</li></ul><h3 id="app-js에-추가"><a href="#app-js에-추가" class="headerlink" title="app.js에 추가"></a>app.js에 추가</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(VERSION) <span class="comment">// "v.1.2.3"</span></span><br><span class="line"><span class="built_in">console</span>.log(PRODUCTION) <span class="comment">// true or false</span></span><br><span class="line"><span class="built_in">console</span>.log(MAX_COUNT) <span class="comment">// 999</span></span><br><span class="line"><span class="built_in">console</span>.log(api.domain) <span class="comment">// "http://prod.api.domain.com" or "http://dev.api.domain.com"</span></span><br></pre></td></tr></table></figure><h3 id="DefinePlugin-빌드"><a href="#DefinePlugin-빌드" class="headerlink" title="DefinePlugin 빌드"></a>DefinePlugin 빌드</h3><ol><li>운영 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_3.png" alt></p><ol start="2"><li>개발 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_4.png" alt></p><h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p><a href="https://github.com/jantimon/html-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">HtmlWebpackPlugin</a>은 빌드 타입 값을 넣거나 코드를 압축하여 HTML 파일을 후처리하는데 사용한다.</p><h3 id="HtmlWebpackPlugin-설치"><a href="#HtmlWebpackPlugin-설치" class="headerlink" title="HtmlWebpackPlugin 설치"></a>HtmlWebpackPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D html-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="src-index-html-수정"><a href="#src-index-html-수정" class="headerlink" title="src/index.html 수정"></a>src/index.html 수정</h3><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;<span class="name">%=</span> <span class="attr">env</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 로딩 스크립트 제거 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="../dist/main.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>title</code>태그에  <code>&lt;%= env %&gt;</code> ejs 문법을 이용하여 웹팩에 빌드 한 결과물을 자동으로 로딩하여 코드에 주입해 준다.</li></ul><h3 id="webpack-config-js에-추가-3"><a href="#webpack-config-js에-추가-3" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">"./src/index.html"</span>, <span class="comment">// 템플릿 경로를 지정</span></span><br><span class="line">            templateParameters: &#123; <span class="comment">// 템플릿에 주입할 파라매터 변수 지정</span></span><br><span class="line">                env: process.env.NODE_ENV === <span class="string">"development"</span> ? <span class="string">"(개발용)"</span> : <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            minify: process.env.NODE_ENV === <span class="string">"production"</span> ? &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 빈칸 제거</span></span><br><span class="line">                removeComments: <span class="literal">true</span>, <span class="comment">// 주석 제거</span></span><br><span class="line">            &#125; : <span class="literal">false</span>,</span><br><span class="line">            hash: <span class="literal">true</span>, <span class="comment">// 정적 파일을 불러올때 쿼리문자열에 웹팩 해쉬값을 추가</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HtmlWebpackPlugin-빌드"><a href="#HtmlWebpackPlugin-빌드" class="headerlink" title="HtmlWebpackPlugin 빌드"></a>HtmlWebpackPlugin 빌드</h3><ol><li>운영 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_5.png" alt></p><p><img src="/images/webpack/plugin/plugin_7.png" alt></p><ul><li>빈칸 제거, 주석 제거, 정적 파일 로딩 시 해쉬값을 추가</li></ul><ol start="2"><li>개발 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>빌드 된 결과물은 <code>./dist/index.html</code>에서 확인하면 된다.</p>          </div><p><img src="/images/webpack/plugin/plugin_6.png" alt></p><h2 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h2><p><a href="https://github.com/johnagan/clean-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">CleanWebpackPlugin</a>은 빌드 이전 결과물을 삭제하는 플러그인이다.</p><h3 id="CleanWebpackPlugin-설치"><a href="#CleanWebpackPlugin-설치" class="headerlink" title="CleanWebpackPlugin 설치"></a>CleanWebpackPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D clean-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-4"><a href="#webpack-config-js에-추가-4" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CleanWebpackPlugin-빌드"><a href="#CleanWebpackPlugin-빌드" class="headerlink" title="CleanWebpackPlugin 빌드"></a>CleanWebpackPlugin 빌드</h3><ul><li>빌드 전</li></ul><p><img src="/images/webpack/plugin/plugin_8.png" alt></p><ul><li>빌드 후</li></ul><p><img src="/images/webpack/plugin/plugin_9.png" alt></p><div class="note info no-icon">            <p>빌드 후 <code>small.png</code>파일에 삭제된 것을 확인할 수 있다.</p>          </div><h2 id="MiniCssExtractPlugin"><a href="#MiniCssExtractPlugin" class="headerlink" title="MiniCssExtractPlugin"></a>MiniCssExtractPlugin</h2><p><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" rel="external nofollow noopener noreferrer" target="_blank">MiniCssExtractPlugin</a>은 하나의 자바스크립트의 결과물로 만드는 것이 아니라, 스타일시트 코드만 뽑아 CSS 파일을 만들어 주는 플러그인이다. </p><h3 id="MiniCssExtractPlugin-설치"><a href="#MiniCssExtractPlugin-설치" class="headerlink" title="MiniCssExtractPlugin 설치"></a>MiniCssExtractPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D mini-css-extract-plugin</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-5"><a href="#webpack-config-js에-추가-5" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">                        ? MiniCssExtractPlugin.loader <span class="comment">// 운영 환경</span></span><br><span class="line">                        : <span class="string">"style-loader"</span>, <span class="comment">// 개발 환경</span></span><br><span class="line">                        <span class="string">"css-loader"</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...(</span><br><span class="line">            process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">                ? [ <span class="keyword">new</span> MiniCssExtractPlugin(&#123;<span class="attr">filename</span>: <span class="string">"[name].css"</span>&#125;) ]</span><br><span class="line">                : []</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>운영환경일 경우에만 css 파일을 추출하는 플러그인을 적용하였다. </li></ul><h3 id="MiniCssExtractPlugin-빌드"><a href="#MiniCssExtractPlugin-빌드" class="headerlink" title="MiniCssExtractPlugin 빌드"></a>MiniCssExtractPlugin 빌드</h3><ol><li>운영 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_10.png" alt></p><p><img src="/images/webpack/plugin/plugin_12.png" alt></p><div class="note info no-icon">            <p><code>./dist/main.css</code>가 생성되었고 <code>index.html</code>에 파일을 로딩하는 코드를 추가</p>          </div><ol start="2"><li>개발 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_11.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/concepts/plugins/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/plugins/</a></li><li><a href="https://webpack.js.org/contribute/writing-a-plugin/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/contribute/writing-a-plugin/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;플러그인(plugin)는 로더는 파일 단위로 처리하는 반면 플러그인은 번들 된 결과물을 처리한다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack plugin" scheme="https://jaehyun8719.github.io/tags/webpack-plugin/"/>
    
      <category term="webpack 플러그인" scheme="https://jaehyun8719.github.io/tags/webpack-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>2. webpack loader</title>
    <link href="https://jaehyun8719.github.io/2020/06/05/webpack/loader/"/>
    <id>https://jaehyun8719.github.io/2020/06/05/webpack/loader/</id>
    <published>2020-06-04T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>로더(Lodaer)는 웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌 HTML, CSS, Image, Font 등을 변환하여 자바스크립트에서 직접 로딩할 수 있도록 해준다.<br><a id="more"></a></p><h2 id="커스텀-로더-만들기"><a href="#커스텀-로더-만들기" class="headerlink" title="커스텀 로더 만들기"></a>커스텀 로더 만들기</h2><p>로더를 사용하기 전에 커스텀 로더를 만들어서 확인해 보자.</p><h3 id="cumstomLoader-js-생성"><a href="#cumstomLoader-js-생성" class="headerlink" title="cumstomLoader.js 생성"></a>cumstomLoader.js 생성</h3><figure class="highlight javascript"><figcaption><span>cumstomLoader.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">customLoader</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"커스텀 로더 작동"</span>);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js파일의-module-객체에-추가"><a href="#webpack-config-js파일의-module-객체에-추가" class="headerlink" title="webpack.config.js파일의 module 객체에 추가"></a>webpack.config.js파일의 module 객체에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>, <span class="comment">// .js 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [path.resolve(<span class="string">"./src/customLoader.js"</span>)] <span class="comment">// 방금 만든 로더를 적용한다</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test에는 로딩에 적용할 파일을 적용한다. 정규화 표현식을 이용해서 <code>.js</code> 확장자의 모든 파일을 처리</li><li>user에는 이 패턴에 해당하는 방금 만든 <code>cumstomLoader.js</code> 경로를 지정</li></ul><h3 id="커스텀-로더-실행"><a href="#커스텀-로더-실행" class="headerlink" title="커스텀 로더 실행"></a>커스텀 로더 실행</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; frontend-dev-env@1.0.0 build C:\workGit\frontend-dev-env</span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">커스텀 로더 작동</span><br><span class="line">커스텀 로더 작동</span><br></pre></td></tr></table></figure><p>터미널에 ‘커스텀 로더 작동’ 문자열이 나오고, <code>cumstomLoader()</code> 함수가 동작한 것을 확인할 수 있다.</p><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>CSS 파일을 자바스크립트에서 불러와 사용하려면 CSS 모듈 변환하는 작업이 필요한데, <a href="https://github.com/webpack-contrib/css-loader" rel="external nofollow noopener noreferrer" target="_blank">css-loder</a>가 CSS 모듈 변화 작업을 진행하여 사용할 수 있게 한다.</p><h3 id="css-loader-설치"><a href="#css-loader-설치" class="headerlink" title="css-loader 설치"></a>css-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D css-loader</span><br></pre></td></tr></table></figure><h3 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h3><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [<span class="string">"css-loader"</span>], <span class="comment">// ss-loader를 적용</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>웹팩은 엔트리 포인트 부터 검색하여 css 파일을 찾으면 <code>css-loader</code>가 처리 한다.</li></ul><h3 id="css-loader-변환-확인"><a href="#css-loader-변환-확인" class="headerlink" title="css-loader 변환 확인"></a>css-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><code>dist/main.js</code> 파일에 <code>background-color: green</code> 검색하면 css 코드가 자바스크립트로 변환된 것을 확인할 수 있다. </p><p><img src="/images/webpack/loader/loader_2.png" alt></p><h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p><code>css-loader</code>로 변경된 style sheet는 Dom에 추가되어야만 브라우져가 해석할 수 있다. <a href="https://github.com/webpack-contrib/style-loader" rel="external nofollow noopener noreferrer" target="_blank">style-loader</a>는 자바스크립트로 변경된 스타일을 동적으로 Dom 에 추가하는 로더이므로 <code>css-loader</code>와 <code>style-loader</code>는 함께 사용해야 된다.</p><h3 id="style-loader-설치"><a href="#style-loader-설치" class="headerlink" title="style-loader 설치"></a>style-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D style-loader</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>rules.use</code>에 배열은 앞에서부터 순서대로 로더가 작동</p>          </div><h3 id="style-loader-변환-확인"><a href="#style-loader-변환-확인" class="headerlink" title="style-loader 변환 확인"></a>style-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/loader/loader_3.png" alt></p><h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><p>webpack output에 파일을 옮겨주는 것이 <a href="https://github.com/webpack-contrib/file-loader" rel="external nofollow noopener noreferrer" target="_blank">file-loader</a>이다.</p><h3 id="file-loader-설치"><a href="#file-loader-설치" class="headerlink" title="file-loader 설치"></a>file-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D file-loader</span><br></pre></td></tr></table></figure><h3 id="style-css-1"><a href="#style-css-1" class="headerlink" title="style.css"></a>style.css</h3><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./dist/bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.png$/</span>, <span class="comment">// .png 확장자로 마치는 모든 파일</span></span><br><span class="line">                loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">"[name].[ext]?[hash]"</span>, <span class="comment">// 파일명 형식</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>publicPath</code>은 <code>file-loader</code>가 처리하는 파일 모듈로 사용할 때 앞에 추가되는 문자열</li><li><code>name</code>은 ‘bg.png?c1771da01a4975d381c2b5583293a075’ 형식으로 파일 변경 요청</li></ul><p><img src="/images/webpack/loader/loader_4.png" alt></p><h3 id="file-loader-변환-확인"><a href="#file-loader-변환-확인" class="headerlink" title="file-loader 변환 확인"></a>file-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/loader/loader_5.png" alt></p><h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>url-loader가 처리하는 옵션 중 fallback 기본값이 file-loader이다.<br>이미지를 Base64로 인코딩하여 문자열 형태로 소스에 넣어주는 형식으로 처리해 주는 게<a href="https://github.com/webpack-contrib/url-loader" rel="external nofollow noopener noreferrer" target="_blank">url-loader</a>이다.</p><h3 id="url-loader-설치"><a href="#url-loader-설치" class="headerlink" title="url-loader 설치"></a>url-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D url-loader</span><br></pre></td></tr></table></figure><h3 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br><span class="line"><span class="keyword">import</span> small <span class="keyword">from</span> <span class="string">'./small.png'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;img src="<span class="subst">$&#123;small&#125;</span>" /&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|svg|gif)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"url-loader"</span>, <span class="comment">// url 로더를 설정한다</span></span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">"[name].[ext]?[hash]"</span>, <span class="comment">// file-loader와 동일</span></span><br><span class="line">                        limit: <span class="number">100000</span> <span class="comment">// 100kb 미만 파일만 data url로 처리</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>`limit에 설정한 값에 따라 100kb 미만 파일은 Data url 형태로 변환.<br>아이콘처럼 사용 빈도수가 높은 이미지 파일을 사용하면 좋다.</p>          </div><p><img src="/images/webpack/loader/loader_6.png" alt></p><h3 id="url-loader-변환-확인"><a href="#url-loader-변환-확인" class="headerlink" title="url-loader 변환 확인"></a>url-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/loader/loader_7.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/concepts/loaders/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/loaders/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;로더(Lodaer)는 웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌 HTML, CSS, Image, Font 등을 변환하여 자바스크립트에서 직접 로딩할 수 있도록 해준다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack loader" scheme="https://jaehyun8719.github.io/tags/webpack-loader/"/>
    
      <category term="webpack 로더" scheme="https://jaehyun8719.github.io/tags/webpack-%EB%A1%9C%EB%8D%94/"/>
    
  </entry>
  
  <entry>
    <title>1. webpack entry/output</title>
    <link href="https://jaehyun8719.github.io/2020/06/04/webpack/setup/"/>
    <id>https://jaehyun8719.github.io/2020/06/04/webpack/setup/</id>
    <published>2020-06-03T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.128Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>시작점(entry)으로부터 의존적인 모듈을 전부 찾아내서 하나의 결과물을 만들어 낸다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/setup/setup_1.png" alt></p><h2 id="webpack-설치"><a href="#webpack-설치" class="headerlink" title="webpack 설치"></a>webpack 설치</h2><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a> 패키지와 웹팩 터미널 도구인 <a href="https://github.com/webpack/webpack-cli" rel="external nofollow noopener noreferrer" target="_blank">webpack-cli</a> 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D webpack webpack-cli</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node_modules/.bin/webpack --<span class="built_in">help</span></span><br><span class="line">webpack-cli 3.3.11</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>webpack,  webpack-cli 정상적으로 설치가 되면 –help 명령어 실행 </p>          </div><h2 id="index-html-생성"><a href="#index-html-생성" class="headerlink" title="index.html 생성"></a>index.html 생성</h2><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>&lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</code>은 npm 커스텀 명령어를 추가하면 생기는 파일이다.</p>          </div><h2 id="app-js와-math-js-생성"><a href="#app-js와-math-js-생성" class="headerlink" title="app.js와 math js 생성"></a>app.js와 math js 생성</h2><p><img src="/images/webpack/setup/setup_2.png" alt></p><figure class="highlight javascript"><figcaption><span>math.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"./math.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(math.sum(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="webpack-config-js-생성"><a href="#webpack-config-js-생성" class="headerlink" title="webpack.config.js 생성"></a>webpack.config.js 생성</h2><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mode: 웹팩의 실행 모드인 ‘development’ 문자열 사용</li><li>entry: 어플리케이션 시작점인 ‘./src/app.js’ 로 설정</li><li>output: 번들링한 결과물을 위치할 경로이다. (output.path는 절대 경로를 사용하기 때문에 node 코드 모듈인 path를 사용하여 처리하였다.)</li></ul><h2 id="package-json에-npm-커스텀-명령어-build-추가"><a href="#package-json에-npm-커스텀-명령어-build-추가" class="headerlink" title="package.json에 npm 커스텀 명령어 build 추가"></a>package.json에 npm 커스텀 명령어 build 추가</h2><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"frontend-dev-env"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.43.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.11"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="npm-커스텀-명령어-실행"><a href="#npm-커스텀-명령어-실행" class="headerlink" title="npm 커스텀 명령어 실행"></a>npm 커스텀 명령어 실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">Hash: 5d24763a699d2f2ca80d</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 68ms</span><br><span class="line">Built at: 2020-06-04 14:21:22</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  4.51 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[./src/app.js] 66 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/math.js] 49 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure><h3 id="dist-main-js-파일-생성-확인"><a href="#dist-main-js-파일-생성-확인" class="headerlink" title="./dist/main.js 파일 생성 확인"></a>./dist/main.js 파일 생성 확인</h3><p><img src="/images/webpack/setup/setup_3.png" alt></p><h3 id="index-html-브라우저-확인"><a href="#index-html-브라우저-확인" class="headerlink" title="index.html 브라우저 확인"></a>index.html 브라우저 확인</h3><p>DevTool을 이용해서 app.js에서 console.log에 결과값을 확인한다.</p><p><img src="/images/webpack/setup/setup_4.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/guides/getting-started/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/getting-started/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;시작점(entry)으로부터 의존적인 모듈을 전부 찾아내서 하나의 결과물을 만들어 낸다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack entry" scheme="https://jaehyun8719.github.io/tags/webpack-entry/"/>
    
      <category term="webpack output" scheme="https://jaehyun8719.github.io/tags/webpack-output/"/>
    
  </entry>
  
</feed>
