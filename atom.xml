<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaehyun&#39;s Dev Story</title>
  
  <subtitle>공부해서 남준다.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaehyun8719.github.io/"/>
  <updated>2023-07-29T09:11:36.207Z</updated>
  <id>https://jaehyun8719.github.io/</id>
  
  <author>
    <name>Jaehyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Data JPA - NamedQuery</title>
    <link href="https://jaehyun8719.github.io/2023/07/29/jpa/data-jpa/query-method/02-named-query/"/>
    <id>https://jaehyun8719.github.io/2023/07/29/jpa/data-jpa/query-method/02-named-query/</id>
    <published>2023-07-28T15:00:00.000Z</published>
    <updated>2023-07-29T09:11:36.207Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Spring Data JPA 쿼리 메소드 기능<br>NamedQuery<br><a id="more"></a></p><h2 id="Kotlin에서-JPA-NamedQuery를-활용하는-방법"><a href="#Kotlin에서-JPA-NamedQuery를-활용하는-방법" class="headerlink" title="Kotlin에서 JPA NamedQuery를 활용하는 방법"></a>Kotlin에서 JPA NamedQuery를 활용하는 방법</h2><p>Member 클래스에서 유저 이름에 따라 데이터를 조회하는 NamedQuery를 생성해봅시다.</p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.*</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NamedQuery(</span></span><br><span class="line"><span class="meta">    name = <span class="meta-string">"Member.findByUsername"</span>,</span></span><br><span class="line"><span class="meta">    query = <span class="meta-string">"select m from Member m where m.username = :username"</span></span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>이제 <code>MemberRepository</code>에서 이 NamedQuery를 호출하는 방법에 대해 알아보겠습니다. </p><figure class="highlight kotlin"><figcaption><span>MemberRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.persistence.*</span><br><span class="line"><span class="keyword">import</span> kotlin.collections.List</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findByUsername</span><span class="params">(em: <span class="type">EntityManager</span>, username: <span class="type">String</span>)</span></span>: List&lt;Member&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createNamedQuery(<span class="string">"Member.findByUsername"</span>, Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            .setParameter(<span class="string">"username"</span>, username)</span><br><span class="line">            .resultList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>스프링 데이터 JPA에서도 NamedQuery를 활용할 수 있습니다. 아래 예제는 <code>@Query</code> 어노테이션을 사용하여 NamedQuery를 호출하는 방법을 보여줍니다.</p><figure class="highlight kotlin"><figcaption><span>MemberRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.jpa.repository.JpaRepository</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.jpa.repository.Query</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.repository.query.Param</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> : <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(name = <span class="meta-string">"Member.findByUsername"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findByUsername</span><span class="params">(<span class="meta">@Param(<span class="meta-string">"username"</span>)</span> username: <span class="type">String</span>)</span></span>: List&lt;Member&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한, <code>@Query</code> 어노테이션을 생략하고, 메서드 이름만을 이용해 Named 쿼리를 호출하는 것도 가능합니다. 스프링 데이터 JPA는 “도메인 클래스 + .(점) + 메서드 이름”의 규칙을 사용하여 Named 쿼리를 찾아서 실행합니다. 만약 해당 Named 쿼리가 없을 경우, 메서드 이름을 바탕으로 쿼리를 생성합니다.</p><figure class="highlight kotlin"><figcaption><span>MemberRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.jpa.repository.JpaRepository</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.repository.query.Param</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> : <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findByUsername</span><span class="params">(<span class="meta">@Param(<span class="meta-string">"username"</span>)</span> username: <span class="type">String</span>)</span></span>: List&lt;Member&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 전략을 변경하는 것도 가능하나, 일반적으로는 권장하지 않습니다. 자세한 내용은 <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-lookup-strategies" rel="external nofollow noopener noreferrer" target="_blank">이 링크</a>에서 확인하실 수 있습니다.</p><p>스프링 데이터 JPA를 사용하면, 일반적으로는 Named Query를 직접 등록하여 사용하는 경우는 드뭅니다. 대신, 개발자들은 주로 <code>@Query</code> 어노테이션을 이용하여 리파지토리 메소드에 쿼리를 직접 정의합니다. 이에 대한 자세한 내용은 다음 포스트에서 다루도록 하겠습니다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-data-jpa" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA-%EC%8B%A4%EC%A0%84" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링-데이터-JPA-실전</a></li><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" rel="external nofollow noopener noreferrer" target="_blank">Spring Data JPA 공식 문서</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Spring Data JPA 쿼리 메소드 기능&lt;br&gt;NamedQuery&lt;br&gt;
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="Data JPA" scheme="https://jaehyun8719.github.io/categories/JPA/Data-JPA/"/>
    
    
      <category term="Data JPA" scheme="https://jaehyun8719.github.io/tags/Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA - 메소드 이름으로 쿼리 생성</title>
    <link href="https://jaehyun8719.github.io/2023/07/28/jpa/data-jpa/query-method/01-method-name/"/>
    <id>https://jaehyun8719.github.io/2023/07/28/jpa/data-jpa/query-method/01-method-name/</id>
    <published>2023-07-27T15:00:00.000Z</published>
    <updated>2023-07-29T09:08:47.108Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Spring Data JPA 쿼리 메소드 기능<br>메소드 이름으로 쿼리 생성<br><a id="more"></a></p><h2 id="JPA와-Spring-Data-JPA를-활용한-쿼리-생성-방법"><a href="#JPA와-Spring-Data-JPA를-활용한-쿼리-생성-방법" class="headerlink" title="JPA와 Spring Data JPA를 활용한 쿼리 생성 방법"></a>JPA와 Spring Data JPA를 활용한 쿼리 생성 방법</h2><p>Java Persistence API (JPA)와 Spring Data JPA는 Java 개발자들이 데이터베이스에 대한 쿼리를 더 쉽고 효율적으로 생성하고 관리할 수 있게 해줍니다. 이 두 기술은 메소드 이름을 분석해 JPQL (Java Persistence Query Language) 쿼리를 생성하고 실행하는 기능을 제공합니다. 이 포스트에서는 이러한 방법을 사용해 이름과 나이를 기준으로 회원을 조회하는 방법에 대해 설명하겠습니다.</p><h3 id="순수-JPA-리포지토리를-사용한-방법"><a href="#순수-JPA-리포지토리를-사용한-방법" class="headerlink" title="순수 JPA 리포지토리를 사용한 방법"></a>순수 JPA 리포지토리를 사용한 방법</h3><p>먼저 순수 JPA를 사용하여 메소드를 작성해 보겠습니다.</p><figure class="highlight kotlin"><figcaption><span>MemberJpaRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findByUsernameAndAgeGreaterThan</span><span class="params">(username: <span class="type">String</span>, age: <span class="type">Int</span>)</span></span>: List&lt;Member&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> em.createQuery(<span class="string">"select m from Member m where m.username = :username and m.age &gt; :age"</span>, Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        .setParameter(<span class="string">"username"</span>, username)</span><br><span class="line">        .setParameter(<span class="string">"age"</span>, age)</span><br><span class="line">        .resultList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 메소드는 입력된 사용자 이름과 나이를 기준으로 Member 엔티티를 검색합니다. 해당 메소드의 테스트 코드는 다음과 같습니다.</p><figure class="highlight kotlin"><figcaption><span>MemberJpaRepositoryTest.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findByUsernameAndAgeGreaterThan</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> member1 = Member(username = <span class="string">"AAA"</span>, age = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> member2 = Member(username = <span class="string">"AAA"</span>, age = <span class="number">20</span>)</span><br><span class="line">    memberJpaRepository.save(member1)</span><br><span class="line">    memberJpaRepository.save(member2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> result = memberJpaRepository.findByUsernameAndAgeGreaterThan(<span class="string">"AAA"</span>, <span class="number">15</span>)</span><br><span class="line">    assertThat(result[<span class="number">0</span>].username).isEqualTo(<span class="string">"AAA"</span>)</span><br><span class="line">    assertThat(result[<span class="number">0</span>].age).isEqualTo(<span class="number">20</span>)</span><br><span class="line">    assertThat(result.size).isEqualTo(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Data-JPA를-사용한-방법"><a href="#Spring-Data-JPA를-사용한-방법" class="headerlink" title="Spring Data JPA를 사용한 방법"></a>Spring Data JPA를 사용한 방법</h3><p>다음으로, Spring Data JPA를 사용하여 같은 쿼리를 생성해 보겠습니다. Spring Data JPA를 사용하면 구현체 없이 인터페이스만으로 쿼리를 생성할 수 있습니다.</p><figure class="highlight kotlin"><figcaption><span>MemberRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span>: <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findByUsernameAndAgeGreaterThan</span><span class="params">(username: <span class="type">String</span>, age: <span class="type">Int</span>)</span></span>: List&lt;Member&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Data JPA는 위와 같이 메소드 이름만으로 쿼리를 생성하고 실행합니다. 이는 개발자가 쿼리를 직접 작성하는 노력을 줄이고 코드의 가독성을 향상시킵니다.</p><p>Spring Data JPA는 다양한 쿼리 메소드를 지원합니다.</p><ul><li>조회: <code>find...By</code>, <code>read...By</code>, <code>query...By</code>, <code>get...By</code></li><li>COUNT: <code>count...By</code> 반환 타입 <code>long</code></li><li>EXISTS: <code>exists...By</code> 반환 타입 <code>boolean</code> </li><li>삭제: <code>delete...By</code>, <code>remove...By</code> 반환 타입 <code>long`</code></li><li>DISTINCT: <code>findDistinct</code>, <code>findMemberDistinctBy</code> </li><li>LIMIT: <code>findFirst3</code>, <code>findFirst</code>, <code>findTop</code>, <code>findTop3</code></li></ul><p>더 자세한 정보는 <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" rel="external nofollow noopener noreferrer" target="_blank">Spring Data JPA 공식 문서</a>를 참조하세요.</p><p>주의할 점은, 이러한 기능은 엔티티의 필드명이 변경되면 인터페이스에 정의한 메서드 이름도 함께 변경해야 합니다. 그렇지 않으면 애플리케이션을 시작하는 시점에 오류가 발생합니다. 이렇게 애플리케이션 로딩 시점에 오류를 인지할 수 있는 것은 스프링 데이터 JPA의 매우 큰 장점입니다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-data-jpa" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA-%EC%8B%A4%EC%A0%84" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링-데이터-JPA-실전</a></li><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" rel="external nofollow noopener noreferrer" target="_blank">Spring Data JPA 공식 문서</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Spring Data JPA 쿼리 메소드 기능&lt;br&gt;메소드 이름으로 쿼리 생성&lt;br&gt;
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="Data JPA" scheme="https://jaehyun8719.github.io/categories/JPA/Data-JPA/"/>
    
    
      <category term="Data JPA" scheme="https://jaehyun8719.github.io/tags/Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA - 공통 인터페이스 기능</title>
    <link href="https://jaehyun8719.github.io/2023/07/03/jpa/data-jpa/common-interface/"/>
    <id>https://jaehyun8719.github.io/2023/07/03/jpa/data-jpa/common-interface/</id>
    <published>2023-07-02T15:00:00.000Z</published>
    <updated>2023-07-03T13:38:55.175Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Spring Data JPA 공통 인터페이스 기능 만들기<br><a id="more"></a></p><h2 id="순수-JPA-기반-리포지토리-만들기"><a href="#순수-JPA-기반-리포지토리-만들기" class="headerlink" title="순수 JPA 기반 리포지토리 만들기"></a>순수 JPA 기반 리포지토리 만들기</h2><p>Java Persistence API (JPA)는 Java 개발자가 관계형 데이터베이스에서 자바 객체를 저장, 수정, 삭제, 조회할 수 있게 도와주는 인터페이스입니다.<br>리포지토리는 기본적으로 CRUD(Create, Read, Update, Delete)를 수행할 수 있어야 합니다.</p><ol><li><p>저장<br>JPA를 사용하면 자바 객체를 관계형 데이터베이스에 저장할 수 있습니다. EntityManager의 persist 메소드를 이용하면 간단하게 저장할 수 있습니다.</p></li><li><p>변경<br>JPA는 변경 감지라는 기능을 제공합니다. 트랜잭션 안에서 엔티티를 조회한 후 데이터를 변경하면, 트랜잭션이 종료되는 시점에 변경 감지 기능이 작동합니다. 변경된 엔티티를 감지하고 UPDATE SQL을 자동으로 실행합니다.</p></li><li><p>삭제<br>엔티티를 삭제하는 것도 간단합니다. EntityManager의 remove 메소드를 사용하면 됩니다.</p></li><li><p>전체 조회<br>EntityManager의 createQuery 메소드를 사용하여 JPQL을 이용하면 전체 엔티티를 조회할 수 있습니다.</p></li><li><p>단건 조회<br>find 메소드를 이용하면 특정 엔티티를 조회할 수 있습니다.</p></li><li><p>카운트<br>JPQL의 COUNT 함수를 이용하면 저장되어 있는 엔티티의 개수를 세는 것도 가능합니다.</p></li></ol><figure class="highlight kotlin"><figcaption><span>MemberJpaRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberJpaRepository</span></span>(</span><br><span class="line">    <span class="meta">@PersistenceContext</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(member: <span class="type">Member</span>)</span></span>: Member &#123;</span><br><span class="line">        em.persist(member)</span><br><span class="line">        <span class="keyword">return</span> member</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delete</span><span class="params">(member: <span class="type">Member</span>)</span></span> &#123;</span><br><span class="line">        em.remove(member)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAll</span><span class="params">()</span></span>: List&lt;Member&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(<span class="string">"select m from Member m"</span>, Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            .resultList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findById</span><span class="params">(id: <span class="type">Long</span>)</span></span>: Optional&lt;Member&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">id)</span></span></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(member)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">count</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(<span class="string">"select count(m) from Member m"</span>, <span class="built_in">Long</span>::<span class="class"><span class="keyword">class</span>.<span class="title">javaObjectType</span>)</span></span><br><span class="line">            .singleResult</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">find</span><span class="params">(id: <span class="type">Long</span>?)</span></span>: Member &#123;</span><br><span class="line">        <span class="keyword">return</span> em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">id)</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>MemberJpaRepositoryTest.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberJpaRepositoryTest</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> memberJpaRepository: MemberJpaRepository,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testMember</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member = Member(username = <span class="string">"memberA"</span>)</span><br><span class="line">        <span class="keyword">val</span> saveMember = memberJpaRepository.save(member)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = memberJpaRepository.find(saveMember.id)</span><br><span class="line"></span><br><span class="line">        findMember.id?.let &#123; assertThat(it == member.id) &#125;</span><br><span class="line">        assertThat(findMember.username.equals(member.username))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">basicCRUD</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member1 = Member(username = <span class="string">"member1"</span>)</span><br><span class="line">        <span class="keyword">val</span> member2 = Member(username = <span class="string">"member2"</span>)</span><br><span class="line">        memberJpaRepository.save(member1)</span><br><span class="line">        memberJpaRepository.save(member2)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 단건 조회 검증</span></span><br><span class="line">        <span class="keyword">val</span> findMember1 = member1.id?.let &#123; memberJpaRepository.findById(it).<span class="keyword">get</span>() &#125;</span><br><span class="line">        <span class="keyword">val</span> findMember2 = member2.id?.let &#123; memberJpaRepository.findById(it).<span class="keyword">get</span>() &#125;</span><br><span class="line"></span><br><span class="line">        assertThat(findMember1).isEqualTo(member1)</span><br><span class="line">        assertThat(findMember2).isEqualTo(member2)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 리스트 조회 검증</span></span><br><span class="line">        <span class="keyword">val</span> all = memberJpaRepository.findAll()</span><br><span class="line">        assertThat(all.size).isEqualTo(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 카운트 검증</span></span><br><span class="line">        <span class="keyword">val</span> count = memberJpaRepository.count()</span><br><span class="line">        assertThat(count).isEqualTo(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 삭제 검증</span></span><br><span class="line">        memberJpaRepository.delete(member1)</span><br><span class="line">        memberJpaRepository.delete(member2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> deletedCount = memberJpaRepository.count()</span><br><span class="line">        assertThat(deletedCount).isEqualTo(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="공통-인터페이스-설정"><a href="#공통-인터페이스-설정" class="headerlink" title="공통 인터페이스 설정"></a>공통 인터페이스 설정</h2><p>JavaConfig 설정- 스프링 부트 사용시 생략 가능<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableJpaRepositories(basePackages = &quot;jpabook.jpashop.repository&quot;)</span><br><span class="line">class AppConfig &#123;&#125;</span><br></pre></td></tr></table></figure></p><p><code>@SpringBootApplication</code> 애노테이션 위치를 기준으로 해당 패키지와 하위 패키지를 자동으로 스캔하므로, 따로 위치를 지정하지 않아도 됩니다.<br><code>org.springframework.data.repository.Repository</code> 인터페이스를 구현한 클래스를 자동으로 스캔하고 등록하기 때문입니다.</p><p><img src="/images/jpa/data-jpa/common-interface1.png" width="80%"></p><p>예를 들어, <code>MemberRepository</code> 인터페이스는 구현 클래스 없이도 동작합니다. 인터페이스의 구체적인 클래스를 확인해보면, <code>com.sun.proxy.$ProxyXXX</code>와 같은 프록시 클래스라는 것을 확인할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memberRepository.getClass() <span class="comment">// class com.sun.proxy.$ProxyXXX</span></span><br></pre></td></tr></table></figure><p>또한, @Repository 애노테이션을 생략할 수 있습니다. 이는 스프링 데이터 JPA가 자동으로 컴포넌트 스캔을 처리하고, JPA 예외를 스프링 프레임워크의 데이터 액세스 예외로 변환하기 때문입니다.<br>이렇게 스프링 데이터 JPA는 개발자가 중복된 CRUD 코드를 작성하는 것을 피하게 해주고, 개발 과정을 간소화하며 생산성을 향상시키는 데 크게 기여합니다.</p><h2 id="공통-인터페이스-적용"><a href="#공통-인터페이스-적용" class="headerlink" title="공통 인터페이스 적용"></a>공통 인터페이스 적용</h2><p>기존에 순수 JPA로 구현했던 <code>MemberJpaRepository</code>를 스프링 데이터 JPA 기반의 <code>MemberRepository</code>로 대체할 예정입니다.<br>먼저 <code>MemberRepository</code> 인터페이스를 살펴보면, <code>JpaRepository&lt;Member, Long&gt;</code>를 상속받고 있음을 확인할 수 있습니다. 이를 통해 우리는 JPA의 기본적인 CRUD 기능들을 간편하게 사용할 수 있게 됩니다.</p><figure class="highlight kt"><figcaption><span>MemberRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span>: <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>MemberRepositoryTest.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberRepositoryTest</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> memberRepository: MemberRepository,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">testMember</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member = Member(username = <span class="string">"memberA"</span>)</span><br><span class="line">        <span class="keyword">val</span> saveMember = memberRepository.save(member)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = memberRepository.findById(saveMember.id).<span class="keyword">get</span>()</span><br><span class="line"></span><br><span class="line">        findMember.id?.let &#123; assertThat(it == member.id) &#125;</span><br><span class="line">        assertThat(findMember.username.equals(member.username))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">basicCRUD</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member1 = Member(username = <span class="string">"member1"</span>)</span><br><span class="line">        <span class="keyword">val</span> member2 = Member(username = <span class="string">"member2"</span>)</span><br><span class="line">        memberRepository.save(member1)</span><br><span class="line">        memberRepository.save(member2)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 단건 조회 검증</span></span><br><span class="line">        <span class="keyword">val</span> findMember1 = member1.id?.let &#123; memberRepository.findById(it).<span class="keyword">get</span>() &#125;</span><br><span class="line">        <span class="keyword">val</span> findMember2 = member2.id?.let &#123; memberRepository.findById(it).<span class="keyword">get</span>() &#125;</span><br><span class="line"></span><br><span class="line">        assertThat(findMember1).isEqualTo(member1)</span><br><span class="line">        assertThat(findMember2).isEqualTo(member2)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 리스트 조회 검증</span></span><br><span class="line">        <span class="keyword">val</span> all = memberRepository.findAll()</span><br><span class="line">        assertThat(all.size).isEqualTo(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 카운트 검증</span></span><br><span class="line">        <span class="keyword">val</span> count = memberRepository.count()</span><br><span class="line">        assertThat(count).isEqualTo(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 삭제 검증</span></span><br><span class="line">        memberRepository.delete(member1)</span><br><span class="line">        memberRepository.delete(member2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> deletedCount = memberRepository.count()</span><br><span class="line">        assertThat(deletedCount).isEqualTo(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존 순수 JPA 기반 테스트에서 사용했던 코드를 그대로 스프링 데이터 JPA 리포지토리 기반 테스트로 변경해도 동일한 방식으로 동작합니다.</p><h2 id="공통-인터페이스-분석"><a href="#공통-인터페이스-분석" class="headerlink" title="공통 인터페이스 분석"></a>공통 인터페이스 분석</h2><ul><li>JpaRepository 인터페이스: 공통 CRUD 제공 합니다.</li><li>제네릭은 &lt;엔티티 타입, 식별자 타입&gt; 설정 합니다.</li></ul><h3 id="JpaRepository-공통-기능-인터페이스"><a href="#JpaRepository-공통-기능-인터페이스" class="headerlink" title="JpaRepository 공통 기능 인터페이스"></a>JpaRepository 공통 기능 인터페이스</h3><figure class="highlight java"><figcaption><span>JpaRepository.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></span><br><span class="line"><span class="class">                                       <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JpaRepository-를-사용하는-인터페이스"><a href="#JpaRepository-를-사용하는-인터페이스" class="headerlink" title="JpaRepository 를 사용하는 인터페이스"></a>JpaRepository 를 사용하는 인터페이스</h3><figure class="highlight java"><figcaption><span>MemberRepository.java </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="공통-인터페이스-구성"><a href="#공통-인터페이스-구성" class="headerlink" title="공통 인터페이스 구성"></a>공통 인터페이스 구성</h2><p><img src="/images/jpa/data-jpa/common-interface2.png" width="80%"></p><h3 id="중요한-변경-사항"><a href="#중요한-변경-사항" class="headerlink" title="중요한 변경 사항"></a>중요한 변경 사항</h3><ul><li><code>T findOne(ID)</code>는 이제 <code>Optional&lt;T&gt; findById(ID)</code>로 변경되었습니다.</li><li><code>boolean exists(ID)</code>는 이제 <code>boolean existsById(ID)</code>로 변경되었습니다.</li></ul><h3 id="제네릭-타입"><a href="#제네릭-타입" class="headerlink" title="제네릭 타입"></a>제네릭 타입</h3><ul><li>T : 엔티티를 의미합니다.</li><li>ID : 엔티티의 고유 식별자 타입을 가리킵니다.</li><li>S : 엔티티와 그의 하위 타입을 의미합니다.</li></ul><h3 id="주요-메서드"><a href="#주요-메서드" class="headerlink" title="주요 메서드"></a>주요 메서드</h3><ul><li>save(S) : 새로운 엔티티는 저장하며, 이미 존재하는 엔티티는 병합합니다.</li><li>delete(T) : 특정 엔티티를 삭제합니다. 내부적으로는 EntityManager.remove()를 호출합니다.</li><li>findById(ID) : 특정 엔티티를 조회합니다. 이 과정에서는 EntityManager.find()가 호출됩니다.</li><li>getOne(ID) : 엔티티를 프록시로 조회합니다. 이 과정에서는 EntityManager.getReference()가 호출됩니다.</li><li>findAll(…) : 모든 엔티티를 조회합니다. 정렬(Sort)이나 페이징(Pageable) 조건을 매개변수로 제공할 수 있습니다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-data-jpa" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EB%8D%B0%EC%9D%B4%ED%84%B0-JPA-%EC%8B%A4%EC%A0%84" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링-데이터-JPA-실전</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Spring Data JPA 공통 인터페이스 기능 만들기&lt;br&gt;
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="Data JPA" scheme="https://jaehyun8719.github.io/categories/JPA/Data-JPA/"/>
    
    
      <category term="Data JPA" scheme="https://jaehyun8719.github.io/tags/Data-JPA/"/>
    
  </entry>
  
  <entry>
    <title>OSIV와 성능 최적화</title>
    <link href="https://jaehyun8719.github.io/2023/06/17/jpa/api-optimization/osiv/"/>
    <id>https://jaehyun8719.github.io/2023/06/17/jpa/api-optimization/osiv/</id>
    <published>2023-06-16T15:00:00.000Z</published>
    <updated>2023-06-17T13:56:05.687Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Open Session In View: 하이버네이트<br>Open EntityManager In View: JPA<br><a id="more"></a></p><h2 id="OSIV-ON"><a href="#OSIV-ON" class="headerlink" title="OSIV ON"></a>OSIV ON</h2><p><img src="/images/jpa/osiv/osiv1.png" width="80%"></p><p>컨텍스트와 데이터베이스 연결을 유지하는 것은 지연 로딩이 가능하게 해주는 요인이며, 이는 주로 View Template이나 API 컨트롤러에서 활용됩니다. 이러한 방식은 영속성 컨텍스트의 유지를 필요로 하는데, 이는 기본적으로 데이터베이스 연결을 계속해서 유지하게 됩니다. 이는 많은 이점을 가지고 있지만, 몇 가지 주의할 점들이 있습니다.</p><p>장시간 동안 데이터베이스 연결 리소스를 점유하는 이 전략은 실시간 트래픽이 많은 애플리케이션에서는 문제를 일으킬 수 있습니다. 바꿔 말하면, 이 방식은 연결이 부족하게 되어 결국에는 시스템 장애를 초래할 수 있습니다.</p><p>이를 명확하게 이해하기 위한 예로, 컨트롤러가 외부 API를 호출하는 경우를 생각해보겠습니다. 외부 API의 응답을 기다리는 동안, 해당 데이터베이스 연결 리소스는 반환되지 않고 유지 상태를 유지해야 합니다. 이렇게 되면 필요 이상으로 데이터베이스 연결을 점유하게 되어, 다른 요청들이 이 리소스를 활용하지 못하는 문제가 발생할 수 있습니다.</p><h2 id="OSIV-OFF"><a href="#OSIV-OFF" class="headerlink" title="OSIV OFF"></a>OSIV OFF</h2><p><img src="/images/jpa/osiv/osiv2.png" width="80%"></p><p>Spring의 spring.jpa.open-in-view: false 설정을 통해 Open Session in View(OSIV)를 비활성화할 수 있습니다. OSIV를 비활성화하면 트랜잭션을 종료할 때 영속성 컨텍스트를 닫고, 데이터베이스 연결을 반환하게 됩니다. 이렇게 함으로써 데이터베이스 연결 리소스를 효율적으로 관리하고 낭비를 줄일 수 있습니다.</p><p>그러나 OSIV를 비활성화하는 것은 몇 가지 단점이 있습니다. 첫째, 모든 지연 로딩은 트랜잭션 내에서 처리되어야 합니다. 이는 기존에 작성한 많은 지연 로딩 코드를 트랜잭션 내부로 이동시켜야 하는 작업을 필요로 합니다. 둘째, View Template에서는 지연 로딩이 작동하지 않게 됩니다.</p><p>결과적으로, 트랜잭션이 종료되기 전에 지연 로딩을 강제적으로 호출해야 하는 상황을 만들어낼 수 있습니다. 이는 애플리케이션의 전반적인 설계와 성능 최적화를 재검토할 필요가 있다는 신호로 받아들여져야 합니다.</p><h2 id="커멘드와-쿼리-분리"><a href="#커멘드와-쿼리-분리" class="headerlink" title="커멘드와 쿼리 분리"></a>커멘드와 쿼리 분리</h2><p>실제 업무에서 Open Session in View(OSIV)를 비활성화한 상태에서 복잡성을 효과적으로 관리하는 좋은 전략 중 하나는 Command와 Query를 분리하는 것입니다. 이 원칙은 Command–Query Separation (CQS)라고 알려져 있습니다. (자세한 정보는 위키백과의 해당 항목을 참조하세요: <a href="https://en.wikipedia.org/wiki/Command–query_separation" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Command–query_separation</a>)</p><p>일반적으로 비즈니스 로직은 특정 엔티티의 생성 또는 수정 등과 같이 한정된 작업을 수행하기 때문에 성능 문제가 크게 나타나지 않습니다. 그러나 복잡한 화면을 구성하는 쿼리의 경우, 화면에 맞게 성능을 최적화하는 것이 중요하며, 이 과정은 종종 복잡해질 수 있습니다. 그러나 이러한 복잡성은 핵심 비즈니스 로직에 크게 영향을 주지 않습니다.</p><p>따라서 대규모이고 복잡한 애플리케이션을 개발하는 경우, 이 두 관심사인 Command와 Query를 명확하게 분리하는 것이 유지보수 관점에서 매우 유용합니다.</p><p>일반적으로 서비스 계층에서 트랜잭션을 유지하며, 이 서비스에서도 지연 로딩을 사용할 수 있습니다. 참고로, 제 개인적인 경험에 따르면, 고객 서비스와 같은 실시간 API에서는 OSIV를 비활성화하고, ADMIN과 같이 데이터베이스 연결을 많이 사용하지 않는 부분에서는 OSIV를 활성화하는 편입니다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpashop-api" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94/dashboard" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링부트-JPA-API개발-성능최적화/dashboard</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Open Session In View: 하이버네이트&lt;br&gt;Open EntityManager In View: JPA&lt;br&gt;
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/categories/JPA/JPA-Optimizaion/"/>
    
    
      <category term="JPA OSIV" scheme="https://jaehyun8719.github.io/tags/JPA-OSIV/"/>
    
      <category term="Open Session In View" scheme="https://jaehyun8719.github.io/tags/Open-Session-In-View/"/>
    
  </entry>
  
  <entry>
    <title>JPA Collection 조회 최적화 2 - 컬렉션 조회, 플랫 데이터 최적화</title>
    <link href="https://jaehyun8719.github.io/2023/06/13/jpa/api-optimization/collection-optimization_2/"/>
    <id>https://jaehyun8719.github.io/2023/06/13/jpa/api-optimization/collection-optimization_2/</id>
    <published>2023-06-12T15:00:00.000Z</published>
    <updated>2023-06-17T13:56:05.653Z</updated>
    
    <content type="html"><![CDATA[<hr><p>API 개발 고급 - collection 조회 최적화 - JPA에서 DTO롤 직접 조회<br><a id="more"></a></p><h2 id="JPA에서-DTO-직접-조회"><a href="#JPA에서-DTO-직접-조회" class="headerlink" title="JPA에서 DTO 직접 조회"></a>JPA에서 DTO 직접 조회</h2><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v4/orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV4</span><span class="params">()</span></span>: List&lt;OrderQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> orderQueryRepository.findOrderQueryDtos()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderQueryRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderQueryRepository</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 컬렉션은 별도로 조회</span></span><br><span class="line"><span class="comment">     * Query: 루트 1번, 컬렉션 N 번</span></span><br><span class="line"><span class="comment">     * 단건 조회에서 많이 사용하는 방식</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findOrderQueryDtos</span><span class="params">()</span></span>: List&lt;OrderQueryDto&gt; &#123;</span><br><span class="line">        <span class="comment">//루트 조회(toOne 코드를 모두 한번에 조회)</span></span><br><span class="line">        <span class="keyword">val</span> result = findOrders()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//루프를 돌면서 컬렉션 추가(추가 쿼리 실행)</span></span><br><span class="line">        result.forEach &#123;</span><br><span class="line">            <span class="keyword">val</span> orderItems = findOrderItems(it.orderId)</span><br><span class="line">            it.orderItems = orderItems</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1:N 관계(컬렉션)를 제외한 나머지를 한번에 조회</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findOrders</span><span class="params">()</span></span>: List&lt;OrderQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select new kotlinbook.jpashop.repository.order.query.OrderQueryDto(o.id, m.name, o.orderDate, o.status, d.address)"</span> +</span><br><span class="line">                    <span class="string">" from Order o"</span> +</span><br><span class="line">                    <span class="string">" join o.member m"</span> +</span><br><span class="line">                    <span class="string">" join o.delivery d"</span>, OrderQueryDto::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).resultList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1:N 관계인 orderItems 조회</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findOrderItems</span><span class="params">(orderId: <span class="type">Long</span>)</span></span>: List&lt;OrderItemQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select new kotlinbook.jpashop.repository.order.query.OrderItemQueryDto(oi.order.id, i.name, oi.orderPrice, oi.count)"</span> +</span><br><span class="line">                    <span class="string">" from OrderItem oi"</span> +</span><br><span class="line">                    <span class="string">" join oi.item i"</span> +</span><br><span class="line">                    <span class="string">" where oi.order.id = : orderId"</span>, OrderItemQueryDto::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).setParameter(<span class="string">"orderId"</span>, orderId).resultList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderQueryDto.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy::class)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderQueryDto</span> </span>(</span><br><span class="line">    <span class="keyword">val</span> orderId: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> orderDate: LocalDateTime, <span class="comment">//주문시간</span></span><br><span class="line">    <span class="keyword">val</span> orderStatus: OrderStatus,</span><br><span class="line">    <span class="keyword">val</span> address: Address,</span><br><span class="line">    <span class="keyword">var</span> orderItems: List&lt;OrderItemQueryDto&gt;? = <span class="literal">null</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>먼저 ‘ToOne(N:1, 1:1)’ 관계를 조회하고, 이후에 ‘ToMany(1:N)’ 관계를 각각 개별적으로 처리하는 전략을 선택했습니다. 이 방식을 선택한 이유는 다음과 같습니다:<br>‘ToOne’ 관계의 경우, 이들을 결합해도 데이터의 행(row) 수가 증가하지 않습니다. 이는 ‘ToOne’ 관계를 결합하여 최적화하는 것이 상대적으로 용이하다는 것을 의미합니다. 따라서 이런 관계들은 한 번에 조회합니다.<br>반면에 ‘ToMany(1:N)’ 관계를 결합하면 데이터의 행 수가 증가하게 됩니다. 이런 경우 최적화하는 것이 어렵기 때문에, findOrderItems()와 같은 별도의 메서드를 이용하여 각각을 조회합니다.</p><h2 id="컬렉션-조회-최적화"><a href="#컬렉션-조회-최적화" class="headerlink" title="컬렉션 조회 최적화"></a>컬렉션 조회 최적화</h2><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v5/orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV5</span><span class="params">()</span></span>: List&lt;OrderQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> orderQueryRepository.findAllByDto_optimization()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderQueryRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderQueryRepository</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 최적화</span></span><br><span class="line"><span class="comment">     * Query: 루트 1번, 컬렉션 1번</span></span><br><span class="line"><span class="comment">     * 데이터를 한꺼번에 처리할 때 많이 사용하는 방식</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllByDto_optimization</span><span class="params">()</span></span>: List&lt;OrderQueryDto&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//루트 조회(toOne 코드를 모두 한번에 조회)</span></span><br><span class="line">        <span class="keyword">val</span> result = findOrders()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//orderItem 컬렉션을 MAP 한방에 조회</span></span><br><span class="line">        <span class="keyword">val</span> orderItemMap = findOrderItemMap(toOrderIds(result))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//루프를 돌면서 컬렉션 추가(추가 쿼리 실행X)</span></span><br><span class="line">        result.forEach &#123; it.orderItems = orderItemMap[it.orderId] &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">toOrderIds</span><span class="params">(result: <span class="type">List</span>&lt;<span class="type">OrderQueryDto</span>&gt;)</span></span>: List&lt;<span class="built_in">Long</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> result.map &#123; it.orderId &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">findOrderItemMap</span><span class="params">(orderIds: <span class="type">List</span>&lt;<span class="type">Long</span>&gt;)</span></span>: Map&lt;<span class="built_in">Long</span>, List&lt;OrderItemQueryDto&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> orderItems = em.createQuery(</span><br><span class="line">            <span class="string">"select new kotlinbook.jpashop.repository.order.query.OrderItemQueryDto(oi.order.id, i.name, oi.orderPrice, oi.count)"</span> +</span><br><span class="line">                    <span class="string">" from OrderItem oi"</span> +</span><br><span class="line">                    <span class="string">" join oi.item i"</span> +</span><br><span class="line">                    <span class="string">" where oi.order.id in :orderIds"</span>, OrderItemQueryDto::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).setParameter(<span class="string">"orderIds"</span>, orderIds).resultList</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderItems.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(OrderItemQueryDto::orderId))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>먼저 ‘ToOne’ 관계를 조회하고, 이 과정에서 얻은 식별자인 ‘orderId’를 이용하여 ‘ToMany’ 관계인 ‘OrderItem’을 한 번에 조회합니다.<br>이 과정에서 ‘MAP’을 사용함으로써 매칭 성능을 향상시킬 수 있습니다. 이는 ‘MAP’의 탐색 시간 복잡도가 O(1)이기 때문입니다.</p><h2 id="플랫-데이터-최적화"><a href="#플랫-데이터-최적화" class="headerlink" title="플랫 데이터 최적화"></a>플랫 데이터 최적화</h2><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v6/orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV6</span><span class="params">()</span></span>: List&lt;OrderQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> flats: List&lt;OrderFlatDto&gt; = orderQueryRepository.findAllByDto_flat()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flats.stream()</span><br><span class="line">            .collect(</span><br><span class="line">                Collectors.groupingBy(&#123;</span><br><span class="line">                        OrderQueryDto(</span><br><span class="line">                            it.orderId,</span><br><span class="line">                            it.name,</span><br><span class="line">                            it.orderDate,</span><br><span class="line">                            it.orderStatus,</span><br><span class="line">                            it.address,</span><br><span class="line">                        )</span><br><span class="line">                    &#125;,</span><br><span class="line">                    Collectors.mapping(&#123;</span><br><span class="line">                            OrderItemQueryDto(</span><br><span class="line">                                it.orderId,</span><br><span class="line">                                it.itemName,</span><br><span class="line">                                it.orderPrice,</span><br><span class="line">                                it.count,</span><br><span class="line">                            )</span><br><span class="line">                        &#125;, Collectors.toList()</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            ).map &#123;</span><br><span class="line">                OrderQueryDto(</span><br><span class="line">                    it.key.orderId,</span><br><span class="line">                    it.key.name,</span><br><span class="line">                    it.key.orderDate,</span><br><span class="line">                    it.key.orderStatus,</span><br><span class="line">                    it.key.address,</span><br><span class="line">                    it.value,</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderQueryDto</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy::class)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderQueryDto</span> </span>(</span><br><span class="line">    <span class="keyword">val</span> orderId: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> orderDate: LocalDateTime, <span class="comment">//주문시간</span></span><br><span class="line">    <span class="keyword">val</span> orderStatus: OrderStatus,</span><br><span class="line">    <span class="keyword">val</span> address: Address,</span><br><span class="line">    <span class="keyword">var</span> orderItems: List&lt;OrderItemQueryDto&gt;? = <span class="literal">null</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderQueryRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderQueryRepository</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">fun</span> <span class="title">findAllByDto_flat</span><span class="params">()</span></span>: List&lt;OrderFlatDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select new kotlinbook.jpashop.repository.order.query.OrderFlatDto(o.id, m.name, o.orderDate, o.status, d.address, i.name, oi.orderPrice, oi.count)"</span> +</span><br><span class="line">                    <span class="string">" from Order o"</span> +</span><br><span class="line">                    <span class="string">" join o.member m"</span> +</span><br><span class="line">                    <span class="string">" join o.delivery d"</span> +</span><br><span class="line">                    <span class="string">" join o.orderItems oi"</span> +</span><br><span class="line">                    <span class="string">" join oi.item i"</span>, OrderFlatDto::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).resultList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderFlatDto</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(value = PropertyNamingStrategies.SnakeCaseStrategy::class)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFlatDto</span></span>(</span><br><span class="line">    <span class="keyword">val</span> orderId: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String, <span class="comment">//주문시간</span></span><br><span class="line">    <span class="keyword">val</span> orderDate: LocalDateTime,</span><br><span class="line">    <span class="keyword">val</span> orderStatus: OrderStatus,</span><br><span class="line">    <span class="keyword">val</span> address: Address,</span><br><span class="line">    <span class="keyword">val</span> itemName: String,</span><br><span class="line">    <span class="keyword">val</span> orderPrice: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> count: <span class="built_in">Int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>이 방식의 단점으로는, 쿼리는 한 번만 실행되지만, 조인 결과로 인해 데이터베이스에서 애플리케이션으로 전달되는 데이터에 중복이 추가될 수 있습니다. 이로 인해 상황에 따라서는 V5 방식보다 성능이 더 느려질 수 있습니다. 또한 애플리케이션에서 추가적인 작업량이 상당히 커집니다. 그리고 이 방식은 페이징이 불가능하다는 점도 단점으로 들 수 있습니다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpashop-api" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94/dashboard" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링부트-JPA-API개발-성능최적화/dashboard</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;API 개발 고급 - collection 조회 최적화 - JPA에서 DTO롤 직접 조회&lt;br&gt;
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/categories/JPA/JPA-Optimizaion/"/>
    
    
      <category term="JPA Optimization" scheme="https://jaehyun8719.github.io/tags/JPA-Optimization/"/>
    
      <category term="Collection Optimization" scheme="https://jaehyun8719.github.io/tags/Collection-Optimization/"/>
    
      <category term="flat data Optimization" scheme="https://jaehyun8719.github.io/tags/flat-data-Optimization/"/>
    
  </entry>
  
  <entry>
    <title>JPA Collection 조회 최적화 1 - Fetch Join, 페이징, 지연 로딩</title>
    <link href="https://jaehyun8719.github.io/2023/06/03/jpa/api-optimization/collection-optimization_1/"/>
    <id>https://jaehyun8719.github.io/2023/06/03/jpa/api-optimization/collection-optimization_1/</id>
    <published>2023-06-02T15:00:00.000Z</published>
    <updated>2023-06-17T13:56:05.654Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>API 개발 고급 - collection 조회 최적화 - 엔티티를 DTO로 변환<br>collection인 일대다 관계(OneToMany)를 조회하고, 최적화하는 방법<a id="more"></a></li></ul><h2 id="fetch-join-최적화"><a href="#fetch-join-최적화" class="headerlink" title="fetch join 최적화"></a>fetch join 최적화</h2><figure class="highlight kotlin"><figcaption><span>Order.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"order_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> orderDate: LocalDateTime? = <span class="literal">null</span>, <span class="comment">//주문시간</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">var</span> status: OrderStatus? = <span class="literal">null</span>, <span class="comment">//주문상태 [ORDER, CANCEL]</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"order"</span>, cascade = [CascadeType.ALL])</span></span><br><span class="line">    <span class="keyword">var</span> orderItems: MutableList&lt;OrderItem&gt; = ArrayList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v3/orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV3</span><span class="params">()</span></span>: List&lt;OrderDto&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> orders: List&lt;Order&gt; = orderRepository.findAllWithItem()</span><br><span class="line">        <span class="keyword">return</span> orders.stream()</span><br><span class="line">            .map&#123; it.toDto() &#125;</span><br><span class="line">            .collect(Collectors.toList())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDto</span></span>(</span><br><span class="line">        <span class="keyword">val</span> orderId: <span class="built_in">Long</span>?,</span><br><span class="line">        <span class="keyword">val</span> name: String?,</span><br><span class="line">        <span class="keyword">val</span> orderDate: LocalDateTime?,</span><br><span class="line">        <span class="keyword">val</span> orderStatus: OrderStatus?,</span><br><span class="line">        <span class="keyword">val</span> address: Delivery?,</span><br><span class="line">        <span class="keyword">val</span> orderItems: List&lt;OrderItemDto&gt;? = <span class="literal">null</span>,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span></span>(</span><br><span class="line">    <span class="meta">@PersistenceContext</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllWithItem</span><span class="params">()</span></span>: List&lt;Order&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select distinct o from Order o"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.member m"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.delivery d"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.orderItems oi"</span> +</span><br><span class="line">                    <span class="string">" join fetch oi.item i"</span>, Order::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).resultList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fetch-join-과-SQL의-효율성"><a href="#fetch-join-과-SQL의-효율성" class="headerlink" title="fetch join 과 SQL의 효율성"></a>fetch join 과 SQL의 효율성</h3><p>fetch join은 SQL 쿼리가 한 번만 실행되도록 하여 성능을 개선하는 기법이다. 이 방법은 주로 1대다 관계(@oneToMany)의 조인에서 유용하게 사용된다. 그러나 이 방식을 사용하면 데이터베이스 row가 증가하는 결과, 같은 엔티티의 조회 수도 증가하게 된다.<br>이러한 문제를 해결하기 위해 JPA의 <code>distinct</code>를 사용한다. <code>distinct</code>는 SQL에 <code>distinct</code>를 추가하고, 더 나아가 같은 엔티티가 조회될 경우 애플리케이션에서 중복을 걸러주는 역할을 한다. 이는 collection fetch join으로 인해 중복 조회가 발생하는 경우를 방지해준다.</p><h3 id="fetch-join의-단점"><a href="#fetch-join의-단점" class="headerlink" title="fetch join의 단점"></a>fetch join의 단점</h3><p>그러나 fetch join에도 주의해야 할 점이 있다. 가장 중요한 것은 <code>페이징이 불가능하다</code>는 것이다. collection fetch join을 사용하게 되면, 하이버네이트는 경고 로그를 남기면서 모든 데이터를 데이터베이스에서 읽어온 후 <code>메모리에서 페이징</code>을 진행한다. 이는 매우 위험한 상황을 초래할 수 있다.<br>또한 collection fecth join은 한 번에 하나의 collection에만 사용해야 한다. 여러 collection에 fetch join을 사용하면 데이터가 부정합하게 조회될 수 있다.</p><p>fetch join은 SQL 쿼리의 효율성을 크게 높일 수 있는 강력한 도구이다. 그러나 페이징 불가능, 한 번에 하나의 collection에만 사용 가능 등의 제약사항을 반드시 이해하고 사용해야 한다. 이러한 주의사항을 유념하며, fetch join을 통해 효율적인 SQL 쿼리를 작성하는 방법을 사용 해야 한다.</p><h2 id="페이징-한계-돌파"><a href="#페이징-한계-돌파" class="headerlink" title="페이징 한계 돌파"></a>페이징 한계 돌파</h2><figure class="highlight kotlin"><figcaption><span>OrderRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span></span>(</span><br><span class="line">    <span class="meta">@PersistenceContext</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllWithMemberDelivery</span><span class="params">(offset: <span class="type">Int</span>, limit: <span class="type">Int</span>)</span></span>: List&lt;Order&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select o from Order o"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.member m"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.delivery d"</span>, Order::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).setFirstResult(offset)</span><br><span class="line">            .setMaxResults(limit)</span><br><span class="line">            .resultList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v3.1/orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV3_page</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestParam(value = <span class="meta-string">"offset"</span>, defaultValue = <span class="meta-string">"0"</span>)</span> offset: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@RequestParam(value = <span class="meta-string">"limit"</span>, defaultValue = <span class="meta-string">"100"</span>)</span> limit: <span class="type">Int</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: List&lt;OrderDto&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> orders: List&lt;Order&gt; = orderRepository.findAllWithMemberDelivery(offset, limit)</span><br><span class="line">        <span class="keyword">return</span> orders.stream()</span><br><span class="line">            .map&#123; it.toDto() &#125;</span><br><span class="line">            .collect(Collectors.toList())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDto</span></span>(</span><br><span class="line">        <span class="keyword">val</span> orderId: <span class="built_in">Long</span>?,</span><br><span class="line">        <span class="keyword">val</span> name: String?,</span><br><span class="line">        <span class="keyword">val</span> orderDate: LocalDateTime?,</span><br><span class="line">        <span class="keyword">val</span> orderStatus: OrderStatus?,</span><br><span class="line">        <span class="keyword">val</span> address: Delivery?,</span><br><span class="line">        <span class="keyword">val</span> orderItems: List&lt;OrderItemDto&gt;? = <span class="literal">null</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItemDto</span></span>(</span><br><span class="line">        <span class="keyword">val</span> itemName: String?, <span class="comment">//상품 명</span></span><br><span class="line">        <span class="keyword">val</span> orderPrice: <span class="built_in">Int</span>, <span class="comment">//주문 가격</span></span><br><span class="line">        <span class="keyword">val</span> count: <span class="built_in">Int</span>, <span class="comment">//주문 수량</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>application.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">   jpa:</span><br><span class="line">     properties:</span><br><span class="line">       hibernate:</span><br><span class="line">         default_batch_fetch_size: <span class="number">500</span></span><br></pre></td></tr></table></figure><h3 id="페이징과-collection-fetch-join의-문제점"><a href="#페이징과-collection-fetch-join의-문제점" class="headerlink" title="페이징과 collection fetch join의 문제점"></a>페이징과 collection fetch join의 문제점</h3><p>collection을 fetch join하면 일대다 조인(OneToMany)이 발생하기 때문에 데이터가 예측할 수 없이 증가한다. 이는 페이징 처리에 큰 장애물이 된다. 이 때문에 하이버네이트는 경고 로그를 남기며 모든 데이터를 데이터베이스에서 읽어 메모리에서 페이징을 시도한다. 이런 상황은 최악의 경우 시스템 장애를 일으킬 수 있다.<br>(Order와 OrderItem을 조인하면 Order가 OrderItem 만큼 중복해서 조회된다. SQL Join 쿼리 실행)</p><h3 id="한계-돌파-방안"><a href="#한계-돌파-방안" class="headerlink" title="한계 돌파 방안"></a>한계 돌파 방안</h3><p>그렇다면 페이징과 collection 엔티티를 함께 조회하려면 어떻게 해야 할까? 다음은 이 문제를 해결하는 강력한 방법을 제시한다.</p><ol><li><code>ToOne(OneToOne, ManyToOne)</code> 관계는 모두 fetch join 한다. <code>ToOne</code> 관계는 row 수를 증가시키지 않으므로 페이징 쿼리에 영향을 주지 않는다.</li><li>collection은 지연(Lazy) 로딩으로 조회한다.</li><li>지연 로딩 성능 최적화를 위해 <code>hibernate.default_batch_fetch_size</code>, <code>@BatchSize</code>를 적용한다. 이 옵션을 사용하면 collection이나 프록시 객체를 한꺼번에 설정한 size만큼 IN 쿼리로 조회한다.<ul><li>hibernate.default_batch_fetch_size: 글로벌 설정</li><li>@BatchSize: 개별 최적화</li></ul></li></ol><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><p>이 방법을 사용하면 쿼리 호출 수가 1+N에서 1+1로 최적화된다. 또한, 조인보다 데이터베이스 데이터 전송량이 최적화된다. 이는 각각 조회하므로 전송해야 할 중복 데이터가 없기 때문이다. 또한 collection fetch join이 페이징이 불가능한 것과 대조적으로 이 방법은 페이징이 가능하다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p><code>ToOne</code> 관계는 fetch join해도 페이징에 영향을 주지 않는다. 따라서 <code>ToOne</code> 관계는 fetch join으로 쿼리 수를 줄이고,<br>나머지는 <code>hibernate.default_batch_fetch_size</code>로 최적화하는 것이 바람직하다. <code>default_batch_fetch_size</code>의 크기는 적당한 사이즈를 골라야 한다. 대체로 100~1000 사이를 선택하는 것을 권장하며, 이 값은 데이터베이스의 IN 절 파라미터 제한, 순간적인 부하 용량 등을 고려하여 결정하면 좋다.<br>이러한 방법을 통해 페이징과 collection fetch join의 한계를 돌파하고, 데이터베이스 성능을 최적화할 수 있다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpashop-api" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94/dashboard" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링부트-JPA-API개발-성능최적화/dashboard</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;API 개발 고급 - collection 조회 최적화 - 엔티티를 DTO로 변환&lt;br&gt;collection인 일대다 관계(OneToMany)를 조회하고, 최적화하는 방법
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/categories/JPA/JPA-Optimizaion/"/>
    
    
      <category term="JPA Optimization" scheme="https://jaehyun8719.github.io/tags/JPA-Optimization/"/>
    
      <category term="fetch join" scheme="https://jaehyun8719.github.io/tags/fetch-join/"/>
    
      <category term="Collection Optimization" scheme="https://jaehyun8719.github.io/tags/Collection-Optimization/"/>
    
      <category term="oneToMany Paging" scheme="https://jaehyun8719.github.io/tags/oneToMany-Paging/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 지연 로딩과 조회 성능 최적화</title>
    <link href="https://jaehyun8719.github.io/2023/05/27/jpa/api-optimization/lazyloadng-optimization/"/>
    <id>https://jaehyun8719.github.io/2023/05/27/jpa/api-optimization/lazyloadng-optimization/</id>
    <published>2023-05-26T15:00:00.000Z</published>
    <updated>2023-06-17T13:56:14.915Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>API 개발 고급 - 지연 로딩과 조회 성능 최적화<a id="more"></a></li></ul><h2 id="엔티티를-직접-노출"><a href="#엔티티를-직접-노출" class="headerlink" title="엔티티를 직접 노출"></a>엔티티를 직접 노출</h2><p>xToOne 관계에 대해서<br>Order<br>Order -&gt; Member<br>Order -&gt; Devlivery</p><figure class="highlight kotlin"><figcaption><span>Order.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"order_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> orderDate: LocalDateTime? = <span class="literal">null</span>, <span class="comment">//주문시간</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">var</span> status: OrderStatus? = <span class="literal">null</span>, <span class="comment">//주문상태 [ORDER, CANCEL]</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"member_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> member: Member? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"order"</span>, cascade = [CascadeType.ALL])</span></span><br><span class="line">    <span class="keyword">var</span> orderItems: MutableList&lt;OrderItem&gt; = ArrayList()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(fetch = FetchType.LAZY, cascade = [CascadeType.ALL])</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"delivery_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> delivery: Delivery? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderSimpleApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderSimpleApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderSimpleQueryRepository: OrderSimpleQueryRepository <span class="comment">//의존관계 주입</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * V1. 엔티티 직접 노출</span></span><br><span class="line"><span class="comment">     * - Hibernate5Module 모듈 등록, LAZY=null 처리</span></span><br><span class="line"><span class="comment">     * - 양방향 관계 문제 발생 -&gt; <span class="doctag">@JsonIgnore</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v1/simple-orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV1</span><span class="params">()</span></span>: List&lt;Order&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> all: List&lt;Order&gt; = orderRepository.findAllByString(OrderSearch())</span><br><span class="line">        <span class="keyword">for</span> (order <span class="keyword">in</span> all) &#123;</span><br><span class="line">            order.member?.name <span class="comment">//Lazy 강제 초기화</span></span><br><span class="line">            order.delivery?.address<span class="comment">//Lazy 강제 초기화</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> all</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>애플리케이션을 구축하는 과정에서 데이터의 적절한 관리와 표현은 중요한 역할을 한다.<br>이에 대한 관점 중 하나는 엔티티를 API 응답으로 직접 노출하는 것에 대한 경계하는 것이고, 무조건적으로 엔티티를 API 응답으로 반환하는 것은 좋지 않은 방법으로 여겨진다.<br>물론, 간단한 애플리케이션에서는 이를 그대로 사용할 수도 있겠지만, Hibernate5Module 같은 도구를 이용하는 것 보다는 DTO(Data Transfer Object)로 변환하여 반환하는 것이 더 바람직하다.<br>(Hibernate5Module 실제 업무에서 DTO로 사용해서 사용할 일이 없을것)</p><p>DTO는 일종의 정보 가방으로, 필요한 정보만 담아서 전송하며 데이터의 과도한 노출을 막아주는 역할을 한다. 이를 통해, 필요한 데이터만 클라이언트에게 제공함으로써 API의 응답을 보다 적절하게 관리할 수 있다.</p><p>또한, 데이터의 로딩 방식에 대한 고려도 중요하다. 데이터베이스로부터 데이터를 로딩하는 방법에는 주로 ‘즉시 로딩(Eager Loading)’과 ‘지연 로딩(Lazy Loading)’ 두 가지가 있다.<br>즉시 로딩은 연관된 데이터를 모두 한 번에 조회하는 방법으로, 연관 관계가 없는 경우에도 데이터를 항상 조회하게 되어 성능 문제를 일으킬 수 있다. 반면, 지연 로딩은 데이터가 실제로 사용될 때까지 로딩을 지연시키는 방식으로, 불필요한 데이터 로딩을 최소화하여 성능을 향상시키는 효과를 가진다.</p><p>따라서, 기본적으로는 지연 로딩을 사용하되, 성능 최적화가 필요한 경우에만 ‘페치 조인(fetch join)’과 같은 기법을 활용하는 것이 바람직하다. 페치 조인은 SQL의 JOIN 기능을 활용하여 필요한 정보만을 한 번의 쿼리로 가져오는 방법으로, 성능 튜닝에 유용하다.</p><p>결론적으로, 애플리케이션의 복잡성이 증가함에 따라 엔티티의 직접 노출을 최소화하고, 로딩 전략을 적절하게 관리하는 것이 중요하다. 이를 위해 DTO를 활용하고, 지연 로딩을 기본으로 하며, 필요한 경우 페치 조인을 활용하는 방법을 고려해야 한다.</p><h2 id="엔티티를-DTO로-변환"><a href="#엔티티를-DTO로-변환" class="headerlink" title="엔티티를 DTO로 변환"></a>엔티티를 DTO로 변환</h2><figure class="highlight kotlin"><figcaption><span>Order.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"order_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> orderDate: LocalDateTime? = <span class="literal">null</span>, <span class="comment">//주문시간</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">var</span> status: OrderStatus? = <span class="literal">null</span>, <span class="comment">//주문상태 [ORDER, CANCEL]</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"member_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> member: Member? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"order"</span>, cascade = [CascadeType.ALL])</span></span><br><span class="line">    <span class="keyword">var</span> orderItems: MutableList&lt;OrderItem&gt; = ArrayList()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne(fetch = FetchType.LAZY, cascade = [CascadeType.ALL])</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"delivery_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> delivery: Delivery? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">toDto</span><span class="params">()</span></span>: OrderApiController.OrderDto &#123;</span><br><span class="line">        <span class="keyword">return</span> OrderApiController.OrderDto(</span><br><span class="line">            orderId = <span class="keyword">this</span>.id,</span><br><span class="line">            name = <span class="keyword">this</span>.member?.name,</span><br><span class="line">            orderDate = <span class="keyword">this</span>.orderDate, <span class="comment">//주문시간</span></span><br><span class="line">            orderStatus = <span class="keyword">this</span>.status,</span><br><span class="line">            address = <span class="keyword">this</span>.delivery,</span><br><span class="line">            orderItems = <span class="keyword">this</span>.orderItems.map &#123; it.toDto() &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v2/orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV2</span><span class="params">()</span></span>: List&lt;OrderDto&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> orders: List&lt;Order&gt; = orderRepository.findAll()</span><br><span class="line">        <span class="keyword">return</span> orders.map&#123; it.toDto() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDto</span></span>(</span><br><span class="line">        <span class="keyword">val</span> orderId: <span class="built_in">Long</span>?,</span><br><span class="line">        <span class="keyword">val</span> name: String?,</span><br><span class="line">        <span class="keyword">val</span> orderDate: LocalDateTime?,</span><br><span class="line">        <span class="keyword">val</span> orderStatus: OrderStatus?,</span><br><span class="line">        <span class="keyword">val</span> address: Delivery?,</span><br><span class="line">        <span class="keyword">val</span> orderItems: List&lt;OrderItemDto&gt;? = <span class="literal">null</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엔티티를 DTO로 변환하는 일반적인 방법을 통해 데이터베이스에서 데이터를 조회하는 과정은, 대체로 1 + N + N 번의 쿼리가 실행된다.</p><p>먼저, order를 조회하는 쿼리가 1번 실행된다. 이로 인해 반환된 order의 개수가 N이 된다.<br>이어서 각 order에 연관된 member를 조회한다. 이 때는 지연 로딩(Lazy Loading)이 적용되어, order의 개수(N)만큼 쿼리가 실행된다.<br>마찬가지로, 각 order에 연관된 delivery 정보도 조회하게 된다. 이 경우에도 지연 로딩이 적용되어 N번의 쿼리가 추가로 실행된다.<br>예를 들어, order의 결과가 4개인 경우, 최악의 경우에는 1(처음 order 조회) + 4(order에서 member 조회) + 4(order에서 delivery 조회) = 9번의 쿼리가 실행될 수 있다.</p><p>하지만 지연 로딩의 특성상, 영속성 컨텍스트에서 이미 조회된 데이터에 대해서는 쿼리를 실행하지 않고, 중복된 쿼리 실행을 방지하므로 성능 최적화에 중요한 역할을 한다.</p><p>요약하면, 엔티티를 DTO로 변환하는 일반적인 방법을 사용하면서도, 지연 로딩의 원리를 이해하고 활용하면, 데이터베이스에서 필요한 데이터만 효율적으로 조회하면서 성능을 최적화할 수 있다.</p><h2 id="엔티티를-DTO로-변환-페치-조인-최적화"><a href="#엔티티를-DTO로-변환-페치-조인-최적화" class="headerlink" title="엔티티를 DTO로 변환 - 페치 조인 최적화"></a>엔티티를 DTO로 변환 - 페치 조인 최적화</h2><figure class="highlight kotlin"><figcaption><span>OrderApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderQueryRepository: OrderQueryRepository,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v3/simple-orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV3</span><span class="params">()</span></span>: List&lt;OrderApiController.OrderDto&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> orders: List&lt;Order&gt; = orderRepository.findAllWithMemberDelivery()</span><br><span class="line">        <span class="keyword">return</span> orders.map&#123; it.toDto() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderRepository</span></span>(</span><br><span class="line">    <span class="meta">@PersistenceContext</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllWithMemberDelivery</span><span class="params">(offset: <span class="type">Int</span>, limit: <span class="type">Int</span>)</span></span>: List&lt;Order&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select o from Order o"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.member m"</span> +</span><br><span class="line">                    <span class="string">" join fetch o.delivery d"</span>, Order::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).setFirstResult(offset)</span><br><span class="line">            .setMaxResults(limit)</span><br><span class="line">            .resultList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>페치 조인(fetch join)은 SQL의 JOIN 연산을 활용하여 관련 있는 여러 테이블의 데이터를 한 번의 쿼리로 모두 가져오는 기법이다. 이 기법을 이용하면, 연관된 엔티티를 한번의 쿼리로 조회할 수 있다.</p><p>예를 들어, order 엔티티에 연관된 member와 delivery 엔티티를 조회할 경우, 페치 조인을 사용하면 order -&gt; member, order -&gt; delivery 관계를 한 번의 쿼리로 조회할 수 있다. 이 방식을 사용하면, 각각의 엔티티를 따로 조회하는 지연 로딩(Lazy Loading)이 아닌 즉시 로딩(Eager Loading)이 가능하게 된다.</p><p>따라서, 페치 조인은 특정 엔티티와 그것과 연관된 엔티티들을 한번에 조회할 수 있어, 쿼리 실행 횟수를 줄이고, 성능 최적화에 크게 기여한다. 이 방식은 이미 조회된 상태이므로 추가적인 지연 로딩이 발생하지 않는다.</p><p>요약하면, 페치 조인을 활용하면, 한 번의 쿼리로 연관된 여러 엔티티를 함께 조회할 수 있어, 데이터 접근 효율을 높이고 성능 최적화에 기여할 수 있다.</p><h2 id="JPA에서-DTO로-바로-조회"><a href="#JPA에서-DTO로-바로-조회" class="headerlink" title="JPA에서 DTO로 바로 조회"></a>JPA에서 DTO로 바로 조회</h2><figure class="highlight kotlin"><figcaption><span>OrderSimpleApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderSimpleApiController</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> orderSimpleQueryRepository: OrderSimpleQueryRepository <span class="comment">//의존관계 주입</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/api/v4/simple-orders"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ordersV4</span><span class="params">()</span></span>: List&lt;OrderSimpleQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> orderSimpleQueryRepository.findOrderDtos()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>OrderSimpleQueryRepository.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderSimpleQueryRepository</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager,</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findOrderDtos</span><span class="params">()</span></span>: List&lt;OrderSimpleQueryDto&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> em.createQuery(</span><br><span class="line">            <span class="string">"select new kotlinbook.jpashop.repository.order.simplequery.OrderSimpleQueryDto(o.id, m.name, o.orderDate, o.status, d.address)"</span> +</span><br><span class="line">                    <span class="string">" from Order o"</span> +</span><br><span class="line">                    <span class="string">" join o.member m"</span> +</span><br><span class="line">                    <span class="string">" join o.delivery d"</span>, OrderSimpleQueryDto::<span class="class"><span class="keyword">class</span>.<span class="title">java</span></span></span><br><span class="line">        ).resultList</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일반적인 SQL 사용 시에는 원하는 값만을 선택하여 조회하는 것이 가능하다. 이를 JPQL에서도 구현할 수 있으며, 결과를 DTO로 즉시 변환하는 데에 new 명령어를 사용한다.</p><p>SELECT 절에서 원하는 데이터를 직접 선택하므로, 필요한 데이터만을 조회하여 DB와 애플리케이션 사이의 네트워크 용량을 최적화한다. 이는 데이터 전송량을 줄이고 성능을 향상시키는데 기여한다. 그러나 실제로 이 방식이 가져다주는 이점은 상대적으로 미비할 수 있다.</p><p>다만, 이 방식의 단점도 존재한다. 리포지토리의 재사용성이 떨어질 수 있고, JPQL을 사용하여 특정 API 스펙에 맞게 데이터를 선택하다보면, 이런 코드가 리포지토리에 포함되게 되는데, 이로 인해 다른 곳에서 해당 리포지토리를 재활용하는 것이 어렵게 된다.</p><p>요약하면, JPQL을 사용하여 원하는 데이터만 선택하여 조회하고, new 명령어를 통해 결과를 즉시 DTO로 변환하는 방식은 성능 최적화와 네트워크 용량 절약에 도움이 될 수 있지만, 리포지토리의 재사용성이 떨어지는 단점도 함께 고려해야 한다.</p><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p>엔티티를 DTO로 변환하는 방법과 DTO로 바로 조회하는 방법, 이 두 가지 방식은 각각의 장점과 단점을 가지고 있다. 따라서, 상황에 따라 가장 효과적인 방법을 선택하는 것이 중요하다</p><p>엔티티를 직접 조회하는 방법을 사용하면, 리포지토리의 재사용성이 향상되고 개발 과정도 상대적으로 간결해진다. 이런 장점 때문에 일반적으로는 엔티티를 직접 조회하는 방법을 권장하고 있다. 하지만 이는 상황에 따라 달라질 수 있으므로, 개발자는 항상 해당 상황에 최적화된 방법을 고려하며 선택해야 한다.</p><h2 id="쿼리-방식-선택-권장-순서"><a href="#쿼리-방식-선택-권장-순서" class="headerlink" title="쿼리 방식 선택 권장 순서"></a>쿼리 방식 선택 권장 순서</h2><p>데이터 조회에 대한 쿼리 방식 선택은 일반적으로 다음과 같은 순서를 따르는 것이 권장된다.</p><ol><li>엔티티를 DTO로 변환: 이 방법을 우선적으로 고려한다. 엔티티를 DTO로 변환하는 방법은 개발 과정을 간결하게 하고, 리포지토리의 재사용성을 높이는 장점이 있다.</li><li>페치 조인 활용: 필요한 경우, 페치 조인(fetch join)을 이용하여 성능을 최적화한다. 페치 조인을 통해 관련된 엔티티를 한 번의 쿼리로 조회하여, 쿼리 실행 횟수를 줄이는 데 도움이 된다.</li><li>DTO 직접 조회: 페치 조인을 활용하여도 성능이 충분히 최적화되지 않는다면, DTO로 직접 조회하는 방법을 고려한다. 이는 특정 API 스펙에 맞게 데이터를 직접 선택하므로, 불필요한 데이터 조회를 줄일 수 있다.</li><li>네이티브 SQL이나 스프링 JDBC Template 활용: 위의 모든 방법이 적절한 해결책을 제공하지 못하는 경우에는, JPA가 제공하는 네이티브 SQL이나 스프링의 JDBC Template를 사용하여 SQL을 직접 사용하는 것을 고려한다.</li></ol><p>이렇게 쿼리 방식 선택의 권장 순서를 따르면, 상황에 따라 가장 적합한 방법을 선택하면서 성능을 최적화할 수 있다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpashop-api" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94/dashboard" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링부트-JPA-API개발-성능최적화/dashboard</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;API 개발 고급 - 지연 로딩과 조회 성능 최적화
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/categories/JPA/JPA-Optimizaion/"/>
    
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/tags/JPA-Optimizaion/"/>
    
      <category term="fetch join" scheme="https://jaehyun8719.github.io/tags/fetch-join/"/>
    
  </entry>
  
  <entry>
    <title>JPA - API 개발과 성능 최적화</title>
    <link href="https://jaehyun8719.github.io/2023/03/30/jpa/api-optimization/basic/"/>
    <id>https://jaehyun8719.github.io/2023/03/30/jpa/api-optimization/basic/</id>
    <published>2023-03-29T15:00:00.000Z</published>
    <updated>2023-06-17T13:56:05.688Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>API 개발 기본 - 회원 등록, 수정, 조회 API<a id="more"></a></li></ul><h2 id="회원-등록-API"><a href="#회원-등록-API" class="headerlink" title="회원 등록 API"></a>회원 등록 API</h2><h3 id="등록-v1-엔티티를-Request-Body에-직접-매핑"><a href="#등록-v1-엔티티를-Request-Body에-직접-매핑" class="headerlink" title="등록 v1 엔티티를 Request Body에 직접 매핑"></a>등록 v1 엔티티를 Request Body에 직접 매핑</h3><figure class="highlight kotlin"><figcaption><span>MemberApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/api/v1/members"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">saveMemberV1</span><span class="params">(<span class="meta">@RequestBody</span> member: @<span class="type">Valid</span> <span class="type">Member</span>)</span></span>: CreateMemberResponse &#123;</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Long</span> = memberService.join(member)</span><br><span class="line">    <span class="keyword">return</span> CreateMemberResponse(id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: T</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateMemberRequest</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateMemberResponse</span></span>(</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Long</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>요청 값으로 Member 엔티티를 직접 받는다.</p><h3 id="문제점"><a href="#문제점" class="headerlink" title="문제점"></a>문제점</h3><ul><li>엔티티에 프레젠테이션 계층을 위한 로직이 추가된다.</li><li>엔티티에 API 검증을 위한 로직이 들어간다. (@NotEmpty 등등)</li><li>실무에서는 회원 엔티티를 위한 API가 다양하게 만들어지는데, 한 엔티티에 각각의 API를 위한 모든 요청 요구사항을 담기는 어렵다.</li><li>엔티티가 변경되면 API 스펙이 변한다.</li></ul><h3 id="등록-v2-엔티티-대신에-DTO를-RequestBody에-매핑"><a href="#등록-v2-엔티티-대신에-DTO를-RequestBody에-매핑" class="headerlink" title="등록 v2 엔티티 대신에 DTO를 RequestBody에 매핑"></a>등록 v2 엔티티 대신에 DTO를 RequestBody에 매핑</h3><figure class="highlight kotlin"><figcaption><span>MemberApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(<span class="meta-string">"/api/v2/members"</span>)</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">saveMemberV2</span><span class="params">(<span class="meta">@RequestBody</span> request: @<span class="type">Valid</span> <span class="type">CreateMemberRequest</span>)</span></span>: CreateMemberResponse &#123;</span><br><span class="line">      <span class="keyword">val</span> member = Member(</span><br><span class="line">          name = request.name</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> id: <span class="built_in">Long</span> = memberService.join(member)</span><br><span class="line">      <span class="keyword">return</span> CreateMemberResponse(id)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>CreateMemberRequest</code> 를 <code>Member</code> 엔티티 대신에 RequestBody와 매핑한다.</li><li>엔티티와 프레젠테이션 계층을 위한 로직을 분리할 수 있다.</li><li>엔티티와 API 스펙을 명확하게 분리할 수 있다.</li><li>엔티티가 변해도 API 스펙이 변하지 않는다.</li></ul><h3 id="해결방법"><a href="#해결방법" class="headerlink" title="해결방법"></a>해결방법</h3><p>등록 v2와 같이 API 요청 스펙에 맞추어 별도의 DTO를 파라미터로 받는다.<br>실무에서는 절대로 엔티티를 API 스펙에 노출하면 안된다.</p><h2 id="회원-수정-API"><a href="#회원-수정-API" class="headerlink" title="회원 수정 API"></a>회원 수정 API</h2><figure class="highlight kotlin"><figcaption><span>MemberApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(<span class="meta-string">"/api/v2/members/&#123;id&#125;"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">updateMemberV2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> id: <span class="type">Long</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@RequestBody</span> request: @<span class="type">Valid</span> <span class="type">UpdateMemberRequest</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: UpdateMemberResponse &#123;</span><br><span class="line">    memberService.update(id, request.name)</span><br><span class="line">    <span class="keyword">val</span> findMember = memberService.findOne(id)</span><br><span class="line">    <span class="keyword">return</span> UpdateMemberResponse(findMember.id!!, findMember.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateMemberRequest</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateMemberResponse</span></span>(</span><br><span class="line">    <span class="keyword">val</span> id: <span class="built_in">Long</span>,</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>변경 감지를 사용해서 데이터 수정</p><figure class="highlight kotlin"><figcaption><span>MemberService.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberService</span></span>(</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> <span class="keyword">val</span> memberRepository: MemberRepository,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">update</span><span class="params">(id: <span class="type">Long</span>, name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member = memberRepository.findOne(id)</span><br><span class="line">        member.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="회원-조회-API"><a href="#회원-조회-API" class="headerlink" title="회원 조회 API"></a>회원 조회 API</h2><h3 id="조회-v1-응답-값으로-엔티티를-직접-외부에-노출"><a href="#조회-v1-응답-값으로-엔티티를-직접-외부에-노출" class="headerlink" title="조회 v1 응답 값으로 엔티티를 직접 외부에 노출"></a>조회 v1 응답 값으로 엔티티를 직접 외부에 노출</h3><figure class="highlight kotlin"><figcaption><span>MemberApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/api/v1/members"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">membersV1</span><span class="params">()</span></span>: List&lt;Member&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> memberService.findMembers()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="문제점-1"><a href="#문제점-1" class="headerlink" title="문제점"></a>문제점</h3><ul><li>엔티티에 프레젠테이션 계층을 위한 로직이 추가된다.</li><li>기본적으로 엔티티의 모든 값이 노출된다.</li><li>응답 스펙을 맞추기 위해 로직이 추가된다. (@JsonIgnore, 별도의 뷰 로직 등등)</li><li>실무에서는 같은 엔티티에 대해 API가 용도에 따라 다양하게 만들어지는데, 한 엔티티에 각각의 API를 위한 프레젠테이션 응답 로직을 담기는 어렵다.</li><li>엔티티가 변경되면 API 스펙이 변한다.</li><li>추가로 컬렉션을 직접 반환하면 항후 API 스펙을 변경하기 어렵다.(별도의 Result 클래스 생성으로 해결)</li></ul><h3 id="조회-v2-응답-값으로-엔티티가-아닌-별도의-DTO-사용"><a href="#조회-v2-응답-값으로-엔티티가-아닌-별도의-DTO-사용" class="headerlink" title="조회 v2 응답 값으로 엔티티가 아닌 별도의 DTO 사용"></a>조회 v2 응답 값으로 엔티티가 아닌 별도의 DTO 사용</h3><figure class="highlight kotlin"><figcaption><span>MemberApiController.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(<span class="meta-string">"/api/v2/members"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">membersV2</span><span class="params">()</span></span>: Result&lt;List&lt;MemberDto&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> findMembers = memberService.findMembers()</span><br><span class="line">    <span class="comment">//엔티티 -&gt; DTO 변환</span></span><br><span class="line">    <span class="keyword">val</span> collect = findMembers.map &#123; MemberDto(it.name) &#125;</span><br><span class="line">    <span class="keyword">return</span> Result(collect)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="type">T</span>&gt;</span>(</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span>: T</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDto</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>엔티티를 DTO로 변환해서 반환한다.</li><li>엔티티가 변해도 API 스펙이 변경되지 않는다.</li><li>추가로 <code>Result</code> 클래스로 컬렉션을 감싸서 향후 필요한 필드를 추가할 수 있다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpashop-api" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8-JPA-API%EA%B0%9C%EB%B0%9C-%EC%84%B1%EB%8A%A5%EC%B5%9C%EC%A0%81%ED%99%94/dashboard" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/스프링부트-JPA-API개발-성능최적화/dashboard</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;API 개발 기본 - 회원 등록, 수정, 조회 API
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/categories/JPA/JPA-Optimizaion/"/>
    
    
      <category term="JPA Optimizaion" scheme="https://jaehyun8719.github.io/tags/JPA-Optimizaion/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 임베디드(embedded) 타입</title>
    <link href="https://jaehyun8719.github.io/2023/01/09/jpa/basic/embedded-type/"/>
    <id>https://jaehyun8719.github.io/2023/01/09/jpa/basic/embedded-type/</id>
    <published>2023-01-08T15:00:00.000Z</published>
    <updated>2023-01-09T13:14:22.817Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>기본값 타입</li><li>임베디드 타입(embedded type, 복합 값 타입)<a id="more"></a></li></ul><h2 id="기본값-타입"><a href="#기본값-타입" class="headerlink" title="기본값 타입"></a>기본값 타입</h2><h3 id="JPA의-데이터-타입-분류"><a href="#JPA의-데이터-타입-분류" class="headerlink" title="JPA의 데이터 타입 분류"></a>JPA의 데이터 타입 분류</h3><ul><li>엔티티 타입<ul><li>@Entity로 정의하는 객체</li><li>데이터가 변해도 식별자로 지속해서 추적 가능</li><li>예) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능</li></ul></li><li>값 타입<ul><li>int, integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체</li><li>식별자가 없고 값만 있으므로 변경시 추적 불가</li><li>예) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체</li></ul></li></ul><h3 id="값-타입-분류"><a href="#값-타입-분류" class="headerlink" title="값 타입 분류"></a>값 타입 분류</h3><ul><li>기본값 타입<ul><li>자바 기본 타입(int, double)</li><li>래퍼 클래스(Integer, Long)</li><li>String</li></ul></li><li>임베디드 타입(embedded type, 복합 값 타입)</li><li>컬렉션 값 타입(collection value type)</li></ul><h3 id="기본값-타입-1"><a href="#기본값-타입-1" class="headerlink" title="기본값 타입"></a>기본값 타입</h3><ul><li>예) String name, int age</li><li>생명 주기를 엔티티의 의존<ul><li>예) 회원을 삭제하면 이름, 나이 필드도 함께 삭제</li></ul></li><li>값 타입은 공유하면 X<ul><li>자바의 primitive type은 공유가 안됨</li><li>예) 회원 이름 변경시 다른 회원의 이름도 함께 변경되면 안됨</li></ul></li></ul><h2 id="임베디드-타입-embedded-type-복합-값-타입"><a href="#임베디드-타입-embedded-type-복합-값-타입" class="headerlink" title="임베디드 타입(embedded type, 복합 값 타입)"></a>임베디드 타입(embedded type, 복합 값 타입)</h2><ul><li>새로운 값 타입을 직접 정의할 수 있음</li><li>JPA는 임베디드 타입(embedded type)이라 함</li><li>주로 기본 값 타입을 모아서 만들어서 복합 값 타입이라고도 함</li><li>int, String과 같은 값 타입</li></ul><p>Member는 id, name, workPeriod, homeAddress 4가지 타입을 가지고, Period는 2가지는 타입, Address는 3가지 타입을 가진다.<br><img src="/images/jpa/embedded-type/embedded-type1.png" width="60%"></p><h3 id="임베디드-타입-사용법"><a href="#임베디드-타입-사용법" class="headerlink" title="임베디드 타입 사용법"></a>임베디드 타입 사용법</h3><ul><li>@Embeddable: 값 타입을 정의하는 곳에 표시</li><li>@Embedded: 값 타입을 사용하는 곳에 표시</li><li>기본 생성자 필수</li></ul><h3 id="임베디드-타입의-장점"><a href="#임베디드-타입의-장점" class="headerlink" title="임베디드 타입의 장점"></a>임베디드 타입의 장점</h3><ul><li>재사용</li><li>높은 응집도</li><li>Period.isWork()처럼 해당 값 타입만 사용하는 의미 있는 메소드를 만들 수 있음</li><li>임베디드 타입을 포함한 모든 값 타입은, 값 타입을 소유한 엔티티에 생명 주기를 의존함</li></ul><h3 id="임베디드-타입과-테이블-매핑"><a href="#임베디드-타입과-테이블-매핑" class="headerlink" title="임베디드 타입과 테이블 매핑"></a>임베디드 타입과 테이블 매핑</h3><p><img src="/images/jpa/embedded-type/embedded-type2.png" width="60%"></p><figure class="highlight kotlin"><figcaption><span>Member </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> startDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">var</span> endDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> city: String? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">var</span> street: String? = <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">var</span> zipcode: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Member</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    city <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    street <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    zipcode <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    endDate <span class="built_in">timestamp</span>,</span><br><span class="line">    startDate <span class="built_in">timestamp</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Member 클래스에서 startDate, endDate를 Period로 묶고 city, street, zipcode을 Address로 묶어서 사용하면 다른 곳에서도 사용 가능하다는 장점이 있다.</p><p><img src="/images/jpa/embedded-type/embedded-type3.png" width="60%"></p><figure class="highlight kotlin"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 기간 Period</span></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">var</span> workPeriod: Period? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 주소 address</span></span><br><span class="line">    <span class="meta">@Embedded</span></span><br><span class="line">    <span class="keyword">var</span> homeAddress: Address? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Period</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Period</span></span>(</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> startDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> endDate: LocalDateTime? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Address</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Embeddable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>(</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> city: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> street: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">var</span> zipcode: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">Member</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    city <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    street <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    zipcode <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    username <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    endDate <span class="built_in">timestamp</span>,</span><br><span class="line">    startDate <span class="built_in">timestamp</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> address = Address(<span class="string">"city"</span>, <span class="string">"street"</span>, <span class="string">"1000"</span>)</span><br><span class="line">        <span class="keyword">val</span> period = Period()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> member = Member(</span><br><span class="line">            username = <span class="string">"hello"</span>,</span><br><span class="line">            homeAddress = address,</span><br><span class="line">            workPeriod = period,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* insert entity.Member */</span></span><br><span class="line"><span class="keyword">insert</span> </span><br><span class="line">    <span class="keyword">into</span></span><br><span class="line">        <span class="keyword">Member</span></span><br><span class="line">        (city, street, zipcode, username, endDate, startDate, <span class="keyword">id</span>) </span><br><span class="line">    <span class="keyword">values</span></span><br><span class="line">        (?, ?, ?, ?, ?, ?, ?)</span><br></pre></td></tr></table></figure><h2 id="임베디드-타입과-테이블-매핑-1"><a href="#임베디드-타입과-테이블-매핑-1" class="headerlink" title="임베디드 타입과 테이블 매핑"></a>임베디드 타입과 테이블 매핑</h2><ul><li>임베디드 타입은 엔티티의 값일 뿐이다.</li><li>임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다.</li><li>객체와 테이블을 아주 세밀하게(find-grained) 매핑하는 것이 가능</li><li>잘 설계한 ORM 애플리케이션은 매핑한 테이블의 수보다 클래스의 수가 더 많음</li></ul><h2 id="임베디드-타입과-연관관계"><a href="#임베디드-타입과-연관관계" class="headerlink" title="임베디드 타입과 연관관계"></a>임베디드 타입과 연관관계</h2><p><img src="/images/jpa/embedded-type/embedded-type4.png" width="80%"></p><h2 id="AttributeOverride-속성-재정의"><a href="#AttributeOverride-속성-재정의" class="headerlink" title="@AttributeOverride: 속성 재정의"></a>@AttributeOverride: 속성 재정의</h2><ul><li>한 엔티티에서 같은 값 타입을 사용하면? </li><li>컬럼 명이 중복됨</li><li>@AttributeOverrides, @AttributeOverride를 사용해서 컬럼 명 속성을 재정의</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;기본값 타입&lt;/li&gt;
&lt;li&gt;임베디드 타입(embedded type, 복합 값 타입)
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="value type" scheme="https://jaehyun8719.github.io/tags/value-type/"/>
    
      <category term="embedded type" scheme="https://jaehyun8719.github.io/tags/embedded-type/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 영속성 전이(CASCADE)와 고아 객체</title>
    <link href="https://jaehyun8719.github.io/2022/09/05/jpa/basic/cascade-orphan/"/>
    <id>https://jaehyun8719.github.io/2022/09/05/jpa/basic/cascade-orphan/</id>
    <published>2022-09-04T15:00:00.000Z</published>
    <updated>2022-09-06T04:55:56.972Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>영속성 전이(CASCADE)</li><li>고아 객체<a id="more"></a></li></ul><h2 id="영속성-전이-CASCADE"><a href="#영속성-전이-CASCADE" class="headerlink" title="영속성 전이(CASCADE)"></a>영속성 전이(CASCADE)</h2><p>특정 엔티티를 영속 상태로 만들 떄 연관된 엔티티도 함께 영속상태로 만들고 싶을 때<br>ex) 부모 엔티티를 저장할 떄 자식 엔티티도 함께 저장</p><figure class="highlight kt"><figcaption><span>Parent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"parent"</span>, fetch = FetchType.LAZY, cascade = [CascadeType.ALL])</span> <span class="comment">//cascde 추가 부분</span></span><br><span class="line">    <span class="keyword">var</span> childList: MutableList&lt;Child&gt;? = mutableListOf()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addChild</span><span class="params">(child: <span class="type">Child</span>)</span></span> &#123;</span><br><span class="line">        childList?.add(child)</span><br><span class="line">        child.parent = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>Child</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"parent_id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> parent: Parent? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> child1 = Child()</span><br><span class="line">        <span class="keyword">var</span> child2 = Child()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> parent = Parent()</span><br><span class="line">        parent.addChild(child1)</span><br><span class="line">        parent.addChild(child2)</span><br><span class="line"></span><br><span class="line">        em.persist(parent)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Parent</span></span><br><span class="line"><span class="comment">        */</span> <span class="keyword">insert</span> </span><br><span class="line">        <span class="keyword">into</span></span><br><span class="line">            <span class="keyword">Parent</span></span><br><span class="line">            (<span class="keyword">name</span>, MEMBER_ID) </span><br><span class="line">        <span class="keyword">values</span></span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Child</span></span><br><span class="line"><span class="comment">        */</span> <span class="keyword">insert</span> </span><br><span class="line">        <span class="keyword">into</span></span><br><span class="line">            <span class="keyword">Child</span></span><br><span class="line">            (<span class="keyword">name</span>, parent_id, MEMBER_ID) </span><br><span class="line">        <span class="keyword">values</span></span><br><span class="line">            (?, ?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Child</span></span><br><span class="line"><span class="comment">        */</span> <span class="keyword">insert</span> </span><br><span class="line">        <span class="keyword">into</span></span><br><span class="line">            <span class="keyword">Child</span></span><br><span class="line">            (<span class="keyword">name</span>, parent_id, MEMBER_ID) </span><br><span class="line">        <span class="keyword">values</span></span><br><span class="line">            (?, ?, ?)</span><br></pre></td></tr></table></figure><p>결과와 같이 <code>em.persist(parent)</code> 에서 parent만 persist 하였는데 child에 값까지 persit 된것을 볼 수 있다. </p><h3 id="영속성-전이-CASECADE-사용시-주의"><a href="#영속성-전이-CASECADE-사용시-주의" class="headerlink" title="영속성 전이(CASECADE) 사용시 주의"></a>영속성 전이(CASECADE) 사용시 주의</h3><ul><li>영속성 전이는 연관관계를 매핑하는 것과 아무 관련이 없다.</li><li>엔티티를 영속화할 때 연관된 엔티티도 함께 영속화하는 편리함을 제공할 뿐이다</li><li>부모와 자식과 연관관계가 하나일 떄만 사용하는것이 좋다. (자식이 다른곳에 연관 관계 일때는 사용하지 않는것이 좋음)</li></ul><h3 id="CASCADE의-종류"><a href="#CASCADE의-종류" class="headerlink" title="CASCADE의 종류"></a>CASCADE의 종류</h3><table><thead><tr><th>종류</th><th>설명</th></tr></thead><tbody><tr><td>ALL</td><td>모두 적용</td></tr><tr><td>PERSIST</td><td>영속</td></tr><tr><td>REMOVE</td><td>삭제</td></tr><tr><td>MERGE</td><td>병합</td></tr><tr><td>REFRESH</td><td>REFRESH</td></tr><tr><td>DETACH</td><td>DETACH</td></tr></tbody></table><p>ALL, PERSIST만 사용 하길 권장</p><h2 id="고아-Orphan-객체"><a href="#고아-Orphan-객체" class="headerlink" title="고아(Orphan) 객체"></a>고아(Orphan) 객체</h2><ul><li>고아 객체 제거: 부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제</li><li><code>orphanRemoval = true</code></li></ul><figure class="highlight kt"><figcaption><span>Parent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"parent"</span>, fetch = FetchType.LAZY, cascade = [CascadeType.ALL], orphanRemoval = true)</span> <span class="comment">//고아객체 추가 부분</span></span><br><span class="line">    <span class="keyword">var</span> childList: MutableList&lt;Child&gt;? = mutableListOf()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addChild</span><span class="params">(child: <span class="type">Child</span>)</span></span> &#123;</span><br><span class="line">        childList?.add(child)</span><br><span class="line">        child.parent = <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> child1 = Child()</span><br><span class="line">        <span class="keyword">var</span> child2 = Child()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> parent = Parent()</span><br><span class="line">        parent.addChild(child1)</span><br><span class="line">        parent.addChild(child2)</span><br><span class="line"></span><br><span class="line">        em.persist(parent)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findParent = em.find(Parent::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">parent.id)</span></span></span><br><span class="line">        findParent.childList?.removeFirst()</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line"><span class="comment">/* delete entity.Child */</span> <span class="keyword">delete</span> </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Child</span> </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        MEMBER_ID=?</span><br></pre></td></tr></table></figure><p><code>orphanRemoval</code> 옵션을 준 자식은 Collection에서 빠지면 delete 쿼리가 실행되서 삭제가 된다.</p><h3 id="고아-객체-주의-사항"><a href="#고아-객체-주의-사항" class="headerlink" title="고아 객체 주의 사항"></a>고아 객체 주의 사항</h3><ul><li>참조가 제거된 엔티티는 다른 곳에서 참조하지 않는 고아 객체로 보고 삭제하는 기능</li><li>참조하는 곳이 하나일 때 사용해야된다!</li><li>특정 엔티티가 개인 소유할 때 사용</li><li>@OneToOne, @OneToMany만 가능</li></ul><h2 id="영속성-전이-고아-객체-생명주기"><a href="#영속성-전이-고아-객체-생명주기" class="headerlink" title="영속성 전이 + 고아 객체 생명주기"></a>영속성 전이 + 고아 객체 생명주기</h2><ul><li>CascadeType.ALL + orphanRemoval=true</li><li>스스로 생명주기를 관리하는 엔티티는 em.persist()로 영속화, em.remove()로 제거</li><li>두 옵션을 모두 활성화 하면 부모 엔티티를 통해서 자식의 생명주기를 관리할 수 있음</li><li>도메인 주도 설계(DDD)의 Aggregate Root개념을 구현할 떄 유용</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;영속성 전이(CASCADE)&lt;/li&gt;
&lt;li&gt;고아 객체
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="koltin JPA" scheme="https://jaehyun8719.github.io/tags/koltin-JPA/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 지연로딩(LAZY)와 즉시로딩(EAGER)</title>
    <link href="https://jaehyun8719.github.io/2022/09/02/jpa/basic/lazy-eager/"/>
    <id>https://jaehyun8719.github.io/2022/09/02/jpa/basic/lazy-eager/</id>
    <published>2022-09-01T15:00:00.000Z</published>
    <updated>2022-09-06T04:55:56.973Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>지연로딩(LAZY)과 즉시로딩(EAGER)<a id="more"></a></li></ul><h2 id="지연로딩-LAZY"><a href="#지연로딩-LAZY" class="headerlink" title="지연로딩(LAZY)"></a>지연로딩(LAZY)</h2><p>지연 로딩(LAZY)을 사용해서 프록시로 조회</p><figure class="highlight kt"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line">) : BaseEntity() &#123;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span> <span class="comment">// 지연로딩 추가 부분</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>Team</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"NAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = arrayListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kt"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> team = Team(</span><br><span class="line">            name = <span class="string">"team1"</span></span><br><span class="line">        )</span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> member = Member(</span><br><span class="line">            username = <span class="string">"member1"</span>,</span><br><span class="line">        )</span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line">        println(<span class="string">"findMember = <span class="subst">$&#123;findMember.team!!.javaClass&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        member0_.MEMBER_ID <span class="keyword">as</span> MEMBER_I1_3_0_,</span><br><span class="line">        member0_.createdAt <span class="keyword">as</span> createdA2_3_0_,</span><br><span class="line">        member0_.deletedAt <span class="keyword">as</span> deletedA3_3_0_,</span><br><span class="line">        member0_.updatedAt <span class="keyword">as</span> updatedA4_3_0_,</span><br><span class="line">        member0_.TEAM_ID <span class="keyword">as</span> TEAM_ID6_3_0_,</span><br><span class="line">        member0_.USERNAME <span class="keyword">as</span> USERNAME5_3_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Member</span> member0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        member0_.MEMBER_ID=?</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        team0_.TEAM_ID <span class="keyword">as</span> TEAM_ID1_5_0_,</span><br><span class="line">        team0_.NAME <span class="keyword">as</span> NAME2_5_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Team team0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        team0_.TEAM_ID=?</span><br><span class="line">findMember = <span class="keyword">class</span> entity.Team</span><br></pre></td></tr></table></figure><p>여기서 지연 로딩(LAZY)로 Member 객체를 조회 하였는데, Team 정보 가지 조회 되는 현상이 나타난다.<br>원래는 지연 로딩시 Team 정보는 Proxy로 가져오고, Team을 조회 할때 정보를 가지고 와야 지연로딩이 된다고 할 수 있다.<br>지연 로딩을 하려면 프록시 객체를 만들어야 하는데, Kotlin의 모든 클래스는 final이라 상속을 받을 수 없고, 일반 클래스는 open할 수 있지만 데이터 클래스는 불가능하다.<br>JPA 표준에서는 엔티티 클래스가 final이면 안되는데 JPA 구현체로써 사용하기 때문에 작동을 한다.<br>gradle 에 아래 와 같이 <a href="https://kotlinlang.org/docs/all-open-plugin.html" rel="external nofollow noopener noreferrer" target="_blank">allOpen 플러그인</a> 추가 해주면된다.</p><figure class="highlight gradle"><figcaption><span>build.gradle.kts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    kotlin(<span class="string">"jvm"</span>) version <span class="string">"1.5.31"</span></span><br><span class="line">    id(<span class="string">"org.jetbrains.kotlin.plugin.allopen"</span>) version <span class="string">"1.5.31"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allOpen &#123;</span><br><span class="line">    annotation(<span class="string">"javax.persistence.Entity"</span>)</span><br><span class="line">    annotation(<span class="string">"javax.persistence.MappedSuperclass"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        member0_.MEMBER_ID <span class="keyword">as</span> MEMBER_I1_3_0_,</span><br><span class="line">        member0_.createdAt <span class="keyword">as</span> createdA2_3_0_,</span><br><span class="line">        member0_.deletedAt <span class="keyword">as</span> deletedA3_3_0_,</span><br><span class="line">        member0_.updatedAt <span class="keyword">as</span> updatedA4_3_0_,</span><br><span class="line">        member0_.TEAM_ID <span class="keyword">as</span> TEAM_ID6_3_0_,</span><br><span class="line">        member0_.USERNAME <span class="keyword">as</span> USERNAME5_3_0_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Member</span> member0_ </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        member0_.MEMBER_ID=?</span><br><span class="line">findMember = <span class="keyword">class</span> entity.Team$HibernateProxy$pD1cOOED</span><br></pre></td></tr></table></figure><h2 id="즉시로딩-EAGER"><a href="#즉시로딩-EAGER" class="headerlink" title="즉시로딩(EAGER)"></a>즉시로딩(EAGER)</h2><p>JPA 구현체는 가능하면 조인을 사용해서 SQL 한번에 조회</p><figure class="highlight kt"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line">) : BaseEntity() &#123;</span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span> <span class="comment">// 즉시로딩 추가 부분</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        member0_.MEMBER_ID <span class="keyword">as</span> MEMBER_I1_3_0_,</span><br><span class="line">        member0_.createdAt <span class="keyword">as</span> createdA2_3_0_,</span><br><span class="line">        member0_.deletedAt <span class="keyword">as</span> deletedA3_3_0_,</span><br><span class="line">        member0_.updatedAt <span class="keyword">as</span> updatedA4_3_0_,</span><br><span class="line">        member0_.TEAM_ID <span class="keyword">as</span> TEAM_ID6_3_0_,</span><br><span class="line">        member0_.USERNAME <span class="keyword">as</span> USERNAME5_3_0_,</span><br><span class="line">        team1_.TEAM_ID <span class="keyword">as</span> TEAM_ID1_5_1_,</span><br><span class="line">        team1_.NAME <span class="keyword">as</span> NAME2_5_1_ </span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        <span class="keyword">Member</span> member0_ </span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">        Team team1_ </span><br><span class="line">            <span class="keyword">on</span> member0_.TEAM_ID=team1_.TEAM_ID </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        member0_.MEMBER_ID=?</span><br><span class="line">findMember = <span class="keyword">class</span> entity.Team</span><br></pre></td></tr></table></figure><h2 id="프록시와-즉시로딩-주의"><a href="#프록시와-즉시로딩-주의" class="headerlink" title="프록시와 즉시로딩 주의"></a>프록시와 즉시로딩 주의</h2><ul><li>가급적 지연 로딩(LAZY)만 사용</li><li>즉시 로딩(EAGER)을 적용하면 예상하지 못한 SQL이 발생</li><li>즉시 로딩(EAGER)은 JPQL에서 N+1 문제를 일으킨다.</li><li>@ManyToOne, @OneToOne는 기본이 지연 로딩(LAZY)</li><li>@OneToMany, @ManyToMany는 기본이 즉시 로딩(EAGER)</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li><li><a href="https://kotlinlang.org/docs/all-open-plugin.html" rel="external nofollow noopener noreferrer" target="_blank">https://kotlinlang.org/docs/all-open-plugin.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;지연로딩(LAZY)과 즉시로딩(EAGER)
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="지연로딩" scheme="https://jaehyun8719.github.io/tags/%EC%A7%80%EC%97%B0%EB%A1%9C%EB%94%A9/"/>
    
      <category term="즉시로딩" scheme="https://jaehyun8719.github.io/tags/%EC%A6%89%EC%8B%9C%EB%A1%9C%EB%94%A9/"/>
    
      <category term="LAZY" scheme="https://jaehyun8719.github.io/tags/LAZY/"/>
    
      <category term="EAGER" scheme="https://jaehyun8719.github.io/tags/EAGER/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 고급 맵핑(Advancded Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/09/01/jpa/basic/advanced-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/09/01/jpa/basic/advanced-mapping/</id>
    <published>2022-08-31T15:00:00.000Z</published>
    <updated>2022-09-01T11:51:08.003Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>상속관계 매핑</li><li>@MappedSuperclass<a id="more"></a></li></ul><h2 id="상속-관계-매핑"><a href="#상속-관계-매핑" class="headerlink" title="상속 관계 매핑"></a>상속 관계 매핑</h2><ul><li>관계형 데이터베이스는 상속 관계가 없다</li><li>슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사</li><li>상속관계 매핑: 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑</li></ul><p><img src="/images/jpa/advanced-mapping/advanced-mapping1.png" width="80%"></p><p>슈퍼타입 서브타입 논리 모델을 실제 물리 모델로 구현하는 방법</p><figure class="highlight kotlin"><figcaption><span>jpaMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> movie = Movie(<span class="string">"a"</span>, <span class="string">"bbb"</span>)</span><br><span class="line">        movie.name = <span class="string">"바람과함꼐 사라지다"</span></span><br><span class="line">        movie.price = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">        em.persist(movie)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMovie = em.find(Movie::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">movie.id)</span></span></span><br><span class="line">        println(<span class="string">"findMove = <span class="variable">$findMovie</span>"</span>)</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Album</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span> </span>(</span><br><span class="line">    <span class="keyword">var</span> artist: String? = <span class="literal">null</span>,</span><br><span class="line">) : Item() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Movie</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span></span>(</span><br><span class="line">    <span class="keyword">var</span> director: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> actor: String? = <span class="literal">null</span>,</span><br><span class="line">) : Item() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Book</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(</span><br><span class="line">    <span class="keyword">var</span> author: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isbn: String? = <span class="literal">null</span>,</span><br><span class="line">) : Item() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="주요-어노테이션"><a href="#주요-어노테이션" class="headerlink" title="주요 어노테이션"></a>주요 어노테이션</h3><ul><li>@Inheritance(strategy = InheritanceType.XXX)<ul><li>JOINED: 조인 전략</li><li>SINGLE_TABLE: 단일 테이블 전략</li><li>TABLE_PER_CLASS: 구현 클래스마다 테이블 전략</li></ul></li><li>@DiscriminatorColumn(name=“DTYPE”)</li><li>@DiscriminatorValue(“XXX”): 자식 클래스에 어노테이션을 넣고, DTYPE에 들어갈 이름을 변경</li></ul><h3 id="조인-전략"><a href="#조인-전략" class="headerlink" title="조인 전략"></a>조인 전략</h3><ul><li>장점<ul><li>테이블 정규화</li><li>외래 키 참조 무결성 제약조건 활용가능</li><li>저장공간 효율화</li></ul></li><li>단점<ul><li>조회시 조인을 많이 사용, 성능 저하</li><li>조회 쿼리가 복잡함</li></ul></li></ul><p><img src="/images/jpa/advanced-mapping/advanced-mapping2.png" width="90%"></p><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.JOINED)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/advanced-mapping/advanced-mapping3.png" width="30%"></p><p>JOIN 전략은 상속관계마다 테이블을 생성하며, insert시 부모, 자식 2번 insert를 하고, select시 join 으로 조회를 한다.</p><h3 id="단일-테이블-전략"><a href="#단일-테이블-전략" class="headerlink" title="단일 테이블 전략"></a>단일 테이블 전략</h3><ul><li>장점<ul><li>조인이 필요 없으므로 일반적으로 조회 성능이 빠름</li><li>조회 쿼리가 단순함 </li></ul></li><li>단점<ul><li>자식 엔티티가 매핑한 컬럼은 모두 null 허용</li><li>단일테이블에모든것을저장하므로테이블이커질수있다.상 황에 따라서 조회 성능이 오히려 느려질 수 있다</li></ul></li></ul><p><img src="/images/jpa/advanced-mapping/advanced-mapping4.png" width="80%"></p><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.SINGLE_TABLE)</span></span><br><span class="line"><span class="meta">@DiscriminatorColumn</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/advanced-mapping/advanced-mapping5.png" width="80%"></p><h3 id="구현-클래스마다-테이블-전략"><a href="#구현-클래스마다-테이블-전략" class="headerlink" title="구현 클래스마다 테이블 전략"></a>구현 클래스마다 테이블 전략</h3><ul><li>이 전략은 데이터베이스 설계자와 ORM 전문가 둘 다 추천하지 않음</li><li>장점<ul><li>서브 타입을 명확하게 구분해서 처리할 때 효과적</li><li>not null 제약조건 사용 가능</li></ul></li><li>단점<ul><li>여러 자식 테이블을 함께 조회할 때 성능이 느림(UNION SQL 필요)</li><li>자식 테이블을 통합해서 쿼리하기 어려움</li></ul></li></ul><figure class="highlight kotlin"><figcaption><span>Item</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> price: <span class="built_in">Int</span>? = <span class="literal">null</span>,</span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Item 테이블이 생성이 안되고, 나머지 자식클래스의 테이블만 생성된다.</p><p><img src="/images/jpa/advanced-mapping/advanced-mapping6.png" width="80%"></p><h2 id="MappedSuperclass"><a href="#MappedSuperclass" class="headerlink" title="@MappedSuperclass"></a>@MappedSuperclass</h2><p>공통 매핑 정보가 필요할때 사용하는 방법</p><ul><li>상속관계 매핑 안됨</li><li>엔티티, 테이블과 매핑 안됨</li><li>부모 클래스를 상속 받는 자식 클래스에 매핑 정보만 제공</li><li>조회, 검색 불가(em.find(BaseEntity) 불가)</li><li>직접 생성해서 사용할 일이 없으므로 추상 클래스 권장</li><li>테이블과 관계 없고, 단순히 엔티티가 공통으로 사용하는 매핑 정보를 모으는 역할</li><li>주로 등록일, 수정일, 등록자, 수정자 같은 전체 엔티티에서 공통 으로 적용하는 정보를 모을 때 사용</li><li>참고: @Entity 클래스는 엔티티나 @MappedSuperclass로 지 정한 클래스만 상속 가능</li></ul><figure class="highlight kotlin"><figcaption><span>BaseEntity</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> createdAt: LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> updatedAt: LocalDateTime? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> deletedAt: LocalDateTime? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Member</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>(</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span>,</span><br><span class="line">) : BaseEntity() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Member 테이블에 상속 받은 BaseEntity에 있는 컬럼 값들도 같이 생성된다.<br>상속이란 개념보다 테이블생성시 공통 맵핑정보가 필요할때 이용하는 방법이다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;상속관계 매핑&lt;/li&gt;
&lt;li&gt;@MappedSuperclass
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Advancded Mapping" scheme="https://jaehyun8719.github.io/tags/Advancded-Mapping/"/>
    
      <category term="고급 맵핑" scheme="https://jaehyun8719.github.io/tags/%EA%B3%A0%EA%B8%89-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 15. 코틀린에서 다양한 함수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/26/kotlin/basic/chapter15/"/>
    <id>https://jaehyun8719.github.io/2022/08/26/kotlin/basic/chapter15/</id>
    <published>2022-08-25T15:00:00.000Z</published>
    <updated>2022-08-26T11:12:26.373Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 다양한 함수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="확장함수"><a href="#확장함수" class="headerlink" title="확장함수"></a>확장함수</h2><p>수신객체클래스를 멤버함수 처럼 사용할 수 있다.</p><ol><li>확장함수는 원본 클래스의 private, protected 멤버 접근이 안된다.</li><li>멤버함수, 확장함수 중 멤버함수에 우선권이 있다.</li><li>확장함수는 현재 타입을 기준으로 호출된다.</li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">"ABC"</span></span><br><span class="line">    println(str.lastChar()) <span class="comment">// "C"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String.<span class="title">lastChar</span><span class="params">()</span></span>: <span class="built_in">Char</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="infix-함수"><a href="#infix-함수" class="headerlink" title="infix 함수"></a>infix 함수</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>.add(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="number">3</span>.add2(<span class="number">4</span>)</span><br><span class="line">    <span class="number">3</span> add2 <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add2</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + other</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inline-함수"><a href="#inline-함수" class="headerlink" title="inline 함수"></a>inline 함수</h2><p>함수가 호출되는 대신, 함수를 호출한 지점에 함수 본문을 그대로 복붙하고 싶을 경우</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">add3</span><span class="params">(other: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> + other</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/15-fun" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 다양한 함수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 14. 코틀린에서 컬렉션을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter14/"/>
    <id>https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter14/</id>
    <published>2022-08-24T11:00:00.000Z</published>
    <updated>2022-09-01T09:58:33.782Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 컬렉션을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>가변(Mutable) 컬렉션은 컬렉션에 elemendt를 추가, 삭제할 수 있다.<br>불변 컬렉션은 element를 추가, 삭제할 수 없다. </p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 불변</span></span><br><span class="line"><span class="keyword">val</span> numbers = listOf(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// 가변</span></span><br><span class="line"><span class="keyword">val</span> numbers = mutableListOf(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line">numbers.add(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> emptyList = emptyList&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 값 출력</span></span><br><span class="line">println(numbers[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// For Each</span></span><br><span class="line"><span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전통적인 for문</span></span><br><span class="line"><span class="keyword">for</span> ((index, number) <span class="keyword">in</span> numbers.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">"<span class="variable">$index</span> <span class="variable">$number</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set은 List와 다르게 순서가 없고, 값은 element는 하나만 존재할 수 있다<br>자료구조적 의미만 제외하면 모든 기능은 List와 비슷하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 불변</span></span><br><span class="line"><span class="keyword">val</span> numbers = setOf(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// 가변</span></span><br><span class="line"><span class="keyword">val</span> mutableNumbers = mutableSetOf(<span class="number">100</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">val</span> map = mutableMapOf&lt;<span class="built_in">Int</span>, String&gt;()</span><br><span class="line">map[<span class="number">1</span>] = <span class="string">"MONDAY"</span></span><br><span class="line">map[<span class="number">2</span>] = <span class="string">"SUNDAY"</span></span><br><span class="line"></span><br><span class="line">mapOf(<span class="number">1</span> to <span class="string">"MONDAY"</span>, <span class="number">2</span> to <span class="string">"SUNDAY"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> map.keys) &#123;</span><br><span class="line">    println(key)</span><br><span class="line">    println(map[key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map.entries) &#123;</span><br><span class="line">    println(key)</span><br><span class="line">    println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="컬렉션의-null-가능성"><a href="#컬렉션의-null-가능성" class="headerlink" title="컬렉션의 null 가능성"></a>컬렉션의 null 가능성</h2><ul><li>List&lt;Int?&gt;: 리스트에 null 들어갈 수 있지만, 리스트는 절대 null이 아님</li><li>List<int>?: 리스트에 null 들어갈 수 없지만, 리스트는 절대 null일 수 있음</int></li><li>List&lt;Int?&gt;?: 리스트에 null이 들어갈 수도 있고, 리스트가 null일 수도 있음</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/14-collection" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 컬렉션을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 13. 코틀린에서 다양한 클래스를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter13/"/>
    <id>https://jaehyun8719.github.io/2022/08/24/kotlin/basic/chapter13/</id>
    <published>2022-08-23T15:00:00.000Z</published>
    <updated>2022-08-24T12:33:07.456Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 다양한 클래스를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="Data-Class"><a href="#Data-Class" class="headerlink" title="Data Class"></a>Data Class</h2><p>data 키워드를 붙여주면, <code>equals, hashCode, toString</code>을 자동으로 만들어준다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDto</span> </span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">val</span> age: <span class="built_in">Int</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Enum-Class"><a href="#Enum-Class" class="headerlink" title="Enum Class"></a>Enum Class</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> code: String,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    KOREA(<span class="string">"KO"</span>),</span><br><span class="line">    AMERICA(<span class="string">"US"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sealed-Class-Sealed-Interface"><a href="#Sealed-Class-Sealed-Interface" class="headerlink" title="Sealed Class, Sealed Interface"></a>Sealed Class, Sealed Interface</h2><p>컴파일 타임 때 하위 클래스의 타입을 모두 기억한다. 즉, 런타임때 클래스 타입이 추가될 수 없다.<br>하위 클래스는 같은 패키지에 있어야 한다.<br>추사화가 필요한 Entity 또는 DTO에 sealed class를 활용</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/13-various" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 다양한 클래스를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 12. 코틀린에서 object를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter12/"/>
    <id>https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter12/</id>
    <published>2022-08-22T11:00:00.000Z</published>
    <updated>2022-08-22T11:00:28.930Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 object를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="static-함수와-변수"><a href="#static-함수와-변수" class="headerlink" title="static 함수와 변수"></a>static 함수와 변수</h2><p>companion object(동행 객체)는 클래스와 동일하는 유일한 오브젝트 이다.<br>const를 붙이는 이유는 컴파일시 값을 할당한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MIN_AGE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newBaby</span><span class="params">(name: <span class="type">String</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(name, MIN_AGE)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>companion object에 인터페이스 구현 </li></ul><figure class="highlight kotlin"><figcaption><span>Log</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Person</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> Factory : Log &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MIN_AGE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newBaby</span><span class="params">(name: <span class="type">String</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(name, MIN_AGE)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"나는 Person 클래스의 동행객체 Factory 입니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="싱글톤"><a href="#싱글톤" class="headerlink" title="싱글톤"></a>싱글톤</h2><p>obejct 를 사용하면 싱글톤 객체 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line"></span><br><span class="line">    println(Singleton.a)</span><br><span class="line">    Singleton.a += 10</span><br><span class="line">    println(Singleton.a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object Singleton &#123;</span><br><span class="line">    var a: Int = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="익명-클래스"><a href="#익명-클래스" class="headerlink" title="익명 클래스"></a>익명 클래스</h2><p><code>obejct: 타입이름</code>을 이용하여 익명 클래스 선언</p><figure class="highlight kotlin"><figcaption><span>Movable</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Movable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    moveSomething(<span class="keyword">object</span> : Movable &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"move"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"fly"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">moveSomething</span><span class="params">(movable: <span class="type">Movable</span>)</span></span> &#123;</span><br><span class="line">    movable.move()</span><br><span class="line">    movable.fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/12-object" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 object를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 11. 코틀린에서 접근 제어를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter11/"/>
    <id>https://jaehyun8719.github.io/2022/08/22/kotlin/basic/chapter11/</id>
    <published>2022-08-21T15:00:00.000Z</published>
    <updated>2022-08-22T10:18:00.773Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="접근-제어"><a href="#접근-제어" class="headerlink" title="접근 제어"></a>접근 제어</h2><ul><li>Koltin의 기본 접근 지시어는 <code>public</code> 이다</li></ul><table><thead><tr><th>접근 제어 명령어</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>모든 곳에서 접근 가능</td></tr><tr><td>protected</td><td>선언된 클래스 또는 하위 클래스에서만 접급 가능</td></tr><tr><td>internal</td><td>같은 모듈에서만 접근 가능</td></tr><tr><td>private</td><td>선언된 클래스 내에서만 접근 가능</td></tr></tbody></table><ul><li>Kotlin 파일</li></ul><table><thead><tr><th>접근 제어 명령어</th><th>설명</th></tr></thead><tbody><tr><td>public</td><td>기본값은 어디서든 접근</td></tr><tr><td>protected</td><td>파일(최상단)에는 사용 불가능</td></tr><tr><td>internal</td><td>같은 모듈에서만 접근 가능</td></tr><tr><td>private</td><td>같은 파일 내에서만 접근 가능</td></tr></tbody></table><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/11-visibility-modifier" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 10. 코틀린에서 상속을 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter10/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter10/</id>
    <published>2022-08-20T11:00:00.000Z</published>
    <updated>2022-08-20T08:57:57.194Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 상속을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><figure class="highlight kotlin"><figcaption><span>Animal.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> species: String,</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>상위 클래스의 생성자를 바로 호출</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">" 고양이가 사뿐 사뿐 걸어가~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 프로퍼치를 override 할 때 무조건 open 을 붙여 줘야 한다.</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><figure class="highlight kotlin"><figcaption><span>Flyable.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"파닥 파닥"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Swimable.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"어푸 어푸"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Penguin.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>), Swimable, Flyable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 중복되는 인터페이스를 특정할때 `super&lt;타입&gt;.함수` 사용</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Swimable&gt;.act()</span><br><span class="line">        <span class="keyword">super</span>&lt;Flyable&gt;.act()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상속-관련-키워드"><a href="#상속-관련-키워드" class="headerlink" title="상속 관련 키워드"></a>상속 관련 키워드</h2><ol><li>final: override를 할 수 없게 한다. default로 보이지 않게 존재</li><li>open: override를 열어 준다.</li><li>abstract: 반드시 override 해야 한다.</li><li>override: 상위 타입을 오버라이드 하고 있다.</li></ol><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/10-inheritance" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 상속을 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 9. 코틀린에서 클래스를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter9/"/>
    <id>https://jaehyun8719.github.io/2022/08/20/kotlin/basic/chapter9/</id>
    <published>2022-08-19T15:00:00.000Z</published>
    <updated>2022-08-20T08:24:29.456Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 클래스를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="클래스와-프로퍼티"><a href="#클래스와-프로퍼티" class="headerlink" title="클래스와 프로퍼티"></a>클래스와 프로퍼티</h2><p>프로퍼티 = 필드 + getter + setter<br>kotlin엥서는 필드만 만들면 getter, setter를 자동으로 생성</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">    <span class="keyword">var</span> age = age</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성자에서 프로퍼티와 생성자를 생성할 경우</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String, </span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성한 클래스 호출 후 데이터 입력</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    println(person.name)</span><br><span class="line">    person.age = <span class="number">10</span></span><br><span class="line">    println(person.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="생성자와-init"><a href="#생성자와-init" class="headerlink" title="생성자와 init"></a>생성자와 init</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>클래스가 초기화되는 시점에서 한번 호출하고 싶을때는 <code>init</code> 블록 생성하여 사용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="argument에-값을-넣고-인스턴스화-할-경우"><a href="#argument에-값을-넣고-인스턴스화-할-경우" class="headerlink" title="argument에 값을 넣고 인스턴스화 할 경우"></a>argument에 값을 넣고 인스턴스화 할 경우</h3><ul><li>주생성자(primary constructor) </li><li>부생성자(secondary constructor) 는 최종적으로 주생성자 this를 호출해야 된다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 부생성자(secondary constructor)</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String): <span class="keyword">this</span>(name, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 함수</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person2 = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">val</span> person3 = Person(<span class="string">"재현"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>부생성자 사용보다는 정적 팩토리 메소드를 사용하는것이 좋음.</li></ul><h3 id="부생성자보다는-default-parameter를-권장"><a href="#부생성자보다는-default-parameter를-권장" class="headerlink" title="부생성자보다는 default parameter를 권장"></a>부생성자보다는 default parameter를 권장</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">100</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="커스텀-getter-setter"><a href="#커스텀-getter-setter" class="headerlink" title="커스텀 getter, setter"></a>커스텀 getter, setter</h2><p>프로퍼티의 속성을 나타내면 커스텀으로 생성하여 호출 해주는것이 좋음</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">idAdult</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 함수 대신 프로퍼티 처럼 생성</span></span><br><span class="line">    <span class="keyword">val</span> isAdult: <span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>예약어 <code>field</code>(자신을 가리키는) 를 사용하는 이유는 <code>name.uppercase()</code>를 사용 할 경우에 <code>name -&gt; get() -&gt; name -&gt; get()</code>을 호출 하여 무한 루프가 발생한다. </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">        <span class="keyword">get</span>() = field.uppercase()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>backing field를 사용안하고 하는 경우 <code>this.name</code>을 이용</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> getUpperCaseName: String </span><br><span class="line">       <span class="keyword">get</span>() = <span class="keyword">this</span>.name.uppercase()</span><br></pre></td></tr></table></figure><h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>setter 도 getter 와 동일하나 var를 이용해서 생성하면된다. 하지만 setter를 무분별하게 이용하는걸 지양하기때문에 update 와 같은 함수를 이용해서 호출하는 방법이 좋다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/9-class" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 클래스를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 8. 코틀린에서 함수를 다루는 방법</title>
    <link href="https://jaehyun8719.github.io/2022/08/18/kotlin/basic/chapter8/"/>
    <id>https://jaehyun8719.github.io/2022/08/18/kotlin/basic/chapter8/</id>
    <published>2022-08-17T15:00:00.000Z</published>
    <updated>2022-08-20T06:19:11.330Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 함수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p><h2 id="함수-선언-문법"><a href="#함수-선언-문법" class="headerlink" title="함수 선언 문법"></a>함수 선언 문법</h2><p>if - else 문은 expression 이기때문에 아래와 같이 함수 선언이 가능하다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> =</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 추론이 가능하기때문에 type 생략 가능</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max3</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span>  b</span><br></pre></td></tr></table></figure><h2 id="default-parameter"><a href="#default-parameter" class="headerlink" title="default parameter"></a>default parameter</h2><p>JAVA에서 Overloading을 하여 parameter 값을 넣어줘야하는데, parameter 값이 없을떄는 default parameter 값이 적용된다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">2</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">6</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="named-argument"><a href="#named-argument" class="headerlink" title="named argument"></a>named argument</h2><p>parameter를 통해서 직접 지정하고, 지정되지 않는 parameter는 기본값을 사용한다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, useNewLine = <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="같은-타입의-여러-파라미터-받기-가변인자"><a href="#같은-타입의-여러-파라미터-받기-가변인자" class="headerlink" title="같은 타입의 여러 파라미터 받기 (가변인자)"></a>같은 타입의 여러 파라미터 받기 (가변인자)</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAll(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    printAll(*array) <span class="comment">// spread 연산자</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAll</span><span class="params">(<span class="keyword">vararg</span> strings: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (str <span class="keyword">in</span> strings) &#123;</span><br><span class="line">        println(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/8-fun" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.inflearn.com/course/java-to-kotlin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;자바 개발자를 위한 코틀린 입문&lt;/a&gt; 에 강의 내용을 정리한 내용이다.&lt;br&gt;코틀린에서 함수를 다루는 방법에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/categories/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/categories/kotlin/kotlin-basic/"/>
    
    
      <category term="kotlin" scheme="https://jaehyun8719.github.io/tags/kotlin/"/>
    
      <category term="kotlin basic" scheme="https://jaehyun8719.github.io/tags/kotlin-basic/"/>
    
  </entry>
  
</feed>
