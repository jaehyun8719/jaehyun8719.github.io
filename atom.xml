<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jaehyun&#39;s Dev Story</title>
  
  <subtitle>공부해서 남준다.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jaehyun8719.github.io/"/>
  <updated>2022-05-28T09:19:28.033Z</updated>
  <id>https://jaehyun8719.github.io/</id>
  
  <author>
    <name>Jaehyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JPA - 연관관계 매핑(Realation Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/05/28/jpa/relation-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/05/28/jpa/relation-mapping/</id>
    <published>2022-05-27T15:00:00.000Z</published>
    <updated>2022-05-28T09:19:28.033Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>방향(Direction): 단방향, 양방향</li><li>연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요<a id="more"></a></li></ul><h2 id="단방향-연관관계"><a href="#단방향-연관관계" class="headerlink" title="단방향 연관관계"></a>단방향 연관관계</h2><p><img src="/images/jpa/relation-mapping/relation-mapping1.png" width="50%"></p><p>DB 기준에서 <code>Member</code>와 <code>Team</code>관계는 <code>다대일(N:1)</code>이다.  </p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> userName: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findTeam = findMember.team</span><br><span class="line">        <span class="keyword">if</span> (findTeam != <span class="literal">null</span>) &#123;</span><br><span class="line">            println(<span class="string">"findTeam = "</span> + findTeam.name)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findTeam = TeamA</span><br></pre></td></tr></table></figure><ol><li><code>다대일(N:1)</code>관계 이므로 <code>@ManyToOne</code> 사용</li><li>객체관계여서 <code>Team</code>에 아이디 Join을 하기 위한 <code>@JoinColumn(name = &quot;TEAM_ID&quot;)</code> 사용</li><li>find를 이용해서 Member에 있는 Team 객체를 이용할 수 있다.</li></ol><h2 id="양방향-연관관계와-연관관계의-주인"><a href="#양방향-연관관계와-연관관계의-주인" class="headerlink" title="양방향 연관관계와 연관관계의 주인"></a>양방향 연관관계와 연관관계의 주인</h2><p><img src="/images/jpa/relation-mapping/relation-mapping2.png" width="50%"></p><figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = arrayListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단방향과 같으나 <code>members</code>객체를 추가</p><figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line">        <span class="keyword">val</span> members = findMember.team?.members</span><br><span class="line"></span><br><span class="line">        members?.forEach &#123;</span><br><span class="line">            println(<span class="string">"member = "</span> + it.username)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">member = member1</span><br></pre></td></tr></table></figure><ul><li>양방향 객체 연관관계는 <code>회원 -&gt; 팀</code> 연관관계 1개(단방향), <code>팀 -&gt; 회원</code> 1개(단방향)서로 다른 방향으로 각각 1개씩 해서 2개(양방향)이라고 생각해야된다.</li><li>테이블 연관관계는 PK, FK로 JOIN 을 해서 <code>회원, 팀</code>을 서로 알 수 있다.</li></ul><h3 id="연관관계의-주인-Owner"><a href="#연관관계의-주인-Owner" class="headerlink" title="연관관계의 주인(Owner)"></a>연관관계의 주인(Owner)</h3><ul><li>객체의 두 관계중 하나를 연관관계의 주인으로 지정(외래 키가 있는 곳을 주인으로 지정)</li><li>연관관계의 주인만이 외래 키를 관리(등록, 수정)</li><li>주인이 아닌 쪽은 읽기만 가능</li><li>주인은 <code>mappedBy</code> 속성 사용 안함</li><li>주인이 아니면 <code>mappedBy</code> 속성으로 주인 지정</li></ul><h2 id="양방향-매핑시-주의점"><a href="#양방향-매핑시-주의점" class="headerlink" title="양방향 매핑시 주의점"></a>양방향 매핑시 주의점</h2><h3 id="연관관계-주인에-값을-입력-하지-않음"><a href="#연관관계-주인에-값을-입력-하지-않음" class="headerlink" title="연관관계 주인에 값을 입력 하지 않음"></a>연관관계 주인에 값을 입력 하지 않음</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">team.members.add(member)</span><br><span class="line">em.persist(team)</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/relation-mapping/relation-mapping3.png" width="50%"></p><ul><li><code>Member</code>테이블을 보면 <code>TEAM_ID</code>컬럼 값이 null 값인걸 확인 할 수 있다. 그 이유는 위에서 설정한<code>(@OneToMany(mappedBy = &quot;team&quot;))</code> 연관관계의 주인이 <code>team</code> 이므로 아래의 코드와 같이 주인을 먼저 insert 쿼리를 실행 해야된다. (mappedBy 설정한 부분은 읽기 전용) </li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><p><img src="/images/jpa/relation-mapping/relation-mapping4.png" width="50%"></p><h3 id="순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음"><a href="#순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음" class="headerlink" title="순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음"></a>순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음</h3><p>team.members 입력하면 영속상태(1차캐시)이므로 바로 조회해서 사용 할 수 있다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line">team.members.add(member)</span><br></pre></td></tr></table></figure><h3 id="연관관계-편의-메소드를-생성"><a href="#연관관계-편의-메소드를-생성" class="headerlink" title="연관관계 편의 메소드를 생성"></a>연관관계 편의 메소드를 생성</h3><p>양쪽에 값을 입력 하다보면 실수를 할 수 있으니, 주인에 값을 입력할때 같이 입력 할 수 있는 함수(편의 메소드)를 생성</p><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 편의 메소드 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var team = Team()</span><br><span class="line">team.name = &quot;TeamA&quot;</span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line">var member = Member()</span><br><span class="line">member.username = &quot;member1&quot;</span><br><span class="line">member.changeTeam(team) // 편의 메소드 추가</span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><h3 id="양방향-매핑시에-무한-루프-조심"><a href="#양방향-매핑시에-무한-루프-조심" class="headerlink" title="양방향 매핑시에 무한 루프 조심"></a>양방향 매핑시에 무한 루프 조심</h3><ul><li>toString, JSON 생성 라이브러리 사용시 반복적으로 객체 를 호출 하면서 무한 루프에 빠지게 된다.</li><li>JSON 생성 라이브러리 사용시 Entity 를 반환하지 말고 DTO로 변환해서 반환을 해야 된다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;방향(Direction): 단방향, 양방향&lt;/li&gt;
&lt;li&gt;연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Realation" scheme="https://jaehyun8719.github.io/tags/Realation/"/>
    
      <category term="Realation Mapping" scheme="https://jaehyun8719.github.io/tags/Realation-Mapping/"/>
    
      <category term="연관관계 맵핑" scheme="https://jaehyun8719.github.io/tags/%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 엔티티 매핑(Entity Mapping)</title>
    <link href="https://jaehyun8719.github.io/2022/05/23/jpa/entity-mapping/"/>
    <id>https://jaehyun8719.github.io/2022/05/23/jpa/entity-mapping/</id>
    <published>2022-05-22T15:00:00.000Z</published>
    <updated>2022-05-23T13:28:27.216Z</updated>
    
    <content type="html"><![CDATA[<hr><p>JPA 엔티티 맵핑(Entity Mapping) 란?</p><ul><li>객체와 테이블 매핑: @Entity, @Table</li><li>필드와 컬럼 매핑: @Column</li><li>기본 키 매핑: @Id</li><li>연관관계 매핑: @ManyToOne, @JoinColumn<a id="more"></a></li></ul><h2 id="객체와-테이블-매핑"><a href="#객체와-테이블-매핑" class="headerlink" title="객체와 테이블 매핑"></a>객체와 테이블 매핑</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><ul><li><code>@Entity</code>가 붙은 클래스는 JPA가 관리</li><li>JPA를 사용해서 테이블과 매핑할 클래스는 `@Entity 필수</li><li>주의<ul><li>기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)</li><li>final 클래스, enum, interface, inner 클래스 사용할 수 없음</li><li>저장할 필드에 fianl 사용할 수 없음</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p><code>@Table</code>은 엔티티와 맵핑할 테이블 지정</p><table><thead><tr><th>속성</th><th>가능</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>매핑할 테이블 이름</td><td>엔티티 이름을 사용</td></tr><tr><td>catalog</td><td>데이터베이스 catalog 매핑</td><td></td></tr><tr><td>schema</td><td>데이터베이스 schema 매핑</td><td></td></tr><tr><td>uniqueConstraints(DDL)</td><td>DDL 생성 시에 유티크 제약 조건 생성</td><td><br></td></tr></tbody></table><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=<span class="meta-string">"MemeberName"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="데이터베이스-스키마-자동-생성"><a href="#데이터베이스-스키마-자동-생성" class="headerlink" title="데이터베이스 스키마 자동 생성"></a>데이터베이스 스키마 자동 생성</h2><p>DDL을 애플리케이션 실행 시점에 자동 생성(DDL 관련은 개발서버에서만 사용)</p><p><code>hibernate.hbm2ddl.auto</code> 옵션 속성 값</p><table><thead><tr><th>속성</th><th>설명</th></tr></thead><tbody><tr><td>create</td><td>기존테이블 삭제 후 다시 생성(DROP + CREATE)</td></tr><tr><td>create-drop</td><td>create와 같으나 종료시점에 테이블 DROP</td></tr><tr><td>update</td><td>변경분만 반영(운영DB에는 사용하면 안됨)</td></tr><tr><td>validate</td><td>엔티티와 테이블이 정상 매핑되었는지만 확인</td></tr><tr><td>none</td><td>사용하지 않음</td></tr></tbody></table><p>ex) create 속성<br><figure class="highlight kotlin"><figcaption><span>createOptionResult</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    drop table Member <span class="keyword">if</span> exists</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table Member (</span><br><span class="line">       id bigint not <span class="literal">null</span>,</span><br><span class="line">        name varchar(<span class="number">255</span>),</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h2 id="필드와-컬럼매핑"><a href="#필드와-컬럼매핑" class="headerlink" title="필드와 컬럼매핑"></a>필드와 컬럼매핑</h2><table><thead><tr><th>어노테이션</th><th>설명</th></tr></thead><tbody><tr><td>@Column</td><td>컬럼 매핑</td></tr><tr><td>@Temporal</td><td>날짜 타입 매핑</td></tr><tr><td>@Enumerated</td><td>enum 타입 매핑</td></tr><tr><td>@Lob</td><td>BLOB, CLOB 매핑</td></tr><tr><td>@Transient</td><td>특정 필드를 컬럼에서 제외</td></tr></tbody></table><figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"name"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">var</span> roleType: RoleType? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createDate: LocalDate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lastModifiedDate: LocalDate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lob</span></span><br><span class="line">    <span class="keyword">var</span> description: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">var</span> temp: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table Member (</span><br><span class="line">    id bigint not <span class="literal">null</span>,</span><br><span class="line">    age integer not <span class="literal">null</span>,</span><br><span class="line">    createDate timestamp,</span><br><span class="line">    description clob,</span><br><span class="line">    lastModifiedDate timestamp,</span><br><span class="line">    roleType varchar(<span class="number">255</span>),</span><br><span class="line">    name varchar(<span class="number">255</span>),</span><br><span class="line">    primary key (id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>필드와 매핑할 테이블의 컬럼 이름</td><td>객체의 필드 이름</td></tr><tr><td>insert<br>update</td><td>등록, 변경 가능 여부</td><td>true</td></tr><tr><td>nullable(DDL)</td><td>null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약조건을 걸떄 사용한다</td><td></td></tr><tr><td>unique(DDL)</td><td>@Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸 떄 사용한다</td><td></td></tr><tr><td>columnDefinition(DDL)</td><td>데이터베이스 컬럼 정보를 직접 줄 수 있다. ex)varchar(100) default ‘EMPTY’</td><td>필드의 자바 타입과 방언 정보를 사용</td></tr><tr><td>length(DDL)</td><td>문자 길이 제약조건, String 타입에만 사용한다.</td><td>255</td></tr><tr><td>precision<br>scale(DDL)</td><td>BigDecimal 타입에서 사용한다(BigInteger도 사용할 수 있다).<br>precision은 소수점을 포함한 전체 자릿수, scale은 소수의 자릿수다. 참고로 double, float 타입에는 적용되지 않는다. 아주 큰 숫자나 정 밀한 소수를 다루어야 할 때만 사용한다.</td><td>precision=19<br>scale=2</td></tr></tbody></table><h3 id="Enumerated"><a href="#Enumerated" class="headerlink" title="@Enumerated"></a>@Enumerated</h3><p>enum Type을 매핑 할때 사용</p><div class="note danger no-icon">            <p>ORINAL은 사용하지 말것</p>          </div><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>value</td><td>EnumType.ORDINAL은 enum 순서를 데이터베이스에 저장<br>EnumType.STRING은 enum 이름을 데이터 베이스에 저장</td><td>EnumType.ORDINAL</td></tr></tbody></table><h2 id="기본-키-매핑"><a href="#기본-키-매핑" class="headerlink" title="기본 키 매핑"></a>기본 키 매핑</h2><ul><li>직접 할당: <code>@id</code> 만 사용</li><li>자동 생성: <code>@GeneratedValue</code><ul><li>IDENTITY, SEQUENCE, TABLE, AUTO</li></ul></li></ul><h3 id="IDENTITY-전략"><a href="#IDENTITY-전략" class="headerlink" title="IDENTITY 전략"></a>IDENTITY 전략</h3><p>기본 키 생성을 DB에 위임<br>IDENTITY 전략은 <code>em.persist()</code> 시점에 즉시 INSERT SQL 실행 하고 DB에서 식별자를 조회</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="SEQUENCE-전략"><a href="#SEQUENCE-전략" class="headerlink" title="SEQUENCE 전략"></a>SEQUENCE 전략</h3><p>DB 시퀀스는 유일한 값을 순서대로 생성하는 특별한 DB 오브젝트</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@SequenceGenerator(</span></span><br><span class="line"><span class="meta">        name = “MEMBER_SEQ_GENERATOR<span class="meta-string">",</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        sequenceName = “MEMBER_SEQ"</span>, //매핑할 데이터베이스 시퀀스 이름</span></span><br><span class="line"><span class="meta">        initialValue = 1, allocationSize = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>)</span></span><br><span class="line">  <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>식별자 생성기 이름</td><td>필수</td></tr><tr><td>sequenceName</td><td>데이터베이스에 등록되어 있는 시퀀스 이름</td><td>hibernate_sequence</td></tr><tr><td>initialValue</td><td>DDL 생성 시에만 사용됨, 시퀀스 DDL을 생성할 때 처음 1 시작하는 수를 지정한다.</td><td>1</td></tr><tr><td>allocationSize</td><td>시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨 데이터베이스 시퀀스 값이 하나씩 증가하도록 설정되어 있으면 이 값 을 반드시 1로 설정해야 한다</td><td>50</td></tr><tr><td>catalog, schema</td><td>데이터베이스 catalog, schema 이름</td><td>50</td></tr></tbody></table><h3 id="TABLE-전략"><a href="#TABLE-전략" class="headerlink" title="TABLE 전략"></a>TABLE 전략</h3><p>키 생성 전용 테이블을 하나 만들어서 DB 시퀀스를 흉내내는 전략</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> MY_SEQUENCES (</span><br><span class="line">    sequence_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    next_val <span class="built_in">bigint</span>,</span><br><span class="line">    primary <span class="keyword">key</span> ( sequence_name )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@TableGenerator(</span></span><br><span class="line"><span class="meta">        name = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>,</span></span><br><span class="line"><span class="meta">        table = <span class="meta-string">"MY_SEQUENCES"</span>,</span></span><br><span class="line"><span class="meta">        pkColumnValue = <span class="meta-string">"MEMBER_SEQ"</span>, allocationSize = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.TABLE, generator = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>)</span></span><br><span class="line">  <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><table><thead><tr><th>속성</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>name</td><td>식별자 생성기 이름</td><td>필수</td></tr><tr><td>table</td><td>키생성 테이블명</td><td>hibernate_sequence</td></tr><tr><td>pkColumnName</td><td>시퀀스 컬럼명</td><td>sequence_name</td></tr><tr><td>valueColumnNa</td><td>시퀀스 값 컬럼명</td><td>next_val</td></tr><tr><td>pkColumnValue</td><td>키로 사용할 값 이름</td><td>엔티티 이름</td></tr><tr><td>initialValue</td><td>초기 값, 마지막으로 생성된 값이 기준이다.</td><td>0</td></tr><tr><td>allocationSize</td><td>시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨)</td><td>50</td></tr><tr><td>catalog, schema</td><td>데이터베이스 catalog, schema 이름</td><td></td></tr><tr><td>uniqueConstraint s(DDL)</td><td>유니크 제약 조건을 지정할 수 있다.</td><td><br></td></tr></tbody></table><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;JPA 엔티티 맵핑(Entity Mapping) 란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체와 테이블 매핑: @Entity, @Table&lt;/li&gt;
&lt;li&gt;필드와 컬럼 매핑: @Column&lt;/li&gt;
&lt;li&gt;기본 키 매핑: @Id&lt;/li&gt;
&lt;li&gt;연관관계 매핑: @ManyToOne, @JoinColumn
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="Entity" scheme="https://jaehyun8719.github.io/tags/Entity/"/>
    
      <category term="Entity Mapping" scheme="https://jaehyun8719.github.io/tags/Entity-Mapping/"/>
    
      <category term="엔티티 맵핑" scheme="https://jaehyun8719.github.io/tags/%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%B5%ED%95%91/"/>
    
  </entry>
  
  <entry>
    <title>JPA - 영속성 컨텍스트(Persistence Context)</title>
    <link href="https://jaehyun8719.github.io/2022/05/14/jpa/persistence-context/"/>
    <id>https://jaehyun8719.github.io/2022/05/14/jpa/persistence-context/</id>
    <published>2022-05-13T15:00:00.000Z</published>
    <updated>2022-05-14T18:41:52.766Z</updated>
    
    <content type="html"><![CDATA[<hr><p>JPA 영속성 컨텍스트(Persistence Context) 란?</p><ul><li>엔티티를 영구 저장하는 환경</li><li>영속성 컨텍스트는 논리적인 개념으로 눈에 보이지 않고, 엔티티 매니저를 통해서 영속성 컨텍스트에 접근함<a id="more"></a></li></ul><h2 id="엔티티의-생명주기"><a href="#엔티티의-생명주기" class="headerlink" title="엔티티의 생명주기"></a>엔티티의 생명주기</h2><p><img src="/images/jpa/persistence-context/persistence-context1.png" width="50%"></p><h3 id="비영속-new-transient"><a href="#비영속-new-transient" class="headerlink" title="비영속(new/transient)"></a>비영속(new/transient)</h3><p>JPA 와 전혀 관련 없이 객체만 생성된 상태가 비영속 상태</p><p><img src="/images/jpa/persistence-context/persistence-context2.png" width="50%"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="number">1L</span></span><br><span class="line">member.name = <span class="string">"helloA"</span></span><br></pre></td></tr></table></figure><h3 id="영속-managed"><a href="#영속-managed" class="headerlink" title="영속(managed)"></a>영속(managed)</h3><p>영속성 컨텍스트에 관리되는 상태<br>영속성 상태라고 DB에 저장 되는 것이 아니고, commit 이후에 DB에 저장 된다.</p><p><img src="/images/jpa/persistence-context/persistence-context3.png" width="50%"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 생성한 상태(비영속)</span></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="number">1L</span></span><br><span class="line">member.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 저장한 상태(영속)</span></span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure><h3 id="준영속-detached"><a href="#준영속-detached" class="headerlink" title="준영속(detached)"></a>준영속(detached)</h3><p>영속성 컨텍스트에 저장되었다가 분리된 상태</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태</span></span><br><span class="line">em.detach(member)</span><br></pre></td></tr></table></figure><h3 id="삭제-removed"><a href="#삭제-removed" class="headerlink" title="삭제(removed)"></a>삭제(removed)</h3><p>상제된 상태</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//객체를 삭제한 상태(삭제)</span></span><br><span class="line">em.remove(member)</span><br></pre></td></tr></table></figure><h2 id="엔티티-조회"><a href="#엔티티-조회" class="headerlink" title="엔티티 조회"></a>엔티티 조회</h2><p><img src="/images/jpa/persistence-context/persistence-context4.png" alt></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="string">"memeber1"</span><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    <span class="comment">// 강제 DB Insert</span></span><br><span class="line">    em.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">    member.name = <span class="string">"helloUpdate"</span></span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br><span class="line">member.name = <span class="string">"회원1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에 저장됨</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에서 조회</span></span><br><span class="line"><span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br></pre></td></tr></table></figure><p><code>em.persist(member)</code>1차 캐시에 저장 후 <code>find(&quot;memeber1&quot;)</code> 하게되면 DB를 조회하는게 아니고 1차 캐시를 조회함</p><p><img src="/images/jpa/persistence-context/persistence-context5.png" alt></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DB에 member1 값이 있다고 가정</span></span><br><span class="line"><span class="keyword">val</span> findMember1 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"><span class="keyword">val</span> findMember2 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br></pre></td></tr></table></figure><ol><li><code>find(&quot;memeber2&quot;)</code>를 하면 영속성 컨텍스트 안 1차 캐시를 조회</li><li>1차 캐시에 값이 없으면 DB를 조회</li><li>1차 캐시에 <code>member2</code> 저장</li><li><code>member2</code>를 반환</li><li>한번 1차 캐시에 저장되면 <code>member2</code> 조회시 1차 캐시에서 조회</li><li><code>find</code>로 2번 호출하는데 실제로 <code>select</code>쿼리는 한번 발생, 이유는 <code>findMember2</code>는 1차 캐쉬에서 조회<br>주의점) 트랙잰션 단위로 움직임</li></ol><h2 id="영속-엔티티의-동일설-보장"><a href="#영속-엔티티의-동일설-보장" class="headerlink" title="영속 엔티티의 동일설 보장"></a>영속 엔티티의 동일설 보장</h2><p>동일한 트랜잭션 안에서는 1차캐시에 저장되어있기 때문에 동일한 주소값을 참조(Collection에 똑같은 객체를 사용하는것과 같음)</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DB에 member1 값이 있다고 가정</span></span><br><span class="line"><span class="keyword">val</span> findMember1 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"><span class="keyword">val</span> findMember2 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"></span><br><span class="line">println(findMember1 == findMember2) <span class="comment">// 결과값: true</span></span><br></pre></td></tr></table></figure><h2 id="트랙잭션을-지원하는-쓰기-지연"><a href="#트랙잭션을-지원하는-쓰기-지연" class="headerlink" title="트랙잭션을 지원하는 쓰기 지연"></a>트랙잭션을 지원하는 쓰기 지연</h2><p>JPA는 트랜잭션을 하기전까지 영속성 컨텍스트 안에 데이터를 쌓고 있다.<br>트랙잭션 <code>commit</code>을 해야 SQL을 데이터베이스로 보낸다.</p><p><img src="/images/jpa/persistence-context/persistence-context6.png" alt></p><ol><li><code>persist</code>에 <code>memberA</code>를 넣으면 1차 캐시에 저장과 동시에 <code>memberA</code>에 Entity를 분석하여 SQL 문을 생성하여 <code>쓰기 지연 SQL 저장소</code>에 저장</li><li><code>memberB</code>도 동일하게 SQL문을 생성하여 <code>쓰기 지연 SQL 저장소</code> 저장</li><li><code>memberA</code>와 <code>memberB</code>가 <code>쓰기 지연 SQL 저장소</code>에 쌓인다</li></ol><p><img src="/images/jpa/persistence-context/persistence-context7.png" alt></p><ol start="4"><li><code>commit()</code>을 실행하면 <code>쓰기 지연 SQL 저장소</code>에 있던 SQL문이 <code>flush</code>로 데이터 베이스에 전달</li></ol><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><figure class="highlight kotlin"><figcaption><span>wrtieBehind.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> memberB = Member()</span><br><span class="line">    memberB.id = <span class="number">2L</span></span><br><span class="line">    memberB.name = <span class="string">"helloB"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    em.persist(memberB)</span><br><span class="line">    println(<span class="string">"=============== persist"</span>)</span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">=============== persist</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br></pre></td></tr></table></figure><ul><li>주석처리 한 부분에서 insert 쿼리문이 실행 되지 않고 commit 시점에 sql문 실행</li><li><code>hibernate.jdbc.batch_size</code> 옵션으로 <code>쓰기지연 SQL 저장소</code>에 쌓이면 처리 갯수 설정 가능(버퍼링 기능이나 실전에서 잘 사용하지 않음)</li></ul><h2 id="Entity-수정-변경-감지"><a href="#Entity-수정-변경-감지" class="headerlink" title="Entity 수정(변경 감지)"></a>Entity 수정(변경 감지)</h2><p><img src="/images/jpa/persistence-context/persistence-context8.png" alt></p><ol><li>데이터가 처음 읽어온 상태를 스냅샷으로 저장</li><li>commit 시점에서 <code>Entity</code>와 <code>스냅샷</code>을 비교 하여 변경 된 부분의 update 문을 DB에 전달</li></ol><figure class="highlight kotlin"><figcaption><span>dirtyChecking.kt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    <span class="comment">// 강제 DB Insert</span></span><br><span class="line">    em.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">    member.name = <span class="string">"helloUpdate"</span></span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* update</span></span><br><span class="line"><span class="comment">        entity.Member */</span> update</span><br><span class="line">            Member </span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">            name=? </span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            id=?</span><br></pre></td></tr></table></figure><ul><li>JPA는 update 코드가 있는게 아니라 Collection 처럼 변경되는 시점을 자동으로 감지해서 수정</li></ul><h2 id="Entity-삭제"><a href="#Entity-삭제" class="headerlink" title="Entity 삭제"></a>Entity 삭제</h2><p>변경 감지와 동일하게 작동</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">em.remove(member)</span><br></pre></td></tr></table></figure><h2 id="플러시-Flush"><a href="#플러시-Flush" class="headerlink" title="플러시(Flush)"></a>플러시(Flush)</h2><ul><li>영속성 컨텍스트를 비우지 않음</li><li>영속성 컨텍스트의 변경내용을 DB에 동기화</li><li>commit 직전에만 동기화</li></ul><h2 id="준영속-상태"><a href="#준영속-상태" class="headerlink" title="준영속 상태"></a>준영속 상태</h2><p>JPA가 영속성 컨텍스트에서 분리</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">em.detach(member)</span><br></pre></td></tr></table></figure><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;JPA 영속성 컨텍스트(Persistence Context) 란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엔티티를 영구 저장하는 환경&lt;/li&gt;
&lt;li&gt;영속성 컨텍스트는 논리적인 개념으로 눈에 보이지 않고, 엔티티 매니저를 통해서 영속성 컨텍스트에 접근함
    
    </summary>
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/categories/JPA/"/>
    
    
      <category term="JPA" scheme="https://jaehyun8719.github.io/tags/JPA/"/>
    
      <category term="영속성 컨텍스트" scheme="https://jaehyun8719.github.io/tags/%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/"/>
    
      <category term="Persistence Context" scheme="https://jaehyun8719.github.io/tags/Persistence-Context/"/>
    
      <category term="flush" scheme="https://jaehyun8719.github.io/tags/flush/"/>
    
  </entry>
  
  <entry>
    <title>6. webpack-dev-server</title>
    <link href="https://jaehyun8719.github.io/2020/06/24/webpack/dev-server/"/>
    <id>https://jaehyun8719.github.io/2020/06/24/webpack/dev-server/</id>
    <published>2020-06-23T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br><a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">webpack-dev-server</a>는 운영환경과 동일하게 배포전에 서버 구동을 하여 테스트할 수 있는 환경을 제공해 준다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/dev-server/dev-server_1.png" alt></p><h2 id="설치-amp-사용법"><a href="#설치-amp-사용법" class="headerlink" title="설치 &amp; 사용법"></a>설치 &amp; 사용법</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="app-js-수정"><a href="#app-js-수정" class="headerlink" title="app.js 수정"></a>app.js 수정</h3><figure class="highlight js"><figcaption><span>app.js </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><h3 id="style-scss-수정"><a href="#style-scss-수정" class="headerlink" title="style.scss 수정"></a>style.scss 수정</h3><figure class="highlight scss"><figcaption><span>style.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"./src/variables.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$brand-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>variables.scss</code>에 <code>$brand-color: #2ac1bc;</code>변수값을 설정 했다.</p>          </div><h3 id="package-json에-추가"><a href="#package-json에-추가" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="서버-구동"><a href="#서버-구동" class="headerlink" title="서버 구동"></a>서버 구동</h3><p>package.json에 등록한 명령어로 실행을 하여 서버를 구동한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_2.png" alt></p><ul><li>localhost:8080 으로 접속해 보면 결과물을 확인할 수 있고, webpack 서버는 파일 변화를 감지하면 webpack 을 재빌드 하여 브라우져를 갱신하여 변화된 코드로 화면을 보여준다.</li></ul><p><img src="/images/webpack/dev-server/dev-server_3.gif" alt></p><h2 id="기본-옵션-설정"><a href="#기본-옵션-설정" class="headerlink" title="기본 옵션 설정"></a>기본 옵션 설정</h2><p>webpack 설정 파일의 devServer 객체에 <a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">서버 옵션</a>을 설정할 수 있다.</p><h3 id="기본-옵셜-설명"><a href="#기본-옵셜-설명" class="headerlink" title="기본 옵셜 설명"></a>기본 옵셜 설명</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">"dist"</span>), </span><br><span class="line">        publicPath: <span class="string">"/"</span>, </span><br><span class="line">        host: <span class="string">"dev.domain.com"</span>,</span><br><span class="line">        overlay: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">8081</span>,</span><br><span class="line">        stats: <span class="string">"errors-only"</span>,</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>contentBase</td><td>정적파일 제공 경로(기본값: webpack의 output)</td></tr><tr><td>publicPath</td><td>브라우저 접근 경로(기본값: / )</td></tr><tr><td>host</td><td>Domain 환경을 맞춤</td></tr><tr><td>overlay</td><td>빌드시 에러나 경고를 브라우저에 출력</td></tr><tr><td>port</td><td>개발 서버 포트 번호를 설정</td></tr><tr><td>stats</td><td>상태 메시지 수준 설정(‘none’, ‘errors-only’, ‘minimal’, ‘normal’, ‘verbose’)</td></tr><tr><td>historyApiFallBack</td><td>history api를 사용하여 SPA 개발시 404가 발생하면 index.html으로 리다이렉트</td></tr></tbody></table><h3 id="webpack-config-js-수정"><a href="#webpack-config-js-수정" class="headerlink" title="webpack.config.js 수정"></a>webpack.config.js 수정</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    overlay: <span class="literal">true</span>,</span><br><span class="line">    stats: <span class="string">"errors-only"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="서버-구동-1"><a href="#서버-구동-1" class="headerlink" title="서버 구동"></a>서버 구동</h3><p>서버 구동후 에러를 발생시켜 브라우저 화면에 에러가 출력을 확인한다.</p><p><img src="/images/webpack/dev-server/dev-server_4.gif" alt></p><h2 id="Hot-Module-Replacement-HMR"><a href="#Hot-Module-Replacement-HMR" class="headerlink" title="Hot Module Replacement(HMR)"></a>Hot Module Replacement(HMR)</h2><p><a href="https://webpack.js.org/concepts/hot-module-replacement/" rel="external nofollow noopener noreferrer" target="_blank">Hot Module Replacement</a>는 브라우저 전체 화면을 갱신하지 않고, 변경된 모듈만 갱신한다. </p><h3 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h3><p><a href="https://webpack.js.org/configuration/dev-server/#devserverhot" rel="external nofollow noopener noreferrer" target="_blank">devServer.hot</a> 속성을 설정</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    hot:<span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="서버-구동-2"><a href="#서버-구동-2" class="headerlink" title="서버 구동"></a>서버 구동</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure><p>서버 구동을 완료하고, <code>src/style.scss</code> 파일에 배경화면을 값을 변경하여 브라우저가 갱신을 하지 않고 배경색깔이 변경되는 것을 확인</p><p><img src="/images/webpack/dev-server/dev-server_5.gif" alt></p><h3 id="핫로딩-지원하는-로더"><a href="#핫로딩-지원하는-로더" class="headerlink" title="핫로딩 지원하는 로더"></a>핫로딩 지원하는 로더</h3><p><a href="https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks" rel="external nofollow noopener noreferrer" target="_blank">Hot Module Replacemnt 지원하는 로더</a>는 참고</p><figure class="highlight js"><figcaption><span>style-loader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(</span><br><span class="line">        $&#123;loaderUtils.stringifyRequest(<span class="keyword">this</span>, <span class="string">`!!<span class="subst">$&#123;request&#125;</span>`</span>)&#125;,</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>style-loader코드에서 보면 <code>if (module.hot)</code> 값이 <code>true</code>일 경우 <code>module.hot.accept</code>함수를 사용한다.</p>          </div><h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><p>웹팩을 최적화 하는 방법중에 <a href="https://webpack.js.org/configuration/mode/" rel="external nofollow noopener noreferrer" target="_blank">mode</a> 값을 설정하는 방식</p><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>development</td><td>NamedChunksPlugin, NamedModulesPlugin</td></tr><tr><td>production</td><td>FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin, TerserPlugin</td></tr></tbody></table><ul><li>설정한 <code>mode</code> 옵션 값에 따라 사용하는 플러그인이 다르게 사용된다.</li></ul><h3 id="webpack-config-js-mode-값-추가"><a href="#webpack-config-js-mode-값-추가" class="headerlink" title="webpack.config.js mode 값 추가"></a>webpack.config.js mode 값 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mode = process.env.NODE_ENV || <span class="string">"development"</span>; <span class="comment">// 기본값을 `development` 설정</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="package-json-수정"><a href="#package-json-수정" class="headerlink" title="package.json 수정"></a>package.json 수정</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --progress"</span> <span class="comment">// 개발시 NODE_ENV=development로 변경</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="빌드"><a href="#빌드" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><div class="note warning no-icon">            <p>운영체제가 window일 경우 <strong>‘NODE_ENV’은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는<br>배치 파일이 아닙니다.</strong> 메세지 발생시 <code>$ npm install -g win-node-env</code> 설치</p>          </div><h4 id="NODE-ENV-production-빌드-결과"><a href="#NODE-ENV-production-빌드-결과" class="headerlink" title="NODE_ENV=production 빌드 결과"></a>NODE_ENV=production 빌드 결과</h4><p><img src="/images/webpack/dev-server/dev-server_6.png" alt></p><h4 id="NODE-ENV-development-빌드-결과"><a href="#NODE-ENV-development-빌드-결과" class="headerlink" title="NODE_ENV=development 빌드 결과"></a>NODE_ENV=development 빌드 결과</h4><p><img src="/images/webpack/dev-server/dev-server_7.png" alt></p><ul><li>두 결과물을 보면 <code>NODE_ENV=production</code>과 <code>NODE_ENV=development</code>로 빌드 시 사용되는 플러그인이 다른 것을 확인할 수 있다.</li></ul><h2 id="optimazation-속성으로-최적화"><a href="#optimazation-속성으로-최적화" class="headerlink" title="optimazation 속성으로 최적화"></a>optimazation 속성으로 최적화</h2><p>빌드 과정에서 커스터마이징할 수 있는 <a href="https://webpack.js.org/configuration/optimization/" rel="external nofollow noopener noreferrer" target="_blank">optimazation</a>속성을 사용.</p><h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><p><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production" rel="external nofollow noopener noreferrer" target="_blank">optimize-css-assets-webpack-plugin</a>은 css 파일을 압축하는 최적화 플러그인</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h4><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: mode === <span class="string">'production'</span> ? [ <span class="comment">// mode가 production일 경우만 실행</span></span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(),</span><br><span class="line">        ] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>optimization.minimizer</code>는 <code>OptimizeCSSAssetsPlugin</code>을 전달해서 css파일을 압축하도록 하는 플러그인</li></ul><h4 id="NODE-ENV-production-빌드"><a href="#NODE-ENV-production-빌드" class="headerlink" title="NODE_ENV=production 빌드"></a>NODE_ENV=production 빌드</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_8.png" alt></p><ul><li>빌드 후 css 코드가 압축된 것을 확인할 수 있다.</li></ul><h3 id="terser-webpack-plugin"><a href="#terser-webpack-plugin" class="headerlink" title="terser-webpack-plugin"></a>terser-webpack-plugin</h3><p><a href="https://webpack.js.org/plugins/terser-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">TerserWebpackPlugin</a>는 debugger 구문을 제거하거나, 옵션 값으로 <code>console.log</code>도 배포전에 삭제하는 플러그인이다.</p><h4 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D terser-webpack-plugin</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h4><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     optimization: &#123;</span><br><span class="line">        minimizer: mode === <span class="string">'production'</span> ? [ <span class="comment">// mode가 production일 경우만 실행</span></span><br><span class="line">            <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">                terserOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        drop_console: <span class="literal">true</span>, <span class="comment">// console.log를 제거</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">        ] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NODE-ENV-production-빌드-1"><a href="#NODE-ENV-production-빌드-1" class="headerlink" title="NODE_ENV=production 빌드"></a>NODE_ENV=production 빌드</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_9.png" alt></p><ul><li>빌드 후 <code>consol.log</code>를 검색해보면 삭제 된 것을 확인할 수 있다. </li></ul><h2 id="코드-스플리팅"><a href="#코드-스플리팅" class="headerlink" title="코드 스플리팅"></a>코드 스플리팅</h2><p>코드를 하나로 압축 하는 것 외에 코드 결과물을 여러개로 쪼개서 다운로드 속도를 빠르게 할 수 있다</p><div class="note warning no-icon">            <p>초기 프로젝트에는 크게 사용할 일이 없지만, 프로젝트 파일이 커지면 적용하면 좋은 거지 꼭 해야 되는 것은 아니다.<br>코드 스플리팅에대해서 간단하게만 설명하고, 다이나익 임포트에 대해서는 설명을 안한다.</p>          </div><h3 id="result-js-파일-생성"><a href="#result-js-파일-생성" class="headerlink" title="result.js 파일 생성"></a>result.js 파일 생성</h3><figure class="highlight js"><figcaption><span>result.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    hide() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hide"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"show"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="app-js-수정-1"><a href="#app-js-수정-1" class="headerlink" title="app.js 수정"></a>app.js 수정</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</span><br><span class="line"><span class="keyword">import</span> result <span class="keyword">from</span> <span class="string">"./result"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line">result.hide();</span><br><span class="line">result.show();</span><br></pre></td></tr></table></figure><h3 id="중복-코드-제거"><a href="#중복-코드-제거" class="headerlink" title="중복 코드 제거"></a>중복 코드 제거</h3><p><a href="https://webpack.js.org/guides/code-splitting/#prevent-duplication" rel="external nofollow noopener noreferrer" target="_blank">SplitChunksPlugin</a>는 코드를 분리할때 중복을 예방하는 플러그인이다.</p><h3 id="webpack-config-js에-추가-2"><a href="#webpack-config-js에-추가-2" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span>,</span><br><span class="line">        result: <span class="string">"./src/result.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">"all"</span>, <span class="comment">// 중복 제거 플로그인 옵션</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="빌드-1"><a href="#빌드-1" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_10.png" alt></p><p>index.html 에 result.js 추가 확인</p><p><img src="/images/webpack/dev-server/dev-server_11.png" alt></p><h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><p><a href="https://webpack.js.org/configuration/externals/" rel="external nofollow noopener noreferrer" target="_blank">externals</a>은 패키지로 제공될때 이미 빌드 과정을 한것을 제외시켜 최적화 시키는 방법이다.<br>axios같은 써드파티 라이브러리로 예를 들어보자.</p><h3 id="CopyWebpackPlugin-amp-axios설치"><a href="#CopyWebpackPlugin-amp-axios설치" class="headerlink" title="CopyWebpackPlugin &amp; axios설치"></a>CopyWebpackPlugin &amp; axios설치</h3><p>(CopyWebpackPlugin)[<a href="https://webpack.js.org/plugins/copy-webpack-plugin/]은" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/plugins/copy-webpack-plugin/]은</a> 파일을 복사하는 플러그인이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D copy-webpack-plugin</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D axios</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-3"><a href="#webpack-config-js에-추가-3" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyPlugin = <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">        axios: <span class="string">'axios'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">        patterns: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">from</span>: <span class="string">"./node_modules/axios/dist/axios.min.js"</span>,</span><br><span class="line">                to: <span class="string">"./axios.min.js"</span> <span class="comment">// 목적지 파일에 들어간다</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>axois를 번들에 포함 하지 않고 빌드하며, <code>to</code>는 목적지로 파일을 복사한다.</p><h3 id="index-html에-추가"><a href="#index-html에-추가" class="headerlink" title="index.html에 추가"></a>index.html에 추가</h3><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="빌드-2"><a href="#빌드-2" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/dev-server/dev-server_12.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/dev-server/</a></li><li><a href="https://webpack.js.org/concepts/hot-module-replacement/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/hot-module-replacement/</a></li><li><a href="https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks</a></li><li><a href="https://webpack.js.org/configuration/mode/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/mode/</a></li><li><a href="https://webpack.js.org/configuration/optimization/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/optimization/</a></li><li><a href="https://webpack.js.org/guides/code-splitting/#prevent-duplication" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/code-splitting/#prevent-duplication</a></li><li><a href="https://webpack.js.org/plugins/copy-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/plugins/copy-webpack-plugin/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;&lt;a href=&quot;https://webpack.js.org/configuration/dev-server/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack-dev-server&lt;/a&gt;는 운영환경과 동일하게 배포전에 서버 구동을 하여 테스트할 수 있는 환경을 제공해 준다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack dev-server" scheme="https://jaehyun8719.github.io/tags/webpack-dev-server/"/>
    
  </entry>
  
  <entry>
    <title>5. ESLint &amp; prettier</title>
    <link href="https://jaehyun8719.github.io/2020/06/22/webpack/eslint-prettier/"/>
    <id>https://jaehyun8719.github.io/2020/06/22/webpack/eslint-prettier/</id>
    <published>2020-06-21T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.</p><ol><li><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a>는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구</li><li><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">Prettier</a>는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.<a id="more"></a></li></ol><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/eslint-prettier/eslint-prettier_1.png" alt></p><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a>는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구</p><h3 id="ESLint-설치"><a href="#ESLint-설치" class="headerlink" title="ESLint 설치"></a>ESLint 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D eslint</span><br></pre></td></tr></table></figure><h3 id="ESLint-초기화"><a href="#ESLint-초기화" class="headerlink" title="ESLint 초기화"></a>ESLint 초기화</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx eslint --init</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_2.gif" alt></p><div class="note info no-icon">            <p>대화식 명령어로 진행하는데 현재 사용하고 있는 환경에 대해 답을 하면 된다.<br><code>.eslintrc</code> 파일이 자동 생성된다.</p>          </div><h3 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title="eslintrc.js"></a>eslintrc.js</h3><p>ESLint 가 제공하는 여러 가지 규칙을 미리 정해 놓은 eslint:recommended 설정<br><a href="https://eslint.org/docs/rules/" rel="external nofollow noopener noreferrer" target="_blank">ESLint 규칙</a> 목록에서 왼쪽에 체크 표시되어 있는 설정을 활성화</p><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: <span class="number">11</span>,</span><br><span class="line">        sourceType: <span class="string">"module"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>node: true</code>는 <code>webpack.config.js</code> 빌드시 node 환경도 적용</li><li>이 설정 외에 규칙이 필요하면 rules 속성에 추가하면 된다.</li></ul><div class="note info no-icon">            <p>외부 스타일 가이드 중에 <a href="https://github.com/airbnb/javascript" rel="external nofollow noopener noreferrer" target="_blank">Airbnb Style Guide</a>, <a href="https://github.com/google/eslint-config-google" rel="external nofollow noopener noreferrer" target="_blank">Google Style Guide</a>가 대표적인 가이드로 많이 사용된다.</p>          </div><h3 id="eslintignore-생성-선택-사항"><a href="#eslintignore-생성-선택-사항" class="headerlink" title=".eslintignore 생성(선택 사항)"></a>.eslintignore 생성(선택 사항)</h3><p>ESLint에 적용되지 않는 대상을 정하는 파일</p><figure class="highlight js"><figcaption><span>.eslintignore</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="package-json에-추가"><a href="#package-json에-추가" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --progress"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><code>eslint src --fix</code> 명령어로 <code>src</code> 하위 폴더에 있는 파일을 ESLint 적용, <code>--fix</code>는 ESLint에 적용된 파일을 자동으로 스타일 코드로 수정</li></ul><h3 id="app-js-코드-수정"><a href="#app-js-코드-수정" class="headerlink" title="app.js 코드 수정"></a>app.js 코드 수정</h3><figure class="highlight js"><figcaption><span>src/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);;;;;;;;;;;;;;;;;;;;;</span><br></pre></td></tr></table></figure><ul><li><code>;;;;;;;;;;;;;;;;;;;;</code>을 추가하여 ESLint 불필요한 부분 수정되는지 확인</li></ul><h3 id="ESLint-빌드"><a href="#ESLint-빌드" class="headerlink" title="ESLint 빌드"></a>ESLint 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_3.gif" alt></p><ul><li><code>;;;;;;;;;;;;;;;;;;;;</code>삭제되었는지 확인</li><li>이외에도 여러 가지 스타일 코드대로 수정이 된다.</li></ul><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>여기서는 단독으로 Prettier 방법보다 ESLint와 함께 통합하는 방법에 대해서만 설명한다.<br><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">Prettier</a>는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.</p><h3 id="prettier-설치"><a href="#prettier-설치" class="headerlink" title="prettier 설치"></a>prettier 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D prettier</span><br></pre></td></tr></table></figure><h3 id="eslint-plugin-prettier-설치"><a href="#eslint-plugin-prettier-설치" class="headerlink" title="eslint-plugin-prettier 설치"></a>eslint-plugin-prettier 설치</h3><p><a href="https://github.com/prettier/eslint-plugin-prettier" rel="external nofollow noopener noreferrer" target="_blank">eslint-plugin-prettier</a>는 프리티어 규칙을 ESLint 규칙으로 추가하는 플러그인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D eslint-plugin-prettier</span><br></pre></td></tr></table></figure><h3 id="prettierrc-생성"><a href="#prettierrc-생성" class="headerlink" title=".prettierrc 생성"></a>.prettierrc 생성</h3><p>prettier에 대한 <a href="https://prettier.io/docs/en/options.html" rel="external nofollow noopener noreferrer" target="_blank">Option</a>에 대해서 설정</p><figure class="highlight js"><figcaption><span>.prettierrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"tabWidth"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>여기서는 탭 간격만 기본값이 2를 tab 간격을 4로 설정하였다.</li></ul><h3 id="eslintrc-js-수정"><a href="#eslintrc-js-수정" class="headerlink" title="eslintrc.js 수정"></a>eslintrc.js 수정</h3><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: <span class="number">11</span>,</span><br><span class="line">        sourceType: <span class="string">"module"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="app-js-코드-수정-1"><a href="#app-js-코드-수정-1" class="headerlink" title="app.js 코드 수정"></a>app.js 코드 수정</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log();;;;;;;</span><br></pre></td></tr></table></figure><h3 id="ESLint-빌드-1"><a href="#ESLint-빌드-1" class="headerlink" title="ESLint 빌드"></a>ESLint 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log();</span><br><span class="line"></span><br><span class="line">name = <span class="string">"jaehyun"</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_4.gif" alt></p><ul><li>2번째 줄에서는 ESLint의 에러가 발생으로 로그창 에 에러 내용 출력</li><li>3번째 줄에서는 prettier의 <code>;;;;;;</code> 삭제</li><li>5번째 줄에서는 prettier의 <code>&#39;&#39;</code> 을 <code>&quot;&quot;</code>로 변경</li></ul><h2 id="자동화"><a href="#자동화" class="headerlink" title="자동화"></a>자동화</h2><p>git commit 시 자동으로 ESLint 빌드를 실행하기 위해서는 Git Hook을 이용해야 된다.<br>Git Hook을 쉽게 사용할 수 있는 도구는 <a href="https://github.com/typicode/husky" rel="external nofollow noopener noreferrer" target="_blank">husky</a>이다.</p><h3 id="husky-설치"><a href="#husky-설치" class="headerlink" title="husky 설치"></a>husky 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D husky</span><br></pre></td></tr></table></figure><h3 id="package-json에-추가-1"><a href="#package-json에-추가-1" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>commit 하기 전에 ESLint 실행하고 오류를 발견하면 커밋 과정은 취소된다.</p>          </div><h3 id="변경된-파일만-ESLint-검사"><a href="#변경된-파일만-ESLint-검사" class="headerlink" title="변경된 파일만 ESLint 검사"></a>변경된 파일만 ESLint 검사</h3><p><a href="https://github.com/okonet/lint-staged" rel="external nofollow noopener noreferrer" target="_blank">lint-staged</a>를 이용해서 변경된 파일만 ESLint 실행하는 도구</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D lint-staged</span><br></pre></td></tr></table></figure><h3 id="package-json-수정"><a href="#package-json-수정" class="headerlink" title="package.json 수정"></a>package.json 수정</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">  <span class="string">"*.js"</span>: <span class="string">"eslint --fix"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/eslint-prettier/eslint-prettier_5.png" alt></p><ul><li>app.js에 변수명을 선언하지 않았기 때문에 commit을 할 수 없고, ESLint 에러가 나타난다.</li></ul><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">https://eslint.org/</a></li><li><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">https://prettier.io/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://eslint.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;ESLint&lt;/a&gt;는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://prettier.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Prettier&lt;/a&gt;는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack lint" scheme="https://jaehyun8719.github.io/tags/webpack-lint/"/>
    
      <category term="webpack prettier" scheme="https://jaehyun8719.github.io/tags/webpack-prettier/"/>
    
  </entry>
  
  <entry>
    <title>4. babel &amp; sass</title>
    <link href="https://jaehyun8719.github.io/2020/06/17/webpack/babel/"/>
    <id>https://jaehyun8719.github.io/2020/06/17/webpack/babel/</id>
    <published>2020-06-16T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>webpack에서 로더 형태로 제공하는 <a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">babel-loader</a>을 이용하여 사용한다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/babel/babel_1.png" alt></p><h2 id="babel-loader-설치"><a href="#babel-loader-설치" class="headerlink" title="babel-loader 설치"></a>babel-loader 설치</h2><p><a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">babel-loader</a>을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D babel-loader</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>, <span class="comment">// 바벨 로더를 추가</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test에는 <code>.js</code> 확장자로 끝난 파일이 babel-loader가 처리하도록 설정</li><li>exclude에는 <code>/node_modules/</code>에 있는 <code>.js</code> 파일이 처리되지 않도록 설정(바벨 로더의 속도 향상)</li><li>loader에는 <code>babel-loader</code> 추가 </li></ul><h2 id="env-preset-설정과-polyfile"><a href="#env-preset-설정과-polyfile" class="headerlink" title="env preset 설정과 polyfile"></a>env preset 설정과 polyfile</h2><h3 id="preset-env-설치"><a href="#preset-env-설치" class="headerlink" title="preset-env 설치"></a>preset-env 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D @babel/preset-env</span><br></pre></td></tr></table></figure><h3 id="타켓-브라우져-설정"><a href="#타켓-브라우져-설정" class="headerlink" title="타켓 브라우져 설정"></a>타켓 브라우져 설정</h3><p>env preset은 브라우저에 맞는 플러그인들을 찾아 최적 코드로 출력해 준다.</p><h4 id="babel-config-js-생성"><a href="#babel-config-js-생성" class="headerlink" title="babel.config.js 생성"></a>babel.config.js 생성</h4><p><a href="https://babeljs.io/docs/en/config-files#project-wide-configuration" rel="external nofollow noopener noreferrer" target="_blank">babel.config.js</a>는 기본 설정 파일이다.</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                    chrome: <span class="string">"79"</span>, <span class="comment">// 크롬 79까지 지원하는 코드 생성</span></span><br><span class="line">                    ie: <span class="string">"11"</span> <span class="comment">// 익스플로러 11 까지 지원하는 코드 생성</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="webpack-빌드-확인"><a href="#webpack-빌드-확인" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/babel/babel_2.png" alt></p><p><code>app.js</code>에 작성된 코드가 <code>dist/main.js</code>에서 const가 var로 변환 되어 익스플로러도 지원을 한다.</p><h3 id="polyfile-설정"><a href="#polyfile-설정" class="headerlink" title="polyfile 설정"></a>polyfile 설정</h3><p>바벨은 ECMAScript2015+를 ECMAScript5 버전으로 변환할 수 있는 것만 빌드하고, 그렇지 못한 것들을 <code>polyfile</code>이라고 부르는 코드 조각으로 해결한다.<br>(참고 <a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.promise.js" rel="external nofollow noopener noreferrer" target="_blank">core-js promise</a>)</p><h4 id="core-js-설치"><a href="#core-js-설치" class="headerlink" title="core-js 설치"></a>core-js 설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D core-js@3</span><br></pre></td></tr></table></figure><h4 id="src-app-js-수정"><a href="#src-app-js-수정" class="headerlink" title="src/app.js 수정"></a>src/app.js 수정</h4><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// core-js</span></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'foo'</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);  <span class="comment">// expected output: "foo"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(promise1); <span class="comment">// expected output: [object Promise]</span></span><br></pre></td></tr></table></figure><h4 id="babel-config-js에-추가"><a href="#babel-config-js에-추가" class="headerlink" title="babel.config.js에 추가"></a>babel.config.js에 추가</h4><p><code>env preset</code>은 <code>polyfile</code>을 지정할 수 있는 옵션 제공</p><figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                    chrome: <span class="string">"79"</span>, <span class="comment">// 크롬 79까지 지원하는 코드 생성</span></span><br><span class="line">                    ie: <span class="string">"11"</span> <span class="comment">// 익스플로러 11 까지 지원하는 코드 생성</span></span><br><span class="line">                &#125;,</span><br><span class="line">                useBuiltIns: <span class="string">"usage"</span>, <span class="comment">// 폴리필 사용 방식 지정</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                    version: <span class="number">3</span> <span class="comment">// 폴리필 버전 지정</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins" rel="external nofollow noopener noreferrer" target="_blank">userBuiltIns</a>은 polyfile 사용할지 설정하는 옵션(기본값 : false)</li><li><a href="https://babeljs.io/docs/en/babel-preset-env#corejs" rel="external nofollow noopener noreferrer" target="_blank">core-js</a>에 3버전 모듈을 가지고 온다.</li></ul><h4 id="webpack-빌드-확인-1"><a href="#webpack-빌드-확인-1" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><ul><li><a href="https://caniuse.com/#search=Promise" rel="external nofollow noopener noreferrer" target="_blank">caniuse</a> 에서 <code>Promise()</code> 브라우저 지원 확인</li></ul><p><img src="/images/webpack/babel/babel_3.png" alt></p><ul><li>ie 11버젼에서 작동 확인</li></ul><p><img src="/images/webpack/babel/babel_4.png" alt></p><p><code>app.js</code>에 작성된 <code>new Promise()</code>가 변환 되어 익스플로러에서도 작동한다.</p><h2 id="sass-설정"><a href="#sass-설정" class="headerlink" title="sass 설정"></a>sass 설정</h2><h3 id="sass-loader-설치"><a href="#sass-loader-설치" class="headerlink" title="sass-loader 설치"></a>sass-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D sass-loader</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D node-sass</span><br></pre></td></tr></table></figure><h3 id="variables-scss-파일-생성"><a href="#variables-scss-파일-생성" class="headerlink" title="variables.scss 파일 생성"></a>variables.scss 파일 생성</h3><figure class="highlight scss"><figcaption><span>variables.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$brand-color</span>: <span class="number">#2ac1bc</span>;</span><br><span class="line"><span class="variable">$primary-color</span>: blue;</span><br><span class="line"><span class="variable">$secondary-color</span>: <span class="number">#aaa</span>;</span><br><span class="line"><span class="variable">$white-color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$border-color</span>: lighten(<span class="variable">$secondary-color</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$span</span>: <span class="number">4px</span>;</span><br></pre></td></tr></table></figure><h3 id="style-scss-파일-생성"><a href="#style-scss-파일-생성" class="headerlink" title="style.scss 파일 생성"></a>style.scss 파일 생성</h3><figure class="highlight scss"><figcaption><span>style.scss</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"./src/variables.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$brand-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-sass-loader-추가"><a href="#webpack-config-js에-sass-loader-추가" class="headerlink" title="webpack.config.js에 sass-loader 추가"></a>webpack.config.js에 sass-loader 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(scss|css)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                        <span class="string">"style-loader"</span>,</span><br><span class="line">                        <span class="string">"css-loader"</span>,</span><br><span class="line">                        <span class="string">"sass-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-빌드-확인-2"><a href="#webpack-빌드-확인-2" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/babel/babel_5.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://babeljs.io/" rel="external nofollow noopener noreferrer" target="_blank">https://babeljs.io/</a></li><li><a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/babel/babel-loader</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;webpack에서 로더 형태로 제공하는 &lt;a href=&quot;https://github.com/babel/babel-loader&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;babel-loader&lt;/a&gt;을 이용하여 사용한다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="babel" scheme="https://jaehyun8719.github.io/tags/babel/"/>
    
      <category term="babel preset" scheme="https://jaehyun8719.github.io/tags/babel-preset/"/>
    
      <category term="babel polyfile" scheme="https://jaehyun8719.github.io/tags/babel-polyfile/"/>
    
      <category term="sass" scheme="https://jaehyun8719.github.io/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>3. webpack plugin</title>
    <link href="https://jaehyun8719.github.io/2020/06/10/webpack/plugin/"/>
    <id>https://jaehyun8719.github.io/2020/06/10/webpack/plugin/</id>
    <published>2020-06-09T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.128Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>플러그인(plugin)는 로더는 파일 단위로 처리하는 반면 플러그인은 번들 된 결과물을 처리한다.<br><a id="more"></a></p><h2 id="커스텀-플러그인-만들기"><a href="#커스텀-플러그인-만들기" class="headerlink" title="커스텀 플러그인 만들기"></a>커스텀 플러그인 만들기</h2><p>플러그인을 사용하기 전에 커스텀 플러그인을 만들어서 확인해 보자.</p><h3 id="customPlugin-js-생성"><a href="#customPlugin-js-생성" class="headerlink" title="customPlugin.js 생성"></a>customPlugin.js 생성</h3><figure class="highlight javascript"><figcaption><span>customPlugin.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.done.tap(<span class="string">"Custom Plugin"</span>, stats =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Hello World"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CustomPlugin;</span><br></pre></td></tr></table></figure><ul><li>로더와 다르게 플러그인은 클래스로 작성해야 한다. 플로그인 작업이 완료되는 시점에 <code>console.log(&quot;Hello World&quot;);</code> 함수 호출</li></ul><h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CustomPlugin = <span class="built_in">require</span>(<span class="string">"./src/customPlugin.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CustomPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="커스텀-플러그인-실행-결과-확인"><a href="#커스텀-플러그인-실행-결과-확인" class="headerlink" title="커스텀 플러그인 실행 결과 확인"></a>커스텀 플러그인 실행 결과 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_1.png" alt></p><h2 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h2><p><a href="https://webpack.js.org/plugins/banner-plugin/" rel="external nofollow noopener noreferrer" target="_blank">BannerPlugin</a>은 웹팩으로 빌드 한 결과물에 정보를 입력할 수 있다.</p><h3 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> customPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">            banner: <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                <span class="string">`commitVersion: <span class="subst">$&#123;childProcess.execSync(<span class="string">"git rev-parse --short HEAD"</span>)&#125;</span>`</span> +</span><br><span class="line">                <span class="string">`Build Date: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()&#125;</span>\n`</span> +</span><br><span class="line">                <span class="string">`Author: <span class="subst">$&#123;childProcess.execSync(<span class="string">"git config user.name"</span>)&#125;</span>`</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>빌드 날짜, 커밋 해쉬, 빌드 한 유저 정보 추가</li></ul><h3 id="BannerPlugin-빌드"><a href="#BannerPlugin-빌드" class="headerlink" title="BannerPlugin 빌드"></a>BannerPlugin 빌드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_2.png" alt></p><ul><li><code>./dist/main.js</code>에 BannerPlugin을 이용한 정보를 확인</li></ul><h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p><a href="https://webpack.js.org/plugins/define-plugin/" rel="external nofollow noopener noreferrer" target="_blank">DefinePlugin</a>은 개발 환경과 운영 환경의 API서버 주소가 다르기 때문에 빌드를 할 때 명령어로 개발 관련, 운영 관련 환경으로 빌드를 하게 한다.</p><h3 id="webpack-config-js에-추가-2"><a href="#webpack-config-js에-추가-2" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">"v.1.2.3"</span>),</span><br><span class="line">            PRODUCTION : process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>) : <span class="built_in">JSON</span>.stringify(<span class="literal">false</span>),</span><br><span class="line">            MAX_COUNT: <span class="built_in">JSON</span>.stringify(<span class="number">999</span>),</span><br><span class="line">            <span class="string">"api.domain"</span>: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">JSON</span>.stringify(<span class="string">"http://prod.api.domain.com"</span>) : <span class="built_in">JSON</span>.stringify(<span class="string">"http://dev.api.domain.com"</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>process.env.NODE_ENV 웹팩 빌드 시 설정한 값에 따라 운영, 개발 환경 변경</li></ul><h3 id="app-js에-추가"><a href="#app-js에-추가" class="headerlink" title="app.js에 추가"></a>app.js에 추가</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(VERSION) <span class="comment">// "v.1.2.3"</span></span><br><span class="line"><span class="built_in">console</span>.log(PRODUCTION) <span class="comment">// true or false</span></span><br><span class="line"><span class="built_in">console</span>.log(MAX_COUNT) <span class="comment">// 999</span></span><br><span class="line"><span class="built_in">console</span>.log(api.domain) <span class="comment">// "http://prod.api.domain.com" or "http://dev.api.domain.com"</span></span><br></pre></td></tr></table></figure><h3 id="DefinePlugin-빌드"><a href="#DefinePlugin-빌드" class="headerlink" title="DefinePlugin 빌드"></a>DefinePlugin 빌드</h3><ol><li>운영 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_3.png" alt></p><ol start="2"><li>개발 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_4.png" alt></p><h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p><a href="https://github.com/jantimon/html-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">HtmlWebpackPlugin</a>은 빌드 타입 값을 넣거나 코드를 압축하여 HTML 파일을 후처리하는데 사용한다.</p><h3 id="HtmlWebpackPlugin-설치"><a href="#HtmlWebpackPlugin-설치" class="headerlink" title="HtmlWebpackPlugin 설치"></a>HtmlWebpackPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D html-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="src-index-html-수정"><a href="#src-index-html-수정" class="headerlink" title="src/index.html 수정"></a>src/index.html 수정</h3><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;<span class="name">%=</span> <span class="attr">env</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 로딩 스크립트 제거 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="../dist/main.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>title</code>태그에  <code>&lt;%= env %&gt;</code> ejs 문법을 이용하여 웹팩에 빌드 한 결과물을 자동으로 로딩하여 코드에 주입해 준다.</li></ul><h3 id="webpack-config-js에-추가-3"><a href="#webpack-config-js에-추가-3" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">"./src/index.html"</span>, <span class="comment">// 템플릿 경로를 지정</span></span><br><span class="line">            templateParameters: &#123; <span class="comment">// 템플릿에 주입할 파라매터 변수 지정</span></span><br><span class="line">                env: process.env.NODE_ENV === <span class="string">"development"</span> ? <span class="string">"(개발용)"</span> : <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            minify: process.env.NODE_ENV === <span class="string">"production"</span> ? &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 빈칸 제거</span></span><br><span class="line">                removeComments: <span class="literal">true</span>, <span class="comment">// 주석 제거</span></span><br><span class="line">            &#125; : <span class="literal">false</span>,</span><br><span class="line">            hash: <span class="literal">true</span>, <span class="comment">// 정적 파일을 불러올때 쿼리문자열에 웹팩 해쉬값을 추가</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HtmlWebpackPlugin-빌드"><a href="#HtmlWebpackPlugin-빌드" class="headerlink" title="HtmlWebpackPlugin 빌드"></a>HtmlWebpackPlugin 빌드</h3><ol><li>운영 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_5.png" alt></p><p><img src="/images/webpack/plugin/plugin_7.png" alt></p><ul><li>빈칸 제거, 주석 제거, 정적 파일 로딩 시 해쉬값을 추가</li></ul><ol start="2"><li>개발 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>빌드 된 결과물은 <code>./dist/index.html</code>에서 확인하면 된다.</p>          </div><p><img src="/images/webpack/plugin/plugin_6.png" alt></p><h2 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h2><p><a href="https://github.com/johnagan/clean-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">CleanWebpackPlugin</a>은 빌드 이전 결과물을 삭제하는 플러그인이다.</p><h3 id="CleanWebpackPlugin-설치"><a href="#CleanWebpackPlugin-설치" class="headerlink" title="CleanWebpackPlugin 설치"></a>CleanWebpackPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D clean-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-4"><a href="#webpack-config-js에-추가-4" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CleanWebpackPlugin-빌드"><a href="#CleanWebpackPlugin-빌드" class="headerlink" title="CleanWebpackPlugin 빌드"></a>CleanWebpackPlugin 빌드</h3><ul><li>빌드 전</li></ul><p><img src="/images/webpack/plugin/plugin_8.png" alt></p><ul><li>빌드 후</li></ul><p><img src="/images/webpack/plugin/plugin_9.png" alt></p><div class="note info no-icon">            <p>빌드 후 <code>small.png</code>파일에 삭제된 것을 확인할 수 있다.</p>          </div><h2 id="MiniCssExtractPlugin"><a href="#MiniCssExtractPlugin" class="headerlink" title="MiniCssExtractPlugin"></a>MiniCssExtractPlugin</h2><p><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" rel="external nofollow noopener noreferrer" target="_blank">MiniCssExtractPlugin</a>은 하나의 자바스크립트의 결과물로 만드는 것이 아니라, 스타일시트 코드만 뽑아 CSS 파일을 만들어 주는 플러그인이다. </p><h3 id="MiniCssExtractPlugin-설치"><a href="#MiniCssExtractPlugin-설치" class="headerlink" title="MiniCssExtractPlugin 설치"></a>MiniCssExtractPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D mini-css-extract-plugin</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-5"><a href="#webpack-config-js에-추가-5" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">                        ? MiniCssExtractPlugin.loader <span class="comment">// 운영 환경</span></span><br><span class="line">                        : <span class="string">"style-loader"</span>, <span class="comment">// 개발 환경</span></span><br><span class="line">                        <span class="string">"css-loader"</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...(</span><br><span class="line">            process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">                ? [ <span class="keyword">new</span> MiniCssExtractPlugin(&#123;<span class="attr">filename</span>: <span class="string">"[name].css"</span>&#125;) ]</span><br><span class="line">                : []</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>운영환경일 경우에만 css 파일을 추출하는 플러그인을 적용하였다. </li></ul><h3 id="MiniCssExtractPlugin-빌드"><a href="#MiniCssExtractPlugin-빌드" class="headerlink" title="MiniCssExtractPlugin 빌드"></a>MiniCssExtractPlugin 빌드</h3><ol><li>운영 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_10.png" alt></p><p><img src="/images/webpack/plugin/plugin_12.png" alt></p><div class="note info no-icon">            <p><code>./dist/main.css</code>가 생성되었고 <code>index.html</code>에 파일을 로딩하는 코드를 추가</p>          </div><ol start="2"><li>개발 빌드</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/plugin/plugin_11.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/concepts/plugins/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/plugins/</a></li><li><a href="https://webpack.js.org/contribute/writing-a-plugin/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/contribute/writing-a-plugin/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;플러그인(plugin)는 로더는 파일 단위로 처리하는 반면 플러그인은 번들 된 결과물을 처리한다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack plugin" scheme="https://jaehyun8719.github.io/tags/webpack-plugin/"/>
    
      <category term="webpack 플러그인" scheme="https://jaehyun8719.github.io/tags/webpack-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8/"/>
    
  </entry>
  
  <entry>
    <title>2. webpack loader</title>
    <link href="https://jaehyun8719.github.io/2020/06/05/webpack/loader/"/>
    <id>https://jaehyun8719.github.io/2020/06/05/webpack/loader/</id>
    <published>2020-06-04T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.127Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>로더(Lodaer)는 웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌 HTML, CSS, Image, Font 등을 변환하여 자바스크립트에서 직접 로딩할 수 있도록 해준다.<br><a id="more"></a></p><h2 id="커스텀-로더-만들기"><a href="#커스텀-로더-만들기" class="headerlink" title="커스텀 로더 만들기"></a>커스텀 로더 만들기</h2><p>로더를 사용하기 전에 커스텀 로더를 만들어서 확인해 보자.</p><h3 id="cumstomLoader-js-생성"><a href="#cumstomLoader-js-생성" class="headerlink" title="cumstomLoader.js 생성"></a>cumstomLoader.js 생성</h3><figure class="highlight javascript"><figcaption><span>cumstomLoader.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">customLoader</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"커스텀 로더 작동"</span>);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js파일의-module-객체에-추가"><a href="#webpack-config-js파일의-module-객체에-추가" class="headerlink" title="webpack.config.js파일의 module 객체에 추가"></a>webpack.config.js파일의 module 객체에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>, <span class="comment">// .js 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [path.resolve(<span class="string">"./src/customLoader.js"</span>)] <span class="comment">// 방금 만든 로더를 적용한다</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>test에는 로딩에 적용할 파일을 적용한다. 정규화 표현식을 이용해서 <code>.js</code> 확장자의 모든 파일을 처리</li><li>user에는 이 패턴에 해당하는 방금 만든 <code>cumstomLoader.js</code> 경로를 지정</li></ul><h3 id="커스텀-로더-실행"><a href="#커스텀-로더-실행" class="headerlink" title="커스텀 로더 실행"></a>커스텀 로더 실행</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; frontend-dev-env@1.0.0 build C:\workGit\frontend-dev-env</span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">커스텀 로더 작동</span><br><span class="line">커스텀 로더 작동</span><br></pre></td></tr></table></figure><p>터미널에 ‘커스텀 로더 작동’ 문자열이 나오고, <code>cumstomLoader()</code> 함수가 동작한 것을 확인할 수 있다.</p><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>CSS 파일을 자바스크립트에서 불러와 사용하려면 CSS 모듈 변환하는 작업이 필요한데, <a href="https://github.com/webpack-contrib/css-loader" rel="external nofollow noopener noreferrer" target="_blank">css-loder</a>가 CSS 모듈 변화 작업을 진행하여 사용할 수 있게 한다.</p><h3 id="css-loader-설치"><a href="#css-loader-설치" class="headerlink" title="css-loader 설치"></a>css-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D css-loader</span><br></pre></td></tr></table></figure><h3 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h3><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [<span class="string">"css-loader"</span>], <span class="comment">// ss-loader를 적용</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>웹팩은 엔트리 포인트 부터 검색하여 css 파일을 찾으면 <code>css-loader</code>가 처리 한다.</li></ul><h3 id="css-loader-변환-확인"><a href="#css-loader-변환-확인" class="headerlink" title="css-loader 변환 확인"></a>css-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><code>dist/main.js</code> 파일에 <code>background-color: green</code> 검색하면 css 코드가 자바스크립트로 변환된 것을 확인할 수 있다. </p><p><img src="/images/webpack/loader/loader_2.png" alt></p><h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p><code>css-loader</code>로 변경된 style sheet는 Dom에 추가되어야만 브라우져가 해석할 수 있다. <a href="https://github.com/webpack-contrib/style-loader" rel="external nofollow noopener noreferrer" target="_blank">style-loader</a>는 자바스크립트로 변경된 스타일을 동적으로 Dom 에 추가하는 로더이므로 <code>css-loader</code>와 <code>style-loader</code>는 함께 사용해야 된다.</p><h3 id="style-loader-설치"><a href="#style-loader-설치" class="headerlink" title="style-loader 설치"></a>style-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D style-loader</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>rules.use</code>에 배열은 앞에서부터 순서대로 로더가 작동</p>          </div><h3 id="style-loader-변환-확인"><a href="#style-loader-변환-확인" class="headerlink" title="style-loader 변환 확인"></a>style-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/loader/loader_3.png" alt></p><h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><p>webpack output에 파일을 옮겨주는 것이 <a href="https://github.com/webpack-contrib/file-loader" rel="external nofollow noopener noreferrer" target="_blank">file-loader</a>이다.</p><h3 id="file-loader-설치"><a href="#file-loader-설치" class="headerlink" title="file-loader 설치"></a>file-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D file-loader</span><br></pre></td></tr></table></figure><h3 id="style-css-1"><a href="#style-css-1" class="headerlink" title="style.css"></a>style.css</h3><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./dist/bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.png$/</span>, <span class="comment">// .png 확장자로 마치는 모든 파일</span></span><br><span class="line">                loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">"[name].[ext]?[hash]"</span>, <span class="comment">// 파일명 형식</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>publicPath</code>은 <code>file-loader</code>가 처리하는 파일 모듈로 사용할 때 앞에 추가되는 문자열</li><li><code>name</code>은 ‘bg.png?c1771da01a4975d381c2b5583293a075’ 형식으로 파일 변경 요청</li></ul><p><img src="/images/webpack/loader/loader_4.png" alt></p><h3 id="file-loader-변환-확인"><a href="#file-loader-변환-확인" class="headerlink" title="file-loader 변환 확인"></a>file-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/loader/loader_5.png" alt></p><h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>url-loader가 처리하는 옵션 중 fallback 기본값이 file-loader이다.<br>이미지를 Base64로 인코딩하여 문자열 형태로 소스에 넣어주는 형식으로 처리해 주는 게<a href="https://github.com/webpack-contrib/url-loader" rel="external nofollow noopener noreferrer" target="_blank">url-loader</a>이다.</p><h3 id="url-loader-설치"><a href="#url-loader-설치" class="headerlink" title="url-loader 설치"></a>url-loader 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D url-loader</span><br></pre></td></tr></table></figure><h3 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br><span class="line"><span class="keyword">import</span> small <span class="keyword">from</span> <span class="string">'./small.png'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;img src="<span class="subst">$&#123;small&#125;</span>" /&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|svg|gif)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"url-loader"</span>, <span class="comment">// url 로더를 설정한다</span></span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">"[name].[ext]?[hash]"</span>, <span class="comment">// file-loader와 동일</span></span><br><span class="line">                        limit: <span class="number">100000</span> <span class="comment">// 100kb 미만 파일만 data url로 처리</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>`limit에 설정한 값에 따라 100kb 미만 파일은 Data url 형태로 변환.<br>아이콘처럼 사용 빈도수가 높은 이미지 파일을 사용하면 좋다.</p>          </div><p><img src="/images/webpack/loader/loader_6.png" alt></p><h3 id="url-loader-변환-확인"><a href="#url-loader-변환-확인" class="headerlink" title="url-loader 변환 확인"></a>url-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p><img src="/images/webpack/loader/loader_7.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/concepts/loaders/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/loaders/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;로더(Lodaer)는 웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌 HTML, CSS, Image, Font 등을 변환하여 자바스크립트에서 직접 로딩할 수 있도록 해준다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack loader" scheme="https://jaehyun8719.github.io/tags/webpack-loader/"/>
    
      <category term="webpack 로더" scheme="https://jaehyun8719.github.io/tags/webpack-%EB%A1%9C%EB%8D%94/"/>
    
  </entry>
  
  <entry>
    <title>1. webpack entry/output</title>
    <link href="https://jaehyun8719.github.io/2020/06/04/webpack/setup/"/>
    <id>https://jaehyun8719.github.io/2020/06/04/webpack/setup/</id>
    <published>2020-06-03T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.128Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>시작점(entry)으로부터 의존적인 모듈을 전부 찾아내서 하나의 결과물을 만들어 낸다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>node: v12.16.3</li><li>npm: 6.14.5</li><li>webpack: 4.43.0</li><li>webpack-cli: 3.3.11</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/setup/setup_1.png" alt></p><h2 id="webpack-설치"><a href="#webpack-설치" class="headerlink" title="webpack 설치"></a>webpack 설치</h2><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a> 패키지와 웹팩 터미널 도구인 <a href="https://github.com/webpack/webpack-cli" rel="external nofollow noopener noreferrer" target="_blank">webpack-cli</a> 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D webpack webpack-cli</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node_modules/.bin/webpack --<span class="built_in">help</span></span><br><span class="line">webpack-cli 3.3.11</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>webpack,  webpack-cli 정상적으로 설치가 되면 –help 명령어 실행 </p>          </div><h2 id="index-html-생성"><a href="#index-html-생성" class="headerlink" title="index.html 생성"></a>index.html 생성</h2><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>&lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</code>은 npm 커스텀 명령어를 추가하면 생기는 파일이다.</p>          </div><h2 id="app-js와-math-js-생성"><a href="#app-js와-math-js-생성" class="headerlink" title="app.js와 math js 생성"></a>app.js와 math js 생성</h2><p><img src="/images/webpack/setup/setup_2.png" alt></p><figure class="highlight javascript"><figcaption><span>math.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"./math.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(math.sum(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="webpack-config-js-생성"><a href="#webpack-config-js-생성" class="headerlink" title="webpack.config.js 생성"></a>webpack.config.js 생성</h2><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mode: 웹팩의 실행 모드인 ‘development’ 문자열 사용</li><li>entry: 어플리케이션 시작점인 ‘./src/app.js’ 로 설정</li><li>output: 번들링한 결과물을 위치할 경로이다. (output.path는 절대 경로를 사용하기 때문에 node 코드 모듈인 path를 사용하여 처리하였다.)</li></ul><h2 id="package-json에-npm-커스텀-명령어-build-추가"><a href="#package-json에-npm-커스텀-명령어-build-추가" class="headerlink" title="package.json에 npm 커스텀 명령어 build 추가"></a>package.json에 npm 커스텀 명령어 build 추가</h2><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"frontend-dev-env"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.43.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.11"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="npm-커스텀-명령어-실행"><a href="#npm-커스텀-명령어-실행" class="headerlink" title="npm 커스텀 명령어 실행"></a>npm 커스텀 명령어 실행</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">Hash: 5d24763a699d2f2ca80d</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 68ms</span><br><span class="line">Built at: 2020-06-04 14:21:22</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  4.51 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[./src/app.js] 66 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/math.js] 49 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure><h3 id="dist-main-js-파일-생성-확인"><a href="#dist-main-js-파일-생성-확인" class="headerlink" title="./dist/main.js 파일 생성 확인"></a>./dist/main.js 파일 생성 확인</h3><p><img src="/images/webpack/setup/setup_3.png" alt></p><h3 id="index-html-브라우저-확인"><a href="#index-html-브라우저-확인" class="headerlink" title="index.html 브라우저 확인"></a>index.html 브라우저 확인</h3><p>DevTool을 이용해서 app.js에서 console.log에 결과값을 확인한다.</p><p><img src="/images/webpack/setup/setup_4.png" alt></p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li><li><a href="https://webpack.js.org/guides/getting-started/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/getting-started/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;webpack&lt;/a&gt;은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.&lt;br&gt;시작점(entry)으로부터 의존적인 모듈을 전부 찾아내서 하나의 결과물을 만들어 낸다.&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://jaehyun8719.github.io/tags/webpack/"/>
    
      <category term="webpack entry" scheme="https://jaehyun8719.github.io/tags/webpack-entry/"/>
    
      <category term="webpack output" scheme="https://jaehyun8719.github.io/tags/webpack-output/"/>
    
  </entry>
  
  <entry>
    <title>프론트엔드 개발에 Node.js 가 필요한 이유</title>
    <link href="https://jaehyun8719.github.io/2020/05/21/nodejs/nodejs-npm/"/>
    <id>https://jaehyun8719.github.io/2020/05/21/nodejs/nodejs-npm/</id>
    <published>2020-05-20T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.125Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Node.js를 백엔드 구현체로 사용하지 않고, 프론트 엔드 개발을 할때 개발 환경에 대한 이해를 하기 위해 작성하였다.<br><a id="more"></a></p><h2 id="Node-js-설치"><a href="#Node-js-설치" class="headerlink" title="Node.js 설치"></a>Node.js 설치</h2><ol><li><a href="https://nodejs.org/ko/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/ko/</a> 사이트 가서 노드의 최신 버전을 다운로드</li></ol><p><img src="/images/nodejs/nodejs-npm/nodejs-npm-1.png" alt></p><div class="note info no-icon">            <p>LTS 버젼은 안정적인 버젼으로 Java에서도 대부분 LTS 버젼을 많이 사용한다. (Current 버전은 최신 기술을 테스트할 때 개발 서버에서만 사용하길 권장한다.)</p>          </div><ol start="2"><li><p>설치는 <code>Next</code>버튼을 눌러 완료 하면 된다.</p></li><li><p>cmd 실행</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">Welcome to Node.js v12.16.3.</span><br><span class="line">Type <span class="string">".help"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt; 1 + 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>정수를 계산하면 입력된 결과 값이 나온다. 즉, 자바스크립의 코드를 입력하면 즉시 결과를 확인 할 수 있다.</p>          </div><ol start="4"><li>Node.js 버젼 확인<br>node 실행 창을 나오는 명령어는 <code>.exit</code>와 <code>ctrl + c</code>를 연속 두번 입력하면 된다.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">v12.16.3</span><br></pre></td></tr></table></figure><ol start="5"><li>NPM(Node Package Manage) 확인</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ npm</span><br><span class="line"></span><br><span class="line">Usage: npm &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    access, adduser, audit, bin, bugs, c, cache, ci, cit,</span><br><span class="line">    clean-install, clean-install-test, completion, config,</span><br><span class="line">    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,</span><br><span class="line">    edit, explore, fund, get, <span class="built_in">help</span>, <span class="built_in">help</span>-search, hook, i, init,</span><br><span class="line">    install, install-ci-test, install-test, it, link, list, ln,</span><br><span class="line">    login, <span class="built_in">logout</span>, ls, org, outdated, owner, pack, ping, prefix,</span><br><span class="line">    profile, prune, publish, rb, rebuild, repo, restart, root,</span><br><span class="line">    run, run-script, s, se, search, <span class="built_in">set</span>, shrinkwrap, star,</span><br><span class="line">    stars, start, stop, t, team, <span class="built_in">test</span>, token, tst, un,</span><br><span class="line">    uninstall, unpublish, unstar, up, update, v, version, view,</span><br><span class="line">    whoami</span><br><span class="line"></span><br><span class="line">npm &lt;<span class="built_in">command</span>&gt; -h  quick <span class="built_in">help</span> on &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">npm -l            display full usage info</span><br><span class="line">npm <span class="built_in">help</span> &lt;term&gt;   search <span class="keyword">for</span> <span class="built_in">help</span> on &lt;term&gt;</span><br><span class="line">npm <span class="built_in">help</span> npm      involved overview</span><br><span class="line"></span><br><span class="line">Specify configs <span class="keyword">in</span> the ini-formatted file:</span><br><span class="line">    C:\Users\jaehy\.npmrc</span><br><span class="line">or on the <span class="built_in">command</span> line via: npm &lt;<span class="built_in">command</span>&gt; --key value</span><br><span class="line">Config info can be viewed via: npm <span class="built_in">help</span> config</span><br><span class="line"></span><br><span class="line">npm@6.13.2 C:\Users\jaehy\AppData\Roaming\npm\node_modules\npm</span><br></pre></td></tr></table></figure><ol start="6"><li>NPM 버젼 확인</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm --version</span><br><span class="line">6.13.2</span><br></pre></td></tr></table></figure><h2 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h2><p>외부 라이브러리를 다운로드하고 빌드 하는 등 명령어를 자동화하여 프로젝트를 관리하는 도구가 존재하는데, 예를 들어 자바의 Maven, Gradle이 있다.<br>NPM은 자바스크립트의 빌드 도구 이다.</p><h3 id="INIT"><a href="#INIT" class="headerlink" title="INIT"></a>INIT</h3><p>NPM에 <code>init</code> 명령을 사용하여 프로젝트를 생성(sample이라는 폴더를 생성하여 실행) 하면 <code>pacakge.json</code>파일이 생성 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (sample)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to E:\97.private_work\sample\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"sample"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this OK? (yes)</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>npm init -y</code> 명령어를 사용하면 질문을 스킵하고 <code>package.json</code> 파일이 생성된다.</p>          </div><h3 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h3><p>Node.js 는 Package.json 파일에 모든 프로젝트 정보를 기록한다.</p><table><thead><tr><th>정보명</th><th>설명</th></tr></thead><tbody><tr><td>name</td><td>프로젝트 이름</td></tr><tr><td>version</td><td>프로젝트 버전 정보</td></tr><tr><td>description</td><td>프로젝트 설명</td></tr><tr><td>main</td><td>노드 어플리케이션일 경우 진입점 경로</td></tr><tr><td>scripts</td><td>프로젝트 명령어를 등록</td></tr><tr><td>author</td><td>작성자</td></tr><tr><td>license</td><td>라이센스</td></tr></tbody></table><h2 id="프로젝트-명령어"><a href="#프로젝트-명령어" class="headerlink" title="프로젝트 명령어"></a>프로젝트 명령어</h2><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"sample"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>script 에 test 명령어 실행하면 <code>echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1</code> 출력 되는 것을 확인 할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">&gt; sample@1.0.0 <span class="built_in">test</span> E:\97.private_work\sample</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"Error: no test specified"</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="string">"Error: no test specified"</span></span><br><span class="line">npm ERR! Test failed.  See above <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure><p>NPM에서 사용할 수 있는 명령어가 있는데, 대부분 <code>start, test, install, uninstall</code>을 많이 사용 한다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm</span><br><span class="line"></span><br><span class="line">Usage: npm &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    access, adduser, audit, bin, bugs, c, cache, ci, cit,</span><br><span class="line">    clean-install, clean-install-test, completion, config,</span><br><span class="line">    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,</span><br><span class="line">    edit, explore, fund, get, <span class="built_in">help</span>, <span class="built_in">help</span>-search, hook, i, init,</span><br><span class="line">    install, install-ci-test, install-test, it, link, list, ln,</span><br><span class="line">    login, <span class="built_in">logout</span>, ls, org, outdated, owner, pack, ping, prefix,</span><br><span class="line">    profile, prune, publish, rb, rebuild, repo, restart, root,</span><br><span class="line">    run, run-script, s, se, search, <span class="built_in">set</span>, shrinkwrap, star,</span><br><span class="line">    stars, start, stop, t, team, <span class="built_in">test</span>, token, tst, un,</span><br><span class="line">    uninstall, unpublish, unstar, up, update, v, version, view,</span><br><span class="line">    whoami</span><br></pre></td></tr></table></figure><p><code>package.json</code>에 커스텀으로 등록한 명령어 실행</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line"><span class="string">"bulid"</span> : <span class="string">"빌드 실행"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> npm run bulid</span><br><span class="line"></span><br><span class="line">&gt; sample@1.0.0 bulid E:\97.private_work\sample</span><br><span class="line">&gt; 빌드 실행</span><br></pre></td></tr></table></figure><h2 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h2><p><code>npm install</code> 명령어로 외부 패키지를 프로젝트 폴더에 다운로드하여 <code>package.json</code>에 정보를 기록한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>16.13.1</code> 버전을 설치</p><div class="note info no-icon">            <p>^16.13.1<br>16은 Major Version으로 기존 Version 과 호환되지 않게 변경<br>13은 Minor Version으로 기존 Version 과 호환되면서 기능이 추가<br>1은 Patch Version으로 기존 버전과 호환되면서 버그를 수정</p>          </div>    <h2 id="버전의-범위"><a href="#버전의-범위" class="headerlink" title="버전의 범위"></a>버전의 범위</h2><h3 id="단순-버전-관리"><a href="#단순-버전-관리" class="headerlink" title="단순 버전 관리"></a>단순 버전 관리</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">16.13.1</span><br></pre></td></tr></table></figure><h3 id="특정-버전보다-높거나-낮을-경우"><a href="#특정-버전보다-높거나-낮을-경우" class="headerlink" title="특정 버전보다 높거나 낮을 경우"></a>특정 버전보다 높거나 낮을 경우</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;16.13.1</span><br><span class="line">&gt;=16.13.1</span><br><span class="line">&lt;16.13.1</span><br><span class="line">&lt;=16.13.1</span><br></pre></td></tr></table></figure><h3 id="틸드-와-캐럿-을-이용해-범위"><a href="#틸드-와-캐럿-을-이용해-범위" class="headerlink" title="틸드(~)와 캐럿(^)을 이용해 범위"></a>틸드(~)와 캐럿(^)을 이용해 범위</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~16.13.1</span><br><span class="line">^16.13.1</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>~</code>는 Patch Version을 변경 즉, 16.13.1에서 1을 변경<br><code>^</code>은 Minor Version, Patch Version을 변경 즉, 16.13.1에서 13과 1을 변경</p>          </div>    <h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Node.js를 백엔드 구현체로 사용하지 않고, 프론트 엔드 개발을 할때 개발 환경에 대한 이해를 하기 위해 작성하였다.&lt;br&gt;
    
    </summary>
    
      <category term="Node.js" scheme="https://jaehyun8719.github.io/categories/Node-js/"/>
    
    
      <category term="javascript" scheme="https://jaehyun8719.github.io/tags/javascript/"/>
    
      <category term="node.js" scheme="https://jaehyun8719.github.io/tags/node-js/"/>
    
      <category term="NodeJs" scheme="https://jaehyun8719.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>AWS Blue/Green deployment</title>
    <link href="https://jaehyun8719.github.io/2020/04/22/aws/blue-green-deployment/"/>
    <id>https://jaehyun8719.github.io/2020/04/22/aws/blue-green-deployment/</id>
    <published>2020-04-21T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.122Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 AWS Blue/Green deployment 생성 방법에 대해서 설명한다.</p><div class="note info no-icon">            <p>Blue/Green 배포전 필요한 설정 참고</p><ol><li><a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/">Auto Scaling</a></li><li><a href="https://jaehyun8719.github.io/2020/03/10/aws/elastic-load-balancing/">Elastic Load Balancing</a> </li></ol>          </div><a id="more"></a><h2 id="AWS에서-Blue-Green-배포-개념"><a href="#AWS에서-Blue-Green-배포-개념" class="headerlink" title="AWS에서 Blue/Green 배포 개념"></a>AWS에서 Blue/Green 배포 개념</h2><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-1.png" alt></p><ol><li><code>EC2 인스턴스 v1</code>을 정지하고 <code>AMI v1</code> 생성용 인스턴스를 생성</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-2.png" alt></p><ol start="2"><li><code>v2</code>을 배포 후 인스턴스 종료하고 <code>AMI v2</code> 와 <code>시작 템플릿 v2</code>생성</li><li>로드 밸런서에 <code>Green 그룹</code>을 등록해서 <code>Green</code>, <code>Blue</code> 인스턴스들을 나눠서 처리</li><li><code>Green</code>, <code>Blue</code> 요청 처리에 문제가 없으면 <code>Blue 그룹</code>을 로드 밸런서에서 제외</li><li>몇 시간 모니터링 후 문제가 없으면 <code>Blue 그룹</code> 인스턴스를 모두 종료</li></ol><h2 id="Blue-Green-배포"><a href="#Blue-Green-배포" class="headerlink" title="Blue/Green 배포"></a>Blue/Green 배포</h2><h3 id="Blue-Green-배포를-위한-Auto-Scaling-그룹-만들기"><a href="#Blue-Green-배포를-위한-Auto-Scaling-그룹-만들기" class="headerlink" title="Blue/Green 배포를 위한 Auto Scaling 그룹 만들기"></a>Blue/Green 배포를 위한 Auto Scaling 그룹 만들기</h3><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-3.png" alt></p><ol><li>Blue 그룹을 생성하기 위해 <code>[Auto Scaling 그룹 생성]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-4.png" alt><br><img src="/images/aws/blue-green-deployment/blue-green-deployment-5.png" alt></p><ol start="2"><li><code>[시작 템플릿]</code>에서 기존에 AMI로 만든 <code>exercise-launch-template</code>를 선택하여 <code>다음</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-6.png" alt></p><ol start="3"><li><code>[시작 템플릿 준수]</code> 선택 </li><li>a, c 리전의 기본값을 설정 후 <code>[다음]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-7.png" alt></p><ol start="5"><li><code>로드 밸런스</code> 설정한 <code>exercise-target-group</code> 선택 후 <code>[다음]</code> 클릭</li></ol><div class="note info no-icon">            <p>exercise-target-group 은 미리 로드 밸런스를 설정 해서 생성된 그룹이다. 로드 밸런스 부분 참고</p>          </div><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-8.png" alt></p><ol start="6"><li><code>그룹 크기</code> 설정 후 <code>[다음]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-9.png" alt></p><ol start="7"><li>메일, 연락처 알림은 추가 하지 않으므로 <code>[다음]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-10.png" alt></p><ol start="8"><li>태그 추가 후 <code>[다음]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-11.png" alt></p><ol start="9"><li>검토 화면에서 값들이 제대로 설정됐는지 확인하고 <code>Auto Scaling 그룹 생성</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-12.png" alt></p><ol start="10"><li>Auto Scaling 생성 확인</li></ol><h3 id="기존-버전의-코드-서비스하기"><a href="#기존-버전의-코드-서비스하기" class="headerlink" title="기존 버전의 코드 서비스하기"></a>기존 버전의 코드 서비스하기</h3><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-13.png" alt></p><ol><li><code>[로드 밸런서]</code> -&gt; <code>[exercise-lb]</code> 선택 -&gt; <code>DNS 이름</code> 복사</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-14.png" alt></p><ol start="2"><li>브라우저에서 로드 밸런서의 DNS 주소로 접속 확인</li></ol><h3 id="새로운-버전의-코드를-적용한-AMI와-시작-템플릿-생성"><a href="#새로운-버전의-코드를-적용한-AMI와-시작-템플릿-생성" class="headerlink" title="새로운 버전의 코드를 적용한 AMI와 시작 템플릿 생성"></a>새로운 버전의 코드를 적용한 AMI와 시작 템플릿 생성</h3><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-15.png" alt></p><ol><li>인스턴스 상태 <code>[stopeed]</code> 상태에서 오른쪽 마우스 클릭 <code>[이미지]</code> -&gt; <code>[이미지 생성]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-16.png" alt></p><ol start="2"><li><code>[이미지 이름]</code> 입력 후 <code>[이미지 생성]</code> 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-17.png" alt></p><ol start="3"><li><code>[이미지]</code> -&gt; <code>[AMI]</code> 메뉴에 이미지가 생성될때까지 기다리면 상태 값이 <code>available</code>로 변경 확인</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-18.png" alt></p><ol start="4"><li><code>[인스턴스]</code> -&gt; <code>[시작 템플릿]</code> 에서 <code>[시작 템플릿 생성]</code> 버튼 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-19.png" alt></p><ol start="5"><li>템플릿 생성 정보 입력 후 <code>[시작 템플릿 생성]</code> 버튼 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-20.png" alt></p><ol start="6"><li><code>[인스턴스]</code> -&gt; <code>[시작 템플릿]</code> 에서 <code>exercise-launch-template-beta</code> 시작 템플릿 생성 확인</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-21.png" alt></p><ol start="7"><li><code>[Auto Scaling 그룹 생성]</code> 버튼 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-22.png" alt></p><ol start="8"><li>위에 정보 입력 후 <code>[다음]</code> 버튼 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-23.png" alt></p><ol start="9"><li>세부 정보 구성 후 <code>[다음]</code> 버튼 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-24.png" alt></p><ol start="10"><li><code>로드 밸런스</code> 설정한 <code>exercise-target-group</code> 선택 후 <code>[다음]</code> 클릭</li></ol><div class="note info no-icon">            <p>exercise-target-group 은 미리 로드 밸런스를 설정 해서 생성된 그룹이다. 로드 밸런스 부분 참고</p>          </div><ol start="11"><li>그 이하 설정은 <code>Blue</code>와 같으니 위에 부분을 참고하면 된다.</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-25.png" alt></p><ol start="12"><li><code>EXERCISE-GROUP-GREEN</code> 생성 확인</li></ol><h2 id="로드-밸런서에-등록해-Blue-Green-배포-진행하기"><a href="#로드-밸런서에-등록해-Blue-Green-배포-진행하기" class="headerlink" title="로드 밸런서에 등록해 Blue/Green 배포 진행하기"></a>로드 밸런서에 등록해 Blue/Green 배포 진행하기</h2><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-26.png" alt></p><ol><li>로드 밸런서에 DNS 이름을 복사 후 브라우저에 새로고침을 해보면 2가지 화면이 나오는 것을 확인할 수 있다.</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-27.png" alt></p><ol start="2"><li>Blue/Green 처리 과정 화면</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-28.png" alt></p><ol start="3"><li>Green 그룹이 로드 밸런서에 올바르게 등록된것을 확인했으니 Blue 그룹에 대상 그룹을 제거 해야된다. <code>[Auto Scaling Groups]</code> -&gt; <code>[EXERCISE-GROUP-BLUE]</code> 선택 -&gt; <code>[편집]</code> 버튼 클릭</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-29.png" alt></p><ol start="4"><li>로드 밸런싱 타겟 제거 후 저장</li></ol><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-30.png" alt></p><ol start="5"><li>로드 밸런서에 DNS 이름을 복사 후 브라우저에 새로고침을 해보면 Blue 화면이 나오는 것을 확인할 수 있다.</li></ol><div class="note warning no-icon">            <p>Auto Scaling은 항상 사용하지 않을때는 <code>그룹 세부 정보</code>에서 원하는 용량, 최소 그룹 크기 를 <code>0</code>로 해줘야 추가 요금이 발생하지 않는다.</p>          </div><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>AWS에서 배포 방법을 공부하기 위해서는 기본적으로 로드밸런서, 시작템플릿, AMI 등 개념을 알고 있어야 할 것 같다.<br>서비스를 배포 하는 도중에 서비스가 중단이 되면 큰 문제가 발생하지만, Blue/Green 배포 방법으로 서비스가 중단 되지 않고 서비스를 계속 진행 할 수 있다.<br>내가 기본적으로 생각하는 개념은 로드 밸런서의 중심으로 새로운 각 인스턴스에 하나씩 반영하면서 서버가 중지 되지 않는것처럼 보이게 하는것 같다.</p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/deployment-groups-create-blue-green.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/deployment-groups-create-blue-green.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://wikibook.co.kr/aws-infra/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;서비스 운영이 쉬워지는 AWS 인프라 구축 가이드&lt;/a&gt; 를 읽고 실습 한 내용이고 AWS Blue/Green deployment 생성 방법에 대해서 설명한다.&lt;/p&gt;
&lt;div class=&quot;note info no-icon&quot;&gt;
            &lt;p&gt;Blue/Green 배포전 필요한 설정 참고&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/&quot;&gt;Auto Scaling&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://jaehyun8719.github.io/2020/03/10/aws/elastic-load-balancing/&quot;&gt;Elastic Load Balancing&lt;/a&gt; &lt;/li&gt;&lt;/ol&gt;
          &lt;/div&gt;
    
    </summary>
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/tags/AWS/"/>
    
      <category term="AWS Blue/Green deployment" scheme="https://jaehyun8719.github.io/tags/AWS-Blue-Green-deployment/"/>
    
  </entry>
  
  <entry>
    <title>AWS Elastic Load Balancing</title>
    <link href="https://jaehyun8719.github.io/2020/03/10/aws/elastic-load-balancing/"/>
    <id>https://jaehyun8719.github.io/2020/03/10/aws/elastic-load-balancing/</id>
    <published>2020-03-09T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.122Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 AWS Elastic Load Balancing 생성 방법에 대해서 설명한다.<br>2020년 03월 10일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.<br><a id="more"></a></p><h2 id="Elastic-Load-Balancing"><a href="#Elastic-Load-Balancing" class="headerlink" title="Elastic Load Balancing"></a>Elastic Load Balancing</h2><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-1.png" alt></p><p>Elastic Load Balancing(ELB, 이하 로드 밸런서)은 위에 그림에 <code>로드 밸런서</code>의 역할을 하는 AWS 서비스 이다. <code>클라이언트</code>의 요청을 직접 받고 그 요청을 <code>로드 밸런서</code>가 관리하고 있는 <code>서버</code>들에게 여러개의 요청을 골고루 전달해주는 역할을 한다. 단점으로는 AWS에서 로드 밸런서의 기능을 하는 서버를 내부적으로 관리해주기 때문에 우리가 직접 SSH로 접속할 수는 없다. </p><div class="note info no-icon">            <p><code>로드 밸런서</code>가 받은 요청을 특정 <a href="https://jaehyun8719.github.io/2020/02/10/aws/ec2-setting/">인스턴스(EC2)</a>들 또는 <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/#Auto-Scaling">Auto-Scaling 그룹</a>으로 전달하여 설정할 수 있다.</p>          </div><h2 id="대상-그룹"><a href="#대상-그룹" class="headerlink" title="대상 그룹"></a>대상 그룹</h2><p>대상 그룹(Target Group)은 로드 밸런서가 요청을 전달할 서버들을 묶어둔 개념적인 그룹이며, 이 대상 그룹 내에는 <a href="https://jaehyun8719.github.io/2020/02/10/aws/ec2-setting/">인스턴스(EC2)</a>나 <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/#Auto-Scaling">Auto-Scaling 그룹</a> 이 포할될 수 있다.</p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-2.png" alt></p><ol><li><code>대상 그룹 A</code>에는 EC2 인스턴스 2개</li><li><code>대상 그룹 B</code>에는 EC2 인스턴스 3개 그중에 EC2 인스턴스 2개는 Auto Scaling 그룹에 포함</li><li><code>대상 그룹 A</code> + <code>대상 그룹 B</code>에 총 EC2 인스턴스 5개 </li><li><code>로드 밸런서</code>에는 <code>대상 그룹 A, B</code>가 등록돼 있기 때문에 <code>클라이언트</code>가 <code>로드 밸런서</code>로 보낸 요청들을 5개의 EC2 인스턴스가 나눠서 처리한다.</li></ol><div class="note info no-icon">            <p><code>로드 밸런서</code>에 직접 <code>EC2 인스턴스</code>나 <code>Auto Scaling 그룹</code>을 등록하지 않는 이유는 로드 밸런서는 요청한 포트에 따라 다양한 대상 그룹으로 요청을 전달 할 수 있다.<br>예를 들어 80번 443번 포트는 <code>대상 그룹 A</code>에 5000번 포트는 <code>대상 그룹 B</code>에 전달하여 설정 할 수 있기때문이다. </p>          </div><h2 id="로드-밸런서의-상태-검사"><a href="#로드-밸런서의-상태-검사" class="headerlink" title="로드 밸런서의 상태 검사"></a>로드 밸런서의 상태 검사</h2><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-3.png" alt></p><ol><li>정상적으로 동작하고 있는지 확인하기 위해 상태 검사(Health Check) 를 한다.</li><li>로드 밸런서는 자기가 관리하는 서버들에게 GET/health를 등록해두면 로드 밸런서는 주기적으로 요청을 보내서 상태 코드 200을 확인한다.</li><li>상태 코드의 주기 또는 비정상 코드를 몇번만에 응답을 해야 하는지도 설정 가능하다.</li></ol><h2 id="Auto-Scaling-그룹-대상-그룹-로드-밸런스-구성"><a href="#Auto-Scaling-그룹-대상-그룹-로드-밸런스-구성" class="headerlink" title="Auto Scaling 그룹, 대상 그룹, 로드 밸런스 구성"></a>Auto Scaling 그룹, 대상 그룹, 로드 밸런스 구성</h2><p>Auto Scaling 그룹을 이용한 실습이다. <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/">Auto-Scaling 그룹</a> 관련해서는 참고하길 바란다.</p><h3 id="로드-밸런서-생성"><a href="#로드-밸런서-생성" class="headerlink" title="로드 밸런서 생성"></a>로드 밸런서 생성</h3><p>EC2 서비스의 <code>로드 밸런싱</code> -&gt; <code>로드 밸런서</code> 메뉴 선택한 뒤 <code>로드 밸런서 생성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-4.png" alt></p><h3 id="로드-밸런서-유형-선택"><a href="#로드-밸런서-유형-선택" class="headerlink" title="로드 밸런서 유형 선택"></a>로드 밸런서 유형 선택</h3><p>일반적으로 HTTP, HTTPS 요청을 받으려고 하므로 <code>Applcation Load Balancer</code>에 <code>생성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-5.png" alt></p><h4 id="로드-밸런서-구성"><a href="#로드-밸런서-구성" class="headerlink" title="로드 밸런서 구성"></a>로드 밸런서 구성</h4><p>이름, 리스너, 가용영역 추가후 <code>다음:보안 설정 구성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-6.png" alt></p><h4 id="보안-설정-구성"><a href="#보안-설정-구성" class="headerlink" title="보안 설정 구성"></a>보안 설정 구성</h4><p>HTTPS 리스너를 추가하지 않아서 생기는 경고이므로 무시하고 <code>다음:보안 설정 구성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-7.png" alt></p><h4 id="보안-그룹-구성"><a href="#보안-그룹-구성" class="headerlink" title="보안 그룹 구성"></a>보안 그룹 구성</h4><p>실습 중에는 HTTP 80포트관련만 받을 것이다. 그러므로 미리 보안 그룹에서 생성한 web 관련 보안 그룹을 선택 후 <code>다음:라우팅 구성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-8.png" alt></p><h4 id="라우팅-등록"><a href="#라우팅-등록" class="headerlink" title="라우팅 등록"></a>라우팅 등록</h4><ol><li>대상 그룹이 없기 때문에 새 대상 그룹인 <code>exercise-target-group</code>생성</li><li>상태 검사는 모든 인스턴스 대상으로 <code>/health</code> 요청을 주기적으로 날리고 HTTP 상태코드 200을 응답하는지 확인하기 위해 추가</li><li><code>다음:상태 등로</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-9.png" alt></li></ol><h4 id="대상-그룹-1"><a href="#대상-그룹-1" class="headerlink" title="대상 그룹"></a>대상 그룹</h4><p>대상 그룹에 관리할 인스턴스를 추가할 수 있는 화면이며, <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/">Auto-Scaling 그룹</a>에서 생성된 인스턴스가 보일 것이다.<br>인스턴스를 직접 추가할 수 있지만 <code>Auto Scaling 그룹</code> 자체를 <code>대상 그룹</code>에 등록해서 새로운 인스턴스들이 실핼될 때마다 자동으로 <code>대상 그룹</code>에 등록되게 할 것이므로 <code>다음:검토</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-10.png" alt></p><h4 id="검토"><a href="#검토" class="headerlink" title="검토"></a>검토</h4><p>검토 화면에서 앞서 설정한 값이 정상인지 확인 뒤 <code>생성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-11.png" alt></p><h3 id="로드-밸런서-생성-확인"><a href="#로드-밸런서-생성-확인" class="headerlink" title="로드 밸런서 생성 확인"></a>로드 밸런서 생성 확인</h3><p><code>로드 밸런싱</code> -&gt; <code>로드 밸런서</code> 방금 생성한 로그 밸런서 확인<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-12.png" alt></p><h3 id="Auto-Scaling-그룹에-대상-그룹-추가"><a href="#Auto-Scaling-그룹에-대상-그룹-추가" class="headerlink" title="Auto Scaling 그룹에 대상 그룹 추가"></a>Auto Scaling 그룹에 대상 그룹 추가</h3><p><code>Auto Scaling 그룹</code> -&gt; <code>세부 정보</code> 탭 -&gt; <code>편집</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-13.png" alt></p><p><code>대상 그룹(exercise-target-group)</code> 추가 -&gt; <code>저장</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-14.png" alt></p><p><code>로드 밸런싱</code> -&gt; <code>대상 그룹</code> -&gt; <code>대상</code> 탭에서 대상 그룹에 Auto Scaling 그룹의 인스턴스가 대상에 등록된것을 확인<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-15.png" alt></p><h3 id="로드-밸런서-작동-확인"><a href="#로드-밸런서-작동-확인" class="headerlink" title="로드 밸런서 작동 확인"></a>로드 밸런서 작동 확인</h3><p><code>로드 밸런싱</code> -&gt; <code>로드밸런서</code> -&gt; <code>exercise-lb</code> 선택 -&gt; <code>DNS 이름</code> 복사 후 접속 확인<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-16.png" alt></p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-17.png" alt></p><div class="note info no-icon">            <p>server name에 등록을 하지 않아서 애플리케이션에 접속 할 수 있는 이유는 요청 받았을 때 정확히 일치하는 서버가 없더라도 가장 근접한 서버를 찾아서 실행 해준다.</p>          </div><h2 id="장애-조치-구성"><a href="#장애-조치-구성" class="headerlink" title="장애 조치 구성"></a>장애 조치 구성</h2><p>장애 조치란 2개의 시스템이 있을 경우 1개의 시스템에서 장애가 발생시 전체 시스템이 죽는게 아니라 다른 예비 시스템에 즉시 요청을 대신 처리하여 시스템에 문제가 생기지 않도록 하는 것이다. </p><h2 id="Auto-Scaling-그룹을-이용한-장애-조치"><a href="#Auto-Scaling-그룹을-이용한-장애-조치" class="headerlink" title="Auto Scaling 그룹을 이용한 장애 조치"></a>Auto Scaling 그룹을 이용한 장애 조치</h2><p>Auto Scaling 그룹과 로드 밸런서를 이용하면 장애 조치를 구현할 수 있는데, 로드 밸런서에서 관리하는 서버 인스턴스들의 상태를 계속해서 파악을 하고 로드 밸런서는 응답이 없는 해당 인스턴스에는 요청을 하지않는디. 결과적으로 클라이언트는 에러 응답을 받지않고 정상적인 응답만 받는다.</p><h2 id="Auto-Scaling-그룹과-로드-밸런서를-통한-장애-조치"><a href="#Auto-Scaling-그룹과-로드-밸런서를-통한-장애-조치" class="headerlink" title="Auto Scaling 그룹과 로드 밸런서를 통한 장애 조치"></a>Auto Scaling 그룹과 로드 밸런서를 통한 장애 조치</h2><p>여기서 2개의 서버로 서비스하다가 한 서버 장애가 나는 경우 로드 밸런서가 자동으로 정상적인 서버에만 요청하는지 확인한다.</p><h3 id="로드-밸런서-상태-검사-편집"><a href="#로드-밸런서-상태-검사-편집" class="headerlink" title="로드 밸런서 상태 검사 편집"></a>로드 밸런서 상태 검사 편집</h3><p><code>로드 밸런싱</code> -&gt; <code>대상 그룹</code> -&gt; <code>상태 검사</code> 탭 -&gt; <code>상태 검사 편집</code> 버튼 클릭</p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-18.png" alt></p><p>상태값 변경 후 <code>저장</code> 버튼 클릭</p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-19.png" alt></p><table><thead><tr><th>항목</th><th>설명</th></tr></thead><tbody><tr><td>경로</td><td>인스턴스가 정상인지 확인하기 위해 호출할 URL주소</td></tr><tr><td>정상 임계 값</td><td>연속으로 몇 번 정상 응답을 해야만 정상 상태로 볼 것인지 지정</td></tr><tr><td>비정상 임계 값</td><td>연속으로 몇 번 비정상 응답을 해야만 정상 상태로 볼 것인지 지정</td></tr><tr><td>제한 시간</td><td>타임아웃 시간으로 응답이 몇 초 이내로 오지 않을 경우 비정상 응답으로 판단할지 지정</td></tr><tr><td>간격</td><td>몇 초 간격으로 인스턴스의 상태를 물어볼지 지정하는 항목</td></tr><tr><td>성공 코드</td><td>어떤 HTTP 응답 코드를 줬을 경우 정상 상태로 판단할 것인지 지정</td></tr></tbody></table><h3 id="Auto-Scaling-원하는-용량-최소-그룹-크기-변경"><a href="#Auto-Scaling-원하는-용량-최소-그룹-크기-변경" class="headerlink" title="Auto Scaling 원하는 용량, 최소 그룹 크기 변경"></a>Auto Scaling 원하는 용량, 최소 그룹 크기 변경</h3><p><code>AUTO SCALING</code> -&gt; Auto Scaling 그룹 -&gt; <code>편집</code> 버튼 클릭</p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-20.png" alt></p><h3 id="인스턴스-확인"><a href="#인스턴스-확인" class="headerlink" title="인스턴스 확인"></a>인스턴스 확인</h3><p><code>Instance management</code> 탭 </p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-21.png" alt></p><h3 id="두-서버에-SSH-접속-후-실시간-로그-확인"><a href="#두-서버에-SSH-접속-후-실시간-로그-확인" class="headerlink" title="두 서버에 SSH 접속 후 실시간 로그 확인"></a>두 서버에 SSH 접속 후 실시간 로그 확인</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/nginx/logs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f access.log</span></span><br></pre></td></tr></table></figure><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-22.png" alt></p><div class="note info no-icon">            <p>Elastic Load Balancing 에서 200코드로 2개의 서버에 Health Check를 하고 있는것을 확인할 수 있다.</p>          </div><h3 id="장애-발생-처리"><a href="#장애-발생-처리" class="headerlink" title="장애 발생 처리"></a>장애 발생 처리</h3><p>A 서버 종료 후 브라우저를 연속으로 새로고침 을 하면 처음에는 상태코드 502가 나오고 우리가 설정한 정상 임계값인 200이 아니므로 B 서버가 요청을 처리한다. </p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-23.png" alt></p><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-24.png" alt></p><div class="note warning no-icon">            <p>모든 실습이 완료되면 Auto Scaling 그룹에서 원하는 용량, 최소 그룹 크기, 최대 그룹 크기를 0으로 변경하여 인스턴스를 종료하자. </p>          </div><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>운영 중 Elastic Load Balancing으로 하나의 서버가 장애가 발생했을 경우 다른 서버에 분산할 수 있다는 것을 알았다. 하지만 Elastic Load Balancing만으로는 서버의 개수를 유동적으로 할 수 없다는 단점이 있는데, Auto Scaling 그룹으로 서버의 개수를 유동적으로 할 수 있다는 강점이 생긴다. 하나의 기능보다 AWS는 여러 가 기능을 결합하여 잘 사용하면 더 좋은 서비스를 구현할 수 있다고 생각을 한다.</p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/userguide/what-is-load-balancing.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/userguide/what-is-load-balancing.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://wikibook.co.kr/aws-infra/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;서비스 운영이 쉬워지는 AWS 인프라 구축 가이드&lt;/a&gt; 를 읽고 실습 한 내용이고 AWS Elastic Load Balancing 생성 방법에 대해서 설명한다.&lt;br&gt;2020년 03월 10일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.&lt;br&gt;
    
    </summary>
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/tags/AWS/"/>
    
      <category term="AWS Elastic Load Balancing" scheme="https://jaehyun8719.github.io/tags/AWS-Elastic-Load-Balancing/"/>
    
  </entry>
  
  <entry>
    <title>AWS Auto Scaling</title>
    <link href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/"/>
    <id>https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/</id>
    <published>2020-02-19T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.122Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 Amazon Auto Scaling 생성 방법에 대해서 설명한다.<br>2020년 02월 20일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.<br><a id="more"></a></p><h2 id="Auto-Scaling"><a href="#Auto-Scaling" class="headerlink" title="Auto Scaling"></a>Auto Scaling</h2><p>Auto Scaling 이란 트래픽에 따라 서버의 수를 자동으로 늘리고 줄이는 자동 조정(Auto Scaling) 이다. 예를 들어 하나의 인스턴스의 CPU사용률이 5분동안 80%이상을 넘어서면 Auto Scaling 그룹에서 똑같은 인스턴스를 하나 더 생성한다. 그래서 하나더 생성된 인스턴스를 통해서 분산 처리가 되어 CPU가 정상 범위로 내려오면, 똑같이 생성된 인스턴스는 자동으로 제거가 되면서 비용을 절감 할 수 있다.</p><h2 id="AWS-Auto-Scaling-그룹의-구성"><a href="#AWS-Auto-Scaling-그룹의-구성" class="headerlink" title="AWS Auto Scaling 그룹의 구성"></a>AWS Auto Scaling 그룹의 구성</h2><p><img src="/images/aws/auto-scaling/auto-scaling-1.png" alt></p><ol><li>Auto Scaling 그룹을 생성하기 위해서는 생성할 EC2 인스턴스(B 인스턴스)를 선택</li><li>B 인스턴스의 현재환경을 스냅숏으로 AMI 생성</li><li>AMI를 이용해 어떤 사양의 인스턴스를 띄울지 미리 정의해두는 시작 템플릿 생성</li><li>Auto Scaling 그룹에서 B 인스턴스의 환경을 갖고 있으며 시작 템플릿에서 정의된 설정으로 생성된 인스턴스들을 자동으로 생성</li></ol><h2 id="Auto-Scaling-그룹-생성"><a href="#Auto-Scaling-그룹-생성" class="headerlink" title="Auto Scaling 그룹 생성"></a>Auto Scaling 그룹 생성</h2><h3 id="AMI-이미지-생성-방법"><a href="#AMI-이미지-생성-방법" class="headerlink" title="AMI 이미지 생성 방법"></a>AMI 이미지 생성 방법</h3><h4 id="AMI-이미지-생성"><a href="#AMI-이미지-생성" class="headerlink" title="AMI 이미지 생성"></a>AMI 이미지 생성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-2.png" alt></p><div class="note info no-icon">            <p>EC2 인스턴스 스냅숏을 생성 할때는 안전하게 시스템을 <code>stopped</code>상태로 변경후 생성하는게 좋다.</p>          </div><h4 id="이미지-생성-버튼-클릭"><a href="#이미지-생성-버튼-클릭" class="headerlink" title="이미지 생성 버튼 클릭"></a>이미지 생성 버튼 클릭</h4><p><img src="/images/aws/auto-scaling/auto-scaling-3.png" alt></p><h4 id="이미지-생성-요청-성공"><a href="#이미지-생성-요청-성공" class="headerlink" title="이미지 생성 요청 성공"></a>이미지 생성 요청 성공</h4><p><img src="/images/aws/auto-scaling/auto-scaling-4.png" alt></p><h3 id="시작-템플릿-생성-방법"><a href="#시작-템플릿-생성-방법" class="headerlink" title="시작 템플릿 생성 방법"></a>시작 템플릿 생성 방법</h3><h4 id="시작-템플릿-생성"><a href="#시작-템플릿-생성" class="headerlink" title="시작 템플릿 생성"></a>시작 템플릿 생성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-5.png" alt></p><h4 id="시작-템플릿-설정-값-지정"><a href="#시작-템플릿-설정-값-지정" class="headerlink" title="시작 템플릿 설정 값 지정"></a>시작 템플릿 설정 값 지정</h4><p><img src="/images/aws/auto-scaling/auto-scaling-6.png" alt></p><ol><li>시작 템플릿 이름 입력</li><li>AMI ID는 AMI에서 생성된 이미지 AMI ID 입력후 선택</li><li>인스턴스 유형 선택</li><li>기존에 만들었어 키페어 선택</li><li>VPC 선택</li><li><code>web, ssh</code> 의 보안 그룹 적용(테스트할 보안 그룹 적용 하면 됨)</li></ol><h4 id="시작-템플릿-생성-확인"><a href="#시작-템플릿-생성-확인" class="headerlink" title="시작 템플릿 생성 확인"></a>시작 템플릿 생성 확인</h4><p><img src="/images/aws/auto-scaling/auto-scaling-7.png" alt></p><h4 id="메뉴에서-시작-템플릿-생성-확인"><a href="#메뉴에서-시작-템플릿-생성-확인" class="headerlink" title="메뉴에서 시작 템플릿 생성 확인"></a>메뉴에서 시작 템플릿 생성 확인</h4><p><img src="/images/aws/auto-scaling/auto-scaling-8.png" alt></p><h3 id="Auto-Scaling-그룹"><a href="#Auto-Scaling-그룹" class="headerlink" title="Auto Scaling 그룹"></a>Auto Scaling 그룹</h3><h4 id="Auto-Scaling-그룹-생성-1"><a href="#Auto-Scaling-그룹-생성-1" class="headerlink" title="Auto Scaling 그룹 생성"></a>Auto Scaling 그룹 생성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-9.png" alt></p><h4 id="생성한-시작템플릿을-연결"><a href="#생성한-시작템플릿을-연결" class="headerlink" title="생성한 시작템플릿을 연결"></a>생성한 시작템플릿을 연결</h4><p><img src="/images/aws/auto-scaling/auto-scaling-10.png" alt></p><div class="note info no-icon">            <p>시작 템플릿이 생성되지 않으면 아래 목록에 보이지 않는다.</p>          </div><h4 id="Auto-Scaling-그룹-세부-정보-구성"><a href="#Auto-Scaling-그룹-세부-정보-구성" class="headerlink" title="Auto Scaling 그룹 세부 정보 구성"></a>Auto Scaling 그룹 세부 정보 구성</h4><p>서브넷은 인스턴스들을 어떤 네트워크 망에 띄울 것인지 정하는 것이며, ap-northeast-2a와 ap-northeast-2c의 기본값 모두 지정한다.<br>인스턴스들 중 절반은 서울 리전의 a 가용 여역에, 다른 절반은 서울 리전의 c 가용 영역에 생성한다는 의미이다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-11.png" alt></p><h4 id="조정-정책-구성"><a href="#조정-정책-구성" class="headerlink" title="조정 정책 구성"></a>조정 정책 구성</h4><p>인스턴스 수를 자동으로 조절하기 위한 화면이며, 최소 1개에서 최대 2개의 인스턴스를 실행하게 해서 평균 CPU 사용률 80%를 기준으로 설정한다.<br>이와 같은 설정을 하면 Auto Scaling 그룹 내에서 CPU 사용률리 80% 넘는지 안 넘는지에 따라 인스턴스의 수가 최소 1개에서 최대 2개로 자동으로 변하게 된다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-12.png" alt></p><h4 id="알림-구성"><a href="#알림-구성" class="headerlink" title="알림 구성"></a>알림 구성</h4><p>인스턴스의 변화가 있을 경우 알림을 받을 수 있으나, 현재 알림 설정에 대해서는 넘어간다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-13.png" alt></p><h4 id="태그-구성"><a href="#태그-구성" class="headerlink" title="태그 구성"></a>태그 구성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-14.png" alt></p><h4 id="검토"><a href="#검토" class="headerlink" title="검토"></a>검토</h4><p><img src="/images/aws/auto-scaling/auto-scaling-15.png" alt></p><h4 id="Auto-Scaling-그룹-생성-완료"><a href="#Auto-Scaling-그룹-생성-완료" class="headerlink" title="Auto Scaling 그룹 생성 완료"></a>Auto Scaling 그룹 생성 완료</h4><p><img src="/images/aws/auto-scaling/auto-scaling-16.png" alt></p><h4 id="Auto-Scaling-그룹-화면-구성"><a href="#Auto-Scaling-그룹-화면-구성" class="headerlink" title="Auto Scaling 그룹 화면 구성"></a>Auto Scaling 그룹 화면 구성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-17.png" alt></p><p>각 탭에 있는 간단한 내용 정리</p><table><thead><tr><th>탭 이름</th><th>항목 이름</th><th>설명</th></tr></thead><tbody><tr><td>세부 정보</td><td>원하는 용량</td><td>그룹 내 목표로 하는 인스턴스 수, 사용자가 임의로 지정할 수도 있고 자동 조정 정책에 맞게 이 값이 바뀔 수 있다. 이 값이 변경되면 Auto Scaling 그룹에서는 현재 정상 상태인 인스턴스 수가 그 값과 같아질 때까지 인스턴스를 생성하거나 줄인다.</td></tr><tr><td></td><td>최소, 최대 그룹 크기</td><td>이 그룹 내 최소 / 최대로 유지할 인스턴스 수, 예를 들어 최소가 2이면 자동 조정 정책이나 사람에 의해 인스턴스 수를 2개 미만으로 줄일 수 없다.</td></tr><tr><td></td><td>시작 템플릿</td><td>어떤 설정(AMI 종류, EC2 인스턴스 설정 등등)을 갖고 인스턴스를 생성할 것인지 지정해 놓은 설정, 과거에는 시작 구성을 이용했지만 지금은 새로 나온 기능인 시작 템플릿을 이용하도록 추천하고 있다.</td></tr><tr><td></td><td>클래식 로드 밸런서 / 대상 그룹</td><td>어떤 로드 밸런스로부터 클라이언트 요청을 받을 것인지 지정한다. 하나도 없을 때는 요청을 받지 않는다. 과거에는 클래식 로드 밸런서를 사용했지만 지금은 새로 나온 기능인 애플리케이션 로드 밸런서와 대상 그룹을 사용하는 것을 추천하고 있다.</td></tr><tr><td></td><td>태그</td><td>Auto Scaling 그룹 내 생성될 인스턴스들에 자동으로 지정할 태그 목록을 보여준다.</td></tr><tr><td>활동 기록</td><td></td><td>Auto Scaling 그룹 내 인스턴스의 실행, 종료, 실패 등에 대한 로그가 남는다. 자동으로 진행되기 때문에 문제가 발생했을 때 해당 기록을 보면 어떤 일들이 일어났는지 파악하기 쉽다.</td></tr><tr><td>조정 정책</td><td></td><td>자동으로 인스턴스를 늘리고 줄이기 위한 정책들을 표시한다. 기본적인 설정으로 CPU 사용량, 네트워크 사용량으로 처리할 수 있다. AWS CloudWatch를 통한 추가 설정을 하면 메모리 사용량, 디스크 사용량, 외부 지표 등 다양한 경우에 대해서도 인스턴스 수를 조절할 수 있다.</td></tr><tr><td></td><td>예약된 작업</td><td>CPU와 같은 자원에 대한 조건이 아닌 조건으로 삼아 특정 시간에 인스턴스수를 변화시킬 수 있는 설정 목록을 보여준다. Cron 표현식을 이용해 매주 월요일 오전 5시와 같은 복잡한 규칙의 작업도 생성할 수 있다.</td></tr><tr><td>인스턴스</td><td>인스턴스 관리</td><td>이 그룹에서 관리하고 있는 인스턴스들의 목록을 보여준다. 실행 중인 인스턴스뿐만 아니라 새로 실행되고 있거나 종료 중인 인스턴스들까지 모두 표시된다.</td></tr><tr><td></td><td>인스턴스 ID</td><td>인스턴스의 고유 ID, 이 아이디를 이용해 <code>인스턴스</code> 메뉴에서 직접 인스턴스를 찾을 수 있다.</td></tr><tr><td></td><td>수명 주기</td><td>현재 인스턴스의 상태, 생성 중, 서비스 중(InService), 종료 중 등의 상태를 가지고있고 InService 상태인 경우에만 정상적으로 서비스 중임을 나타낸다.</td></tr><tr><td></td><td>시작 구성 / 템플릿</td><td>어떤 시작 구성이나 시작 템플릿을 이용해서 생성된 인스턴스인지 나타낸다.</td></tr><tr><td></td><td>수명 주기 후크</td><td>Auto Scaling 그룹 내 인스턴스의 생명주기에 후크를 걸어 인스턴스의 변화가 있을 때마다 외부 서비스와 연동할 수 있다. 현재 걸려 있는 후크들의 목록을 보여준다.</td></tr><tr><td>모니터링</td><td></td><td>그룹 지표 수집을 활성화해둔 경우 Auto Scaling 그룹에 대한 모니터링 그래프들을 보여준다. 인스턴스 수 변화 추이 등의 데이터를 확인할 수 있다.</td></tr></tbody></table><h2 id="Auto-Scaling을-통한-인스턴스-자동-추가-제거"><a href="#Auto-Scaling을-통한-인스턴스-자동-추가-제거" class="headerlink" title="Auto Scaling을 통한 인스턴스 자동 추가, 제거"></a>Auto Scaling을 통한 인스턴스 자동 추가, 제거</h2><p><code>EXCERCISE_GROUP</code>에 대해 CPU 사용률이 80%넘으면 인스턴스를 추가하고, 80%이하로 떨어지면 인스턴스를 하나 줄이는 조정 정책을 추가하였다.</p><h3 id="편집-EXERCISE-GROUP"><a href="#편집-EXERCISE-GROUP" class="headerlink" title="편집 EXERCISE_GROUP"></a>편집 EXERCISE_GROUP</h3><p>편집 버튼을 눌러 이동한다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-18.png" alt></p><p><img src="/images/aws/auto-scaling/auto-scaling-19.png" alt></p><div class="note info no-icon">            <p>이 설정은 EXERCISE-GROUP에서 관리하는 인스턴스를 1대 실행할 것이고, 사용자나 자동 스케일링 조건에 의해 인스턴스 수가 늘어도 최대 2대까지만 가능하며 인스턴스가 줄어도 최소 1대는 실행 중이어야 한다는 뜻이다.</p>          </div><h3 id="인스턴스-상태-확인"><a href="#인스턴스-상태-확인" class="headerlink" title="인스턴스 상태 확인"></a>인스턴스 상태 확인</h3><p>인스턴스 탭에서 실행된 하나의 인스턴스의 상태가 <code>InServie</code>가 될 때까지 기다린다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-20.png" alt></p><h3 id="실행중인-인스턴스-확인"><a href="#실행중인-인스턴스-확인" class="headerlink" title="실행중인 인스턴스 확인"></a>실행중인 인스턴스 확인</h3><p>AMI 으로 생성한 <code>exercise-group</code> 인스턴스가 <code>runnung</code>중인 걸 확인한다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-21.png" alt></p><h3 id="테스트-putty-접속"><a href="#테스트-putty-접속" class="headerlink" title="테스트(putty 접속)"></a>테스트(putty 접속)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo amazon-linux-extras install epel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install stress -y</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> stress --cpu 1 --timeout 600</span></span><br><span class="line">stress: info: [4281] dispatching hogs: 1 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>600초 동안 1개의 CPU 사용량을 최대로 늘린다. 그러면 5분 ~ 10분 뒤에 하나의 인스턴스가 더 생성 된다.</p>          </div><h3 id="추가된-인스턴스-생성-확인"><a href="#추가된-인스턴스-생성-확인" class="headerlink" title="추가된 인스턴스 생성 확인"></a>추가된 인스턴스 생성 확인</h3><p>생성 확인후 CPU 사용률이 다시 정상적으로 줄어든 후 대기 시간인 300초 가 지나면 인스턴스 수가 1대로 줄어든다.</p><p><img src="/images/aws/auto-scaling/auto-scaling-22.png" alt></p><div class="note info no-icon">            <p>실습을 모두 끝낸 후 모든 Auto Scaling 그룹 내의 인스턴스를 종료하고 싶다면 <code>최대 그룹 크기</code>를 <code>0</code>으로 해주면 된다. 인스턴스를 직접 중지하거나 종료하면 Auto Scaling 내에 <code>최소 그룹 크기</code>가 <code>1</code>로 설정 되어 인스턴스를 하나 더 자동으로 생성한다.</p>          </div><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>Auto Scaling은 AMI를 이용해서 인스턴스를 생성하며, 그 과정에 보안 그룹 등 다양한 설정들을 지정해야 한다. 시작 템플릿이라는 설정 파일에 그 설정을 저장해 두고 Auto Scaling 그룹에서 가져다 쓰는 방식이다. 실습을 하고 나서 한가지 궁금한점이 생겼는데 Auto Scaling 그룹을 사용하게 된다면 <code>EC2 인스턴스</code>가 되어 직접 사용되지 않고 <code>AMI 인스터스</code>가 직접 사용하게 된다. <code>EC2 인스턴스가</code> 변경 되면 <code>AMI 인스턴스</code>를 생성하기 위해서는 모든 작업 다시 해야된다는 문제점이 있다. 문제점을 해결하려고 찾아봤는데 추 후에 공부하게 될 배포 자동화로 해결을 하면 된다. 궁금하니 배포 자동화를 공부 해야 겠다. </p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/autoscaling/plans/userguide/what-is-aws-auto-scaling.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/autoscaling/plans/userguide/what-is-aws-auto-scaling.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://wikibook.co.kr/aws-infra/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;서비스 운영이 쉬워지는 AWS 인프라 구축 가이드&lt;/a&gt; 를 읽고 실습 한 내용이고 Amazon Auto Scaling 생성 방법에 대해서 설명한다.&lt;br&gt;2020년 02월 20일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.&lt;br&gt;
    
    </summary>
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/tags/AWS/"/>
    
      <category term="AWS Auto Scailing" scheme="https://jaehyun8719.github.io/tags/AWS-Auto-Scailing/"/>
    
  </entry>
  
  <entry>
    <title>AWS EC2 서버 인스턴스 생성</title>
    <link href="https://jaehyun8719.github.io/2020/02/10/aws/ec2-setting/"/>
    <id>https://jaehyun8719.github.io/2020/02/10/aws/ec2-setting/</id>
    <published>2020-02-09T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.122Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 Amazon Elastic Compute Cloud(Amazon EC2) 초기 생성 방법에 대해서 설명한다.<br>2020년 02월 10일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.<br><a id="more"></a></p><h2 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h2><p>EC2(Elastic Compute Cloud)는 우리가 쉽게 사양을 고르고 원하는 시간만큼 사용할 수 있는 <code>가상 서버</code>라고 이해하면 되고, 서버 구축하고 보안 및 네트워크 구성과 스토리지 관리가 가능하다. 그리고 트래픽을 예측하여 서버 사양을 구성하지 않고 유동적으로 서버 사양을 변경할 수 있다.</p><h2 id="EC2-생성시-알아야할-기본-개념"><a href="#EC2-생성시-알아야할-기본-개념" class="headerlink" title="EC2 생성시 알아야할 기본 개념"></a>EC2 생성시 알아야할 기본 개념</h2><h3 id="AMI-Amazon-Machine-Image"><a href="#AMI-Amazon-Machine-Image" class="headerlink" title="AMI(Amazon Machine Image)"></a>AMI(Amazon Machine Image)</h3><p>AMI는 우리가 생성할(Window, Linux 등) EC2 인스턴스의 기반이 되는 이미지이다. 예를 들어 윈도우 설치를 할 때 ISO, CD를 이용하여서 설치 한다고 생각하면 된다.</p><h3 id="보안-그룹"><a href="#보안-그룹" class="headerlink" title="보안 그룹"></a>보안 그룹</h3><p>보안을 위해 IP와 포트 번호를 이용해 정의해서 사용하는 서버 접속 규칙이다. 예를 들어 방화벽으로 특정 IP, 포트 접속을 차단하는 것과 비슷 하게 생각하면 된다.</p><h3 id="키-페어"><a href="#키-페어" class="headerlink" title="키 페어"></a>키 페어</h3><p>서버에 접속하기 위한 열쇠 라고 이해하면 된다. 공개 키 암호화 기법으로 개인키 유출시 허가 받지 않은사람도 서버에 접속 할 수 있으니 개인키는 안전하게 보관해야 된다.</p><h2 id="AWS-EC2-인스턴스-생성"><a href="#AWS-EC2-인스턴스-생성" class="headerlink" title="AWS EC2 인스턴스 생성"></a>AWS EC2 인스턴스 생성</h2><p>서울리전에 프리 티어 <a href="https://aws.amazon.com/ko/amazon-linux-2/" rel="external nofollow noopener noreferrer" target="_blank">Amazon Linux 2 AMI</a>을 인스턴스를 생성 할 것이다. 기존 (<a href="https://aws.amazon.com/ko/amazon-linux-ami/" rel="external nofollow noopener noreferrer" target="_blank">Amazon Linux AMI 2018.03.0</a>)은 2020년 12월 31일부로 표준 지원이 종료 된다.)</p><h3 id="EC2-인스턴스-생성"><a href="#EC2-인스턴스-생성" class="headerlink" title="EC2 인스턴스 생성"></a>EC2 인스턴스 생성</h3><h4 id="AWS에-로그인한-뒤-AWS-콘솔에-접속하고-한국-리전을-선택"><a href="#AWS에-로그인한-뒤-AWS-콘솔에-접속하고-한국-리전을-선택" class="headerlink" title="AWS에 로그인한 뒤 AWS 콘솔에 접속하고, 한국 리전을 선택"></a>AWS에 로그인한 뒤 AWS 콘솔에 접속하고, 한국 리전을 선택</h4><p><img src="/images/aws/ec2-setting/ec2-setting-1.png" alt></p><h4 id="서비스-메뉴-클릭-후-EC2-검색-하여-EC2-선택"><a href="#서비스-메뉴-클릭-후-EC2-검색-하여-EC2-선택" class="headerlink" title="서비스 메뉴 클릭 후 EC2 검색 하여 EC2 선택"></a><code>서비스</code> 메뉴 클릭 후 <code>EC2</code> 검색 하여 <code>EC2</code> 선택</h4><p><img src="/images/aws/ec2-setting/ec2-setting-2.png" width="800px"></p><h4 id="왼쪽-인스턴스-선택하고-오른쪽-인스턴스-시작-선택"><a href="#왼쪽-인스턴스-선택하고-오른쪽-인스턴스-시작-선택" class="headerlink" title="왼쪽 인스턴스 선택하고 오른쪽 인스턴스 시작 선택"></a>왼쪽 <code>인스턴스</code> 선택하고 오른쪽 <code>인스턴스 시작</code> 선택</h4><p><img src="/images/aws/ec2-setting/ec2-setting-3.png" alt></p><h4 id="AMI-선택-AWS에-더-맞게-튜닝한-Amazon-Linux2-선택"><a href="#AMI-선택-AWS에-더-맞게-튜닝한-Amazon-Linux2-선택" class="headerlink" title="AMI 선택(AWS에 더 맞게 튜닝한 Amazon Linux2 선택)"></a>AMI 선택(AWS에 더 맞게 튜닝한 Amazon Linux2 선택)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-4.png" alt></p><h4 id="인스턴스-유형-선택-프리-티어-선택"><a href="#인스턴스-유형-선택-프리-티어-선택" class="headerlink" title="인스턴스 유형 선택(프리 티어 선택)"></a>인스턴스 유형 선택(프리 티어 선택)</h4><p><code>t2.micro</code>를 선택하고 <code>다음:인스턴스 세부 정보 구성</code> 버튼을 클릭한다.<br><img src="/images/aws/ec2-setting/ec2-setting-5.png" alt></p><h4 id="인스턴스-세부-정보-구성-기본-설정값-사용"><a href="#인스턴스-세부-정보-구성-기본-설정값-사용" class="headerlink" title="인스턴스 세부 정보 구성(기본 설정값 사용)"></a>인스턴스 세부 정보 구성(기본 설정값 사용)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-6.png" alt></p><h4 id="EC2-인스턴스-저장-장치-선택-기본-설장값-사용"><a href="#EC2-인스턴스-저장-장치-선택-기본-설장값-사용" class="headerlink" title="EC2 인스턴스 저장 장치 선택(기본 설장값 사용)"></a>EC2 인스턴스 저장 장치 선택(기본 설장값 사용)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-7.png" alt></p><h4 id="EC2-인스턴스에-태그를-지정"><a href="#EC2-인스턴스에-태그를-지정" class="headerlink" title="EC2 인스턴스에 태그를 지정"></a>EC2 인스턴스에 태그를 지정</h4><ol><li>태그를 사용하여 생성한 인스턴스를 성격에 맞게 분류할 때 유용하게 사용할 수 있다. 인스턴스를 생성하기 위해서 <code>태그 추가</code> 버튼을 클릭 후 태그를 생성 하면 된다.</li><li>태그를 생성하면 <code>다음: 보안 그룹 구성</code> 선택</li></ol><p><img src="/images/aws/ec2-setting/ec2-setting-8.png" alt></p><h4 id="인스턴스에-대한-접근을-제어하기-위한-보안-그룹"><a href="#인스턴스에-대한-접근을-제어하기-위한-보안-그룹" class="headerlink" title="인스턴스에 대한 접근을 제어하기 위한 보안 그룹"></a>인스턴스에 대한 접근을 제어하기 위한 보안 그룹</h4><p>현재 회사에서 운영하는 IP만 접근을 하고싶다면 보안 그룹에서 회사 IP 주소와 포트번호만 허용하는 것이 중요하다.</p><div class="note info no-icon">            <p>소스에 <code>0.0.0.0/0</code>은 모든 IP 주소에 인스턴스를 접속 허용 하는 것이다.</p>          </div><p><img src="/images/aws/ec2-setting/ec2-setting-9.png" alt></p><h4 id="지금까지-설정한-인스턴스-설정값-검토-완료후-시작하기-클릭"><a href="#지금까지-설정한-인스턴스-설정값-검토-완료후-시작하기-클릭" class="headerlink" title="지금까지 설정한 인스턴스 설정값 검토 완료후 시작하기 클릭"></a>지금까지 설정한 인스턴스 설정값 검토 완료후 <code>시작하기</code> 클릭</h4><p><img src="/images/aws/ec2-setting/ec2-setting-10.png" alt></p><h4 id="기존-키페어-선택-또는-새키-페어-생성-창"><a href="#기존-키페어-선택-또는-새키-페어-생성-창" class="headerlink" title="기존 키페어 선택 또는 새키 페어 생성 창"></a>기존 키페어 선택 또는 새키 페어 생성 창</h4><p>키 페어를 선택하여 <code>새 키 페어 생성</code>을 선택하고 생성할 키 페어 이름을 넣는다. <code>키 페어 다운로드</code> 버튼을 클릭해 키 페어를 저장해 둔다. 다운로드 받은 키페어는 서버에 접속 할 수 있는 열쇠 이므로 분실 또는 유출 하면 안된다. </p><div class="note info no-icon">            <p>키 페어는 지금 창 말고 다시 다운로드 받을 수 없다.</p>          </div><p><img src="/images/aws/ec2-setting/ec2-setting-11.png" alt></p><h4 id="인스턴스-보기-버튼을-클릭해-생성-중인-인스턴스-확인"><a href="#인스턴스-보기-버튼을-클릭해-생성-중인-인스턴스-확인" class="headerlink" title="인스턴스 보기 버튼을 클릭해 생성 중인 인스턴스 확인"></a><code>인스턴스 보기</code> 버튼을 클릭해 생성 중인 인스턴스 확인</h4><div class="note info no-icon">            <p>인스턴스가 생성되기까지는 몇 분 소요 된다.</p>          </div><p><img src="/images/aws/ec2-setting/ec2-setting-12.png" alt></p><h3 id="인스턴스-확인"><a href="#인스턴스-확인" class="headerlink" title="인스턴스 확인"></a>인스턴스 확인</h3><h4 id="인스턴스-상태-확인"><a href="#인스턴스-상태-확인" class="headerlink" title="인스턴스 상태 확인"></a>인스턴스 상태 확인</h4><ol><li>생성 중인 <code>인스턴스 상태</code>가 <code>pending</code>상태에서 <code>running</code>상태가 될때 까지 기다린다.</li><li><code>running</code>시 인스턴스가 올바르게 작동한다는 뜻이다.</li><li><code>stopped</code>는 인스턴스 중지</li><li><code>terminated</code>는 인스턴스 삭제</li></ol><p><img src="/images/aws/ec2-setting/ec2-setting-13.png" alt></p><div class="note danger no-icon">            <p>AWS는 사용량 만큼 비용을 지불 해야 한다. 그래서 사용하지 않는 EC2는 <code>인스턴스 상태</code> -&gt; <code>중지</code>를 선택하여 꺼두는 것이 좋다.</p>          </div><h4 id="인스턴스-설정-확인-간단한-정보만-확인"><a href="#인스턴스-설정-확인-간단한-정보만-확인" class="headerlink" title="인스턴스 설정 확인 (간단한 정보만 확인)"></a>인스턴스 설정 확인 (간단한 정보만 확인)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-14.png" alt></p><ol><li>퍼블릭 DNS(IPv4) : DNS 도메인</li><li>IPv4 퍼블릭 IP : 인스턴스 IP주소</li><li>보안 그룹 방화벽 개념과 같이 인바운드 규칙, 아웃바운드 규칙 확인 가능</li><li>(선택사항) 웹에서 접속을 하기 위해서는 보안 그룹에 웹 포트 <code>http(80), https(443)</code>를 추가 해야 된다. </li></ol><div class="note info no-icon">            <p>퍼블릭 도메인과 IP는 별도의 설정을 하지 않는 이상 인스턴스가 꺼질 때 사라지고 다시 켜질 때마다 새로 할당 받는다.</p>          </div><h2 id="PuTTy를-이용한-접속-방법-window-기준-설명"><a href="#PuTTy를-이용한-접속-방법-window-기준-설명" class="headerlink" title="PuTTy를 이용한 접속 방법(window 기준 설명)"></a>PuTTy를 이용한 접속 방법(window 기준 설명)</h2><p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" rel="external nofollow noopener noreferrer" target="_blank">PuTTy 설치 링크</a></p><ol><li>PuTTy 프로그램을 AWS에서 내려받은 키 페어 파일을 바로 사용할 수 없다. 그래서 <code>PuTTy Key Generator</code>를 이용해서 키 페어 파일을 변환 시켜야 된다.</li><li><code>Load</code> -&gt; <code>키페어 파일 로드</code> -&gt; <code>RSA 선택</code> -&gt; <code>Save Private Key</code><br><img src="/images/aws/ec2-setting/ec2-setting-15.png" alt></li><li>변환된 키 확인<br><img src="/images/aws/ec2-setting/ec2-setting-16.png" alt></li><li><code>PuTTy</code> 실행 후 HostName에 AWS 인스턴스 정보에서 <code>퍼블릭 DNS(IPv4)</code> 정보 입력<br><img src="/images/aws/ec2-setting/ec2-setting-17.png" alt></li><li><code>SSH</code> -&gt; <code>Auth</code>에서 변환한 키 등록<br><img src="/images/aws/ec2-setting/ec2-setting-18.png" alt></li><li>사용자 정보 입력 <code>ec2-user</code><br><img src="/images/aws/ec2-setting/ec2-setting-19.png" alt></li><li>접속 확인<br><img src="/images/aws/ec2-setting/ec2-setting-20.png" alt></li></ol><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/concepts.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/concepts.html</a></li><li><a href="https://aws.amazon.com/ko/amazon-linux-2/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/amazon-linux-2/</a></li><li><a href="https://aws.amazon.com/ko/amazon-linux-ami/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/amazon-linux-ami/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://wikibook.co.kr/aws-infra/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;서비스 운영이 쉬워지는 AWS 인프라 구축 가이드&lt;/a&gt; 를 읽고 실습 한 내용이고 Amazon Elastic Compute Cloud(Amazon EC2) 초기 생성 방법에 대해서 설명한다.&lt;br&gt;2020년 02월 10일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.&lt;br&gt;
    
    </summary>
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/categories/AWS/"/>
    
    
      <category term="AWS" scheme="https://jaehyun8719.github.io/tags/AWS/"/>
    
      <category term="AWS EC2 Setting" scheme="https://jaehyun8719.github.io/tags/AWS-EC2-Setting/"/>
    
  </entry>
  
  <entry>
    <title>Learning Javascript - 1. 리터럴과 변수, 상수, 데이터 타입</title>
    <link href="https://jaehyun8719.github.io/2019/11/20/javascript/learning-javascript/chapter1/"/>
    <id>https://jaehyun8719.github.io/2019/11/20/javascript/learning-javascript/chapter1/</id>
    <published>2019-11-19T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.125Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940" rel="external nofollow noopener noreferrer" target="_blank">Leanring Javascript(러닝 자바스크립트)</a> 읽고 개인적으로 정리한 내용입니다.<br>리터럴과 변수, 상수, 데이터 타입에 대해서 설명 한다.<br><a id="more"></a></p><h2 id="변수와-상수"><a href="#변수와-상수" class="headerlink" title="변수와 상수"></a>변수와 상수</h2><h3 id="변수-Variable"><a href="#변수-Variable" class="headerlink" title="변수(Variable)"></a>변수(Variable)</h3><p>변수(Variable)란 간단히 말해 이름이 붙은 값으로, 변수라는 이름이 암시하듯 값은 언제든 바뀔 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentTempC = <span class="number">22</span>; <span class="comment">// 섭씨온도</span></span><br></pre></td></tr></table></figure><p>이 문은 변수 <code>currentTempC</code>를 선언(생성)하고 초깃값을 할당하는 두 가지 일을 한다. 그래서 <code>currentTempC</code>값을 언제든 바꿀 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentTempC = <span class="number">22.5</span>;</span><br></pre></td></tr></table></figure><p>변수를 선언 할때 꼭 초깃값을 지정해야 하는 건 아니다. 초깃값을 할당하지 않으면 암시적으로 특별한 값 <code>undefined</code>가 할당 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetTempC; <span class="comment">// let targetTempC = undefined;와 같다.</span></span><br></pre></td></tr></table></figure><p>let 문 하나에 변수 여러 개를 선언할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetTempC, room1 = <span class="string">"conference_room_a"</span>, room2 = <span class="string">"lobby"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; targetTempC</span><br><span class="line">&lt; <span class="literal">undefined</span></span><br><span class="line">&gt; room1</span><br><span class="line">&lt; <span class="string">"conference_room_a"</span></span><br><span class="line">&gt; room2</span><br><span class="line">&lt; <span class="string">"lobby"</span></span><br></pre></td></tr></table></figure><p><code>targetTempC</code> 값을 할당하지 않았으므로 암시적으로 <code>undefined</code>가 할당 되고, <code>room1</code>과 <code>room2</code>는 문자열(텍스를)를 할당하였기 때문에 문자열 변수 이다.</p><h3 id="상수-Constant"><a href="#상수-Constant" class="headerlink" title="상수(Constant)"></a>상수(Constant)</h3><p>상수도 변수와 마찬가지로 값을 할당받을 수 있지만, 한 번 할당한 값을 바꿀 수 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ROOM_TEMP_C = <span class="number">21.5</span>, MAX_TEMP_C = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><div class="note info">            <p>변수보다 상수를 쓰도록 노력하자. 상수를 사용하면 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어 든다.</p>          </div><h2 id="식별자-이름"><a href="#식별자-이름" class="headerlink" title="식별자 이름"></a>식별자 이름</h2><p>변수와 상수, 함수 이름을 식별자(identifier)라 부른다. 그리고 식별자에는 규칙이 있다.</p><ul><li>식별자는 반드시 글자나 달러 기호($), 밑줄(_)로 시작해야 한다.</li><li>식별자에는 글자와 숫자, 달러 기호, 밑줄만 쓸 수 있다.</li><li>𝜋 나 ⊇ 같은 유니코드 문자도 쓸 수 있다.</li><li>예약어는 식별자로 쓸 수 없다</li></ul><p>자바 스크립트의 식별자 표기법</p><ul><li>카멜 케이스(camel case) : 낙타 혹처럼 보이게 currentTempC 처럼 문자가 변경 될때 대문자를 붙이는 방법이다.</li><li>스네이크 케이스(snake case) : current_temp_c 스네이크 케이스에 다라 이름을 만든 방법이다.</li></ul><h2 id="리터럴"><a href="#리터럴" class="headerlink" title="리터럴"></a>리터럴</h2><p>리터럴(literal)이란 값을 프로그램 안에서 직접 지정한다는 의미이다.<br>리터럴과 식별자의 차이를 예를 들면 <code>room1</code>변수에 값 <code>&quot;confrence_room_a&quot;</code>은 할당 했을때, <code>room1</code>은 변수를 가리키는 식별자이며, <code>&quot;confrence_room_a&quot;</code> 문자열 리터럴인 동시에 <code>room1</code>의 값이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> room1 = <span class="string">"conference_room_a"</span>; <span class="comment">// "conference_room_a"(따옴표 안)은 리터럴이다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentRoom = room1;         <span class="comment">// currentRoom의 값은 room1값("conference_room_a")과 같다.</span></span><br><span class="line"></span><br><span class="line">currentRoom = conference_room_a  <span class="comment">// conference_room_a란 식별자가 존재하지 않으므로 에러가 난다.</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">ReferenceError</span>: conference_room_a is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">3</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="원시-타입과-객체"><a href="#원시-타입과-객체" class="headerlink" title="원시 타입과 객체"></a>원시 타입과 객체</h2><p>자바스크립트에의 값은 원시 값(primitive) 또는 객체(object) 이다.<br>원시 타입 6가지</p><ul><li>숫자</li><li>문자열</li><li>불리언</li><li>null</li><li>undefined</li><li>심볼(Symbol)</li></ul><p>원시 값과 다르게 객체는 여러 가지 형태와 값을 가질 수 있다</p><ul><li>Array</li><li>Date</li><li>RegExp</li><li>Map과 WeakMap</li><li>Set과 WeakSet</li></ul><h2 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h2><p>자바스크립트는 10진수, 16진수, 지수 등 어떤 리터럴 형식을 사용하더라도 결국 숫자는 더블 형식으로 저장 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;           <span class="comment">// 숫자 리터럴. count는 더블이다</span></span><br><span class="line"><span class="keyword">const</span> blue = <span class="number">0x000ff</span>;     <span class="comment">// 16진수, 16진수ff는 10진수 255와 같다.</span></span><br><span class="line"><span class="keyword">const</span> umask = <span class="number">0o0022</span>;     <span class="comment">// 8진수, 8진수 22는 십진수 18과 같다.</span></span><br><span class="line"><span class="keyword">const</span> roomTemp = <span class="number">21.5</span>;    <span class="comment">// 십진수</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3.0e6</span>;          <span class="comment">// 지수 (3.0 x 10^6 = 3,000,000)</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="number">-1.6e-19</span>;       <span class="comment">// 지수 (-1.6 x 10^-19 = 0.00000000000000000016)</span></span><br><span class="line"><span class="keyword">const</span> inf = <span class="literal">Infinity</span>;</span><br><span class="line"><span class="keyword">const</span> ninf = -<span class="literal">Infinity</span>;</span><br><span class="line"><span class="keyword">const</span> nan = <span class="literal">NaN</span>;          <span class="comment">// "숫자가 아님"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; count</span><br><span class="line">&lt; <span class="number">10</span></span><br><span class="line">&gt; blue</span><br><span class="line">&lt; <span class="number">255</span></span><br><span class="line">&gt; umask</span><br><span class="line">&lt; <span class="number">18</span></span><br><span class="line">&gt; roomTemp</span><br><span class="line">&lt; <span class="number">21.5</span></span><br><span class="line">&gt; c</span><br><span class="line">&lt; <span class="number">3000000</span></span><br><span class="line">&gt; e</span><br><span class="line">&lt; <span class="number">-1.6e-19</span></span><br><span class="line">&gt; inf</span><br><span class="line">&lt; <span class="literal">Infinity</span></span><br><span class="line">&gt; ninf</span><br><span class="line">&lt; -<span class="literal">Infinity</span></span><br></pre></td></tr></table></figure><p>또한 숫자에 대응하는 <code>Number</code> 객체에는 중요한 숫자형 값에 해당하는 유용한 프로퍼티가 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> small = <span class="built_in">Number</span>.EPSILON;             <span class="comment">// 1에 더했을 때 1과 구분되는 결과를 만들 수 있는 가장 작은값이다. 근사치 2.2e-16</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;   <span class="comment">// 표현할 수 있는 가장 큰 정수</span></span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Number</span>.MAX_VALUE;             <span class="comment">// 표현할 수 있는 가장 큰 숫자</span></span><br><span class="line"><span class="keyword">const</span> minInt = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;   <span class="comment">// 표현할 수 있는 가장 작은 정수</span></span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Number</span>.MIN_VALUE;             <span class="comment">// 표현할 수 있는 가장 작은 숫자</span></span><br><span class="line"><span class="keyword">const</span> nInf = <span class="built_in">Number</span>.NEGATIVE_INFINITY;    <span class="comment">// -Infinity</span></span><br><span class="line"><span class="keyword">const</span> nan = <span class="built_in">Number</span>.NaN;                   <span class="comment">// Nan</span></span><br><span class="line"><span class="keyword">const</span> inf = <span class="built_in">Number</span>.POSITIVE_INFINITY;     <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; small</span><br><span class="line">&lt; <span class="number">2.220446049250313e-16</span></span><br><span class="line">&gt; bigInt</span><br><span class="line">&lt; <span class="number">9007199254740991</span></span><br><span class="line">&gt; max</span><br><span class="line">&lt; <span class="number">1.7976931348623157e+308</span></span><br><span class="line">&gt; minInt</span><br><span class="line">&lt; <span class="number">-9007199254740991</span></span><br><span class="line">&gt; min</span><br><span class="line">&lt; <span class="number">5e-324</span></span><br><span class="line">&gt; nInf</span><br><span class="line">&lt; -<span class="literal">Infinity</span></span><br><span class="line">&gt; nan</span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; inf</span><br><span class="line">&lt; <span class="literal">Infinity</span></span><br></pre></td></tr></table></figure><h2 id="특수문자"><a href="#특수문자" class="headerlink" title="특수문자"></a>특수문자</h2><table><thead><tr><th>코드</th><th>설명</th><th>예제</th></tr></thead><tbody><tr><td>\n</td><td>줄바꿈 문자</td><td>“Line1\nLine2”</td></tr><tr><td>\r</td><td>캐리지 리턴(Carriage return)</td><td>“Windows line 1\r\nWindows line2”</td></tr><tr><td>\t</td><td>탭</td><td>“Speed:\t60kph”</td></tr><tr><td>\’</td><td>작은따옴표, 꼭 이스케이프할 필요가 없어도 작은따옴표를 쓸 수 있는 곳에서는 항상 이스케이프한 작은 따옴표를 쓸 수 있다</td><td>“Don\’t”</td></tr><tr><td>\”</td><td>큰따옴표, 꼭 이스케이프할 필요가 없어도 큰따옴표를 쓸 수 있는 곳에는 항상 이스케이프한 큰따옴표를 쓸 수 있다.</td><td>‘Sam Said \”hello\”.’</td></tr><tr><td>`</td><td>백틱. ES6에서 새로 생겼다.</td><td>`New in ES6: \` strings.`</td></tr><tr><td>\$</td><td>달러 기호. ES6에서 새로 생겼다.</td><td>`New in ES6: ${interpolation}`</td></tr><tr><td>\</td><td>역슬래시</td><td>“Use \\ to represent \!”</td></tr></tbody></table><h3 id="템플릿-문자열"><a href="#템플릿-문자열" class="headerlink" title="템플릿 문자열"></a>템플릿 문자열</h3><p>문자열 병합을 통해 변수나 상수를 문자열 안에 쓸 수 있다.</p><figure class="highlight javascript"><figcaption><span>ES5 </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentTemp = <span class="number">19.5</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"The current temperature is "</span> + currentTemp + <span class="string">"\u00b0C"</span>;</span><br></pre></td></tr></table></figure><p>ES6에서는 문자열 템플릿(template)기능이 도입댔다.</p><figure class="highlight javascript"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentTemp = <span class="number">19.5</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`The current temperature is <span class="subst">$&#123;currentTemp&#125;</span> \u00b0C`</span>;</span><br></pre></td></tr></table></figure><h3 id="숫자와-문자열"><a href="#숫자와-문자열" class="headerlink" title="숫자와 문자열"></a>숫자와 문자열</h3><p>숫자를 따옴표 안에 넣으면 그건 숫자가 아니라 문자열이다. 하지만 자바스크립트는 필요하다면 숫자가 들어 있는 문자열을 자동으로 숫자로 바꾼다.<br>숫자열과 문자열은 명확하게 표시해주는것이 좋다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result1 = <span class="number">3</span> + <span class="string">"30"</span>; <span class="comment">// 3이 문자열로 바뀐다. </span></span><br><span class="line"><span class="keyword">const</span> result2 = <span class="number">3</span> * <span class="string">"30"</span>; <span class="comment">// '30'이 숫자로 바뀐다.</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; result1</span><br><span class="line">&lt; <span class="string">"330"</span></span><br><span class="line">&gt; result2</span><br><span class="line">&lt; <span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="심볼"><a href="#심볼" class="headerlink" title="심볼"></a>심볼</h3><p>심볼(symbol)은 유일한 토큰을 나타내기 위해 ES6에서 도입한 새 데이터 타입이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RED = <span class="built_in">Symbol</span>(<span class="string">"The color of a sunset!"</span>);</span><br><span class="line"><span class="keyword">const</span> ORANGE = <span class="built_in">Symbol</span>(<span class="string">"The color of a sunset!"</span>);</span><br><span class="line">RED === ORANGE</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="null과-undefined"><a href="#null과-undefined" class="headerlink" title="null과 undefined"></a>null과 undefined</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentTemp;              <span class="comment">// 암시적으로 undefined</span></span><br><span class="line"><span class="keyword">const</span> targetTemp = <span class="literal">null</span>;      <span class="comment">// null 값이므로 아직 모르는 값</span></span><br><span class="line">currentTemp = <span class="number">19.5</span>;           <span class="comment">// 19.5라는 값이 있음.</span></span><br><span class="line">currentTemp = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>객체의 콘텐츠는 프로퍼티(property) 또는 멤버(member)라고 부른다. 프로퍼티 이름은 반드시 문자열 또는 심볼이어야 하며, 값은 어떤 타입이든 상관없다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.color = &quot;yellow&quot;;</span><br></pre></td></tr></table></figure><p>프로퍼티 이름에 유요한 식별자를 써야 멤버 접근 연산자(member access operator) <code>.</code>를 사용할 수 있다. 프로퍼티 이름에 유요한 식별자가 아닌 이름을 쓴다면 계산된 멤버 접근 연산자(computed member access operator) <code>[]</code>를 써야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="string">"not an identifier"</span>] = <span class="number">3</span>;</span><br><span class="line">obj[<span class="string">"not an identifier"</span>];    <span class="comment">// 3</span></span><br><span class="line">obj[<span class="string">"color"</span>];                <span class="comment">// "yellow"</span></span><br></pre></td></tr></table></figure><p>심볼 프로퍼티에 접근할 때도 대괄호를 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SIZE = <span class="built_in">Symbol</span>();</span><br><span class="line">obj[SIZE] = <span class="number">8</span>;</span><br><span class="line">obj[SIZE];               <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]             <span class="comment">// 숫자로 구성된 배열</span></span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">1</span>, <span class="string">'tow'</span>, <span class="number">3</span>, <span class="literal">null</span>]      <span class="comment">// 여러 가지 타입으로 구성된 배열</span></span><br><span class="line"><span class="keyword">const</span> a3 = [                        <span class="comment">// 객체가 들어있는 배열</span></span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Ruby"</span>, <span class="attr">hardness</span>: <span class="number">9</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Diamond"</span>, <span class="attr">hardness</span>: <span class="number">10</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Topaz"</span>, <span class="attr">hardness</span>: <span class="number">8</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940" rel="external nofollow noopener noreferrer" target="_blank">http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Leanring Javascript(러닝 자바스크립트)&lt;/a&gt; 읽고 개인적으로 정리한 내용입니다.&lt;br&gt;리터럴과 변수, 상수, 데이터 타입에 대해서 설명 한다.&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/categories/JavaScript/"/>
    
      <category term="Learning Javascript" scheme="https://jaehyun8719.github.io/categories/JavaScript/Learning-Javascript/"/>
    
    
      <category term="JavaScript ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-ES6/"/>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/tags/JavaScript/"/>
    
      <category term="Learning Javascript" scheme="https://jaehyun8719.github.io/tags/Learning-Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6 - 6. HTML 출력해보기</title>
    <link href="https://jaehyun8719.github.io/2019/10/28/javascript/es6/chapter6/"/>
    <id>https://jaehyun8719.github.io/2019/10/28/javascript/es6/chapter6/</id>
    <published>2019-10-27T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.125Z</updated>
    
    <content type="html"><![CDATA[<hr><p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 HTML 출력해보기에 대해서 설명한다.<br><a id="more"></a></p><h2 id="총-수량을-출력"><a href="#총-수량을-출력" class="headerlink" title="총 수량을 출력"></a>총 수량을 출력</h2><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'반팔티'</span>, <span class="attr">price</span>: <span class="number">15000</span>, <span class="attr">quantity</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'긴팔티'</span>, <span class="attr">price</span>: <span class="number">20000</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'핸드폰케이스'</span>, <span class="attr">price</span>: <span class="number">15000</span>, <span class="attr">quantity</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'후드티'</span>, <span class="attr">price</span>: <span class="number">30000</span>, <span class="attr">quantity</span>: <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'바지'</span>, <span class="attr">price</span>: <span class="number">25000</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 총 수량</span></span><br><span class="line"><span class="keyword">const</span> totalQuantity = <span class="function"><span class="params">products</span> =&gt;</span> go(products,</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity),</span><br><span class="line">    reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure><p>products 받아서 <code>go함수</code>에 products를 넣는다는것은 <code>pipe함수</code>를 이용해도 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalQuantity = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity),</span><br><span class="line">    reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br></pre></td></tr></table></figure><h2 id="합산된-모든-값-구하기"><a href="#합산된-모든-값-구하기" class="headerlink" title="합산된 모든 값 구하기"></a>합산된 모든 값 구하기</h2><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity),</span><br><span class="line">    reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure><h2 id="중복된-함수-처리-하기"><a href="#중복된-함수-처리-하기" class="headerlink" title="중복된 함수 처리 하기"></a>중복된 함수 처리 하기</h2><p>위에 코드를 보면 <code>reduce((a, b) =&gt; a + b))</code> 가 중복된 것을 볼 수 있다. 코드에서 중복을 처리 하는 것은 기본이라고 생각이 든다.</p><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalQuantity = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure><h2 id="추상함수-처리"><a href="#추상함수-처리" class="headerlink" title="추상함수 처리"></a>추상함수 처리</h2><p>위에 코드를 보면 <code>map(p =&gt; p.quantity)</code>와 <code>map(p =&gt; p.price * p.quantity)</code> 비슷한 것을 볼 수 있다. 이것에 대해서 추상 처리를 하면 더욱 더 간결해 진다.</p><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> go(</span><br><span class="line">    iter,</span><br><span class="line">    map(f),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalQuantity = <span class="function"><span class="params">products</span> =&gt;</span> sum(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity, products);</span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = <span class="function"><span class="params">products</span> =&gt;</span> sum(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity, products);</span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure><h2 id="curry-함수-이용"><a href="#curry-함수-이용" class="headerlink" title="curry 함수 이용"></a>curry 함수 이용</h2><p><code>products</code>를 받는 함수가 <code>sum</code>이 리턴한 함수의 <code>products</code>전달 하기 때문에 대신해서 평가를 할 수 있다.</p><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> go(</span><br><span class="line">    iter,</span><br><span class="line">    map(f),</span><br><span class="line">    reduce(add)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalQuantity = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity);</span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity);</span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure><h2 id="HTML-코드를-이용해서-응용하기"><a href="#HTML-코드를-이용해서-응용하기" class="headerlink" title="HTML 코드를 이용해서 응용하기"></a>HTML 코드를 이용해서 응용하기</h2><figure class="highlight html"><figcaption><span>1.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 출력해보기 - 장바구니<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/fx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cart"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> products = [</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'반팔티'</span>, price: <span class="number">15000</span>, quantity: <span class="number">1</span>, isSelected: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'긴팔티'</span>, price: <span class="number">20000</span>, quantity: <span class="number">2</span>, isSelected: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'핸드폰케이스'</span>, price: <span class="number">15000</span>, quantity: <span class="number">3</span>, isSelected: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'후드티'</span>, price: <span class="number">30000</span>, quantity: <span class="number">4</span>, isSelected: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'바지'</span>, price: <span class="number">25000</span>, quantity: <span class="number">5</span>, isSelected: <span class="literal">false</span>&#125;</span></span><br><span class="line"><span class="undefined">    ];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> sum = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> go(</span></span><br><span class="line"><span class="undefined">        iter,</span></span><br><span class="line"><span class="undefined">        map(f),</span></span><br><span class="line"><span class="undefined">        reduce(add)));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> totalQuantity = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> totalPrice = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#cart'</span>).innerHTML = <span class="string">`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>상품 이름<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>가격<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>수량<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>총 가격<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            $&#123;go(products, sum(<span class="function"><span class="params">p</span> =&gt;</span> <span class="string">`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> $&#123;<span class="attr">p.isSelected</span> ? '<span class="attr">checked</span>' <span class="attr">:</span> ''&#125;&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;p.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;p.price&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;p.quantity&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;p.price * p.quantity&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="undefined">                `))&#125;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>합계<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                &lt;td&gt;$&#123;totalQuantity(filter(<span class="function"><span class="params">p</span> =&gt;</span> p.isSelected, products))&#125;&lt;<span class="regexp">/td&gt;</span></span></span><br><span class="line"><span class="javascript">                &lt;td&gt;$&#123;totalPrice(filter(<span class="function"><span class="params">p</span> =&gt;</span> p.isSelected, products))&#125;&lt;<span class="regexp">/td&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="undefined">    `;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/javascript/es6/chapter6/1.png" alt></p><h2 id="HTML-출력해보기-소스코드"><a href="#HTML-출력해보기-소스코드" class="headerlink" title="HTML 출력해보기 소스코드"></a>HTML 출력해보기 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/6.%20HTML%20출력해보기" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.&lt;br&gt;함수형 프로그래밍과 JavaScript ES6 HTML 출력해보기에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/categories/JavaScript/"/>
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/categories/JavaScript/JavaScript-Funtional-ES6/"/>
    
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-Funtional-ES6/"/>
    
      <category term="JavaScript ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-ES6/"/>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot with React 설정</title>
    <link href="https://jaehyun8719.github.io/2019/09/25/springboot/with-react/"/>
    <id>https://jaehyun8719.github.io/2019/09/25/springboot/with-react/</id>
    <published>2019-09-24T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.126Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Spring Boot(BackEnd) + React(FrontEnd) 통합 설정에 대해서 설명한다. (자세한 명령어에 대해서는 설명을 안한다.)<br>BackEnd, FrontEnd를 분리해서 적용하는 것을 추천하지만 통합할 때 장점과 단점에 대해서 확인하기 위해서 작성하였다.<br><a id="more"></a></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul><li>Rest Repositories</li><li>Thymeleaf</li><li>JPA</li><li>H2</li><li>Java 11</li><li>Lombok</li></ul><h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/springboot/with-react/1.png" alt></p><h2 id="도메인-선언"><a href="#도메인-선언" class="headerlink" title="도메인 선언"></a>도메인 선언</h2><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/Employee.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span> <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String firstName, String lastName, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Entity</code>는 관계형 테이블에 클래스를 저장하기위한 주석이다.</li><li><code>@Id</code>및 <code>@GeneratedValue</code>기본키로 사용할 JPA 주석이고,필요할 때 자동으로 생성된다.</li></ul><h2 id="저장소-정의"><a href="#저장소-정의" class="headerlink" title="저장소 정의"></a>저장소 정의</h2><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/EmployeeRepository.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>도메인 객체 유형과 기본키를 연결한다.</li></ul><h2 id="데모-데이터-생성"><a href="#데모-데이터-생성" class="headerlink" title="데모 데이터 생성"></a>데모 데이터 생성</h2><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/DatabaseLoader.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseLoader</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmployeeRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository.save(<span class="keyword">new</span> Employee(<span class="string">"Frodo"</span>, <span class="string">"Baggins"</span>, <span class="string">"ring bearer"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Spring의 <code>@Component</code>주석을 표시해서 <code>@SpringBootApplication</code>에 자동 선택되게 한다.</li><li><code>CommandLineRunner</code>는 모든 Bean을 등록후 에 애플리케이션이 동작하게 한다.</li><li><code>EmployeeRepository</code> 생성한다.</li><li><code>run()</code>메소드를 통해 명령행에 있는 데이터를 로드한다.</li></ul><h2 id="루트-URL-조정"><a href="#루트-URL-조정" class="headerlink" title="루트 URL 조정"></a>루트 URL 조정</h2><p>동일한 경로에서 WEB UI를 호출해서 루트 URL를 변경 해줘야된다.</p><figure class="highlight yaml"><figcaption><span>src/main/resources/application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    rest:</span></span><br><span class="line"><span class="attr">      base-path:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-Back-End-실행"><a href="#Spring-Boot-Back-End-실행" class="headerlink" title="Spring Boot(Back-End) 실행"></a>Spring Boot(Back-End) 실행</h2><p><code>./mvnw spring-boot:run</code> 또는 IDE 으로 실행</p><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/SpringBootReactjsApplication.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootReactjsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootReactjsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="REST-서비스-호출-해보기"><a href="#REST-서비스-호출-해보기" class="headerlink" title="REST 서비스 호출 해보기"></a>REST 서비스 호출 해보기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:8080/api</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_links"</span> : &#123;</span><br><span class="line">    <span class="string">"employees"</span> : &#123;</span><br><span class="line">      <span class="string">"href"</span> : <span class="string">"http://localhost:8080/api/employees"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profile"</span> : &#123;</span><br><span class="line">      <span class="string">"href"</span> : <span class="string">"http://localhost:8080/api/profile"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:8080/api/employees</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_embedded"</span>: &#123;</span><br><span class="line">    <span class="string">"employees"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"firstName"</span>: <span class="string">"Frodo"</span>,</span><br><span class="line">        <span class="string">"lastName"</span>: <span class="string">"Baggins"</span>,</span><br><span class="line">        <span class="string">"description"</span>: <span class="string">"ring bearer"</span>,</span><br><span class="line">        <span class="string">"_links"</span>: &#123;</span><br><span class="line">          <span class="string">"self"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/employees/1"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"employee"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/employees/1"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_links"</span>: &#123;</span><br><span class="line">    <span class="string">"self"</span>: &#123;</span><br><span class="line">      <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/employees"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profile"</span>: &#123;</span><br><span class="line">      <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/profile/employees"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UI-Controller-설정"><a href="#UI-Controller-설정" class="headerlink" title="UI Controller 설정"></a>UI Controller 설정</h2><p>Spring에 MVC Controller가 필요하다.</p><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/HomeController.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Controller</code>는 클래스를 Spring MVC 컨트롤러로 표시합니다.</li><li><code>@RequestMapping</code> “/“ 경로로 접속하면 <code>index()</code> 메소드 호출한다.</li><li>자동 설정된 뷰 리졸버가 매핑 할 템플릿의 이름(<code>index</code>)으로 반환 한다.(src/main/resources/templates/index.html)</li></ul><h2 id="HTML-템플릿-정의와-CSS-추가"><a href="#HTML-템플릿-정의와-CSS-추가" class="headerlink" title="HTML 템플릿 정의와 CSS 추가"></a>HTML 템플릿 정의와 CSS 추가</h2><figure class="highlight html"><figcaption><span>src/main/resources/templates/index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"https://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ReactJS + Spring Data REST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/main.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"react"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"built/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이 템플릿의 중요한 부분은 <code>&lt;div id=&quot;react&quot;&gt;&lt;/div&gt;</code>이고, React에 렌더링된 부분을 출력하라고 하는 부분이다.</p><figure class="highlight css"><figcaption><span>src/main/resources/static/main.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot에서 <code>src/main/resources/static</code>는 서버에서 자동으로 로드 하기 때문에 <code>main.css</code>파일을 넣었지만 자세한 내용은 다루지 않는다.</p><h2 id="JavaScript-모듈-로드"><a href="#JavaScript-모듈-로드" class="headerlink" title="JavaScript 모듈 로드"></a>JavaScript 모듈 로드</h2><p>자바 스크립트를 실행하지 않는대신 <code>pom.xml</code>을 추가해야된다.</p><h3 id="pom-xml-추가"><a href="#pom-xml-추가" class="headerlink" title="pom.xml 추가"></a>pom.xml 추가</h3><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.study.reactjs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-reactjs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-reactjs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- tag::frontend-maven-plugin[] --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">installDirectory</span>&gt;</span>target<span class="tag">&lt;/<span class="name">installDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and npm<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v10.11.0<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>6.4.1<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>webpack build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- end::frontend-maven-plugin[] --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>frontend-maven-plugin[]</code> JavaScript 빌드에 사용될 부분이다.</p>          </div><p>플러그인 작동 순서</p><ol><li><code>install-node-and-npm</code>명령은 Node.js를 <code>npm</code>명령어를 통해서 패키지 관리 도구를 <code>/tartget</code>폴더에 설치 한다.</li><li><code>npm install</code> 명령을 통해서 <code>package.json</code>에 정의된 내용으로 설치한다.</li><li><code>webpack</code>명령은 JavaScript 코드를 컴파일(<code>webpack.config.js</code>)하는 webpack 바이너리를 실행한다.</li></ol><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"spring-boot-reactjs"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Demo of ReactJS + Spring Data REST"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:jaehyun8719/spring-boot-reactjs.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"rest"</span>,</span><br><span class="line">    <span class="string">"hateoas"</span>,</span><br><span class="line">    <span class="string">"spring"</span>,</span><br><span class="line">    <span class="string">"data"</span>,</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Jaehyun"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"Apache-2.0"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/jaehyun8719/spring-boot-reactjs/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/jaehyun8719/spring-boot-reactjs"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.5.2"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.5.2"</span>,</span><br><span class="line">    <span class="attr">"rest"</span>: <span class="string">"^1.3.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"watch"</span>: <span class="string">"webpack --watch -d"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-react"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.2"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.19.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.1.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main/js/app.js'</span>,</span><br><span class="line">    devtool: <span class="string">'sourcemaps'</span>,</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'./src/main/resources/static/built/bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: path.join(__dirname, <span class="string">'.'</span>),</span><br><span class="line">                exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [<span class="string">"@babel/preset-env"</span>, <span class="string">"@babel/preset-react"</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="React-작성"><a href="#React-작성" class="headerlink" title="React 작성"></a>React 작성</h2><figure class="highlight js"><figcaption><span>src/main/js/app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::vars[]</span></span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">const</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'./client'</span>);</span><br><span class="line"><span class="comment">// end::vars[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::app[]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">employees</span>: []&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        client(&#123;<span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">path</span>: <span class="string">'/api/employees'</span>&#125;).done(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">employees</span>: response.entity._embedded.employees&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;EmployeeList employees=&#123;<span class="keyword">this</span>.state.employees&#125;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::app[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::employee-list[]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> employees = <span class="keyword">this</span>.props.employees.map(<span class="function"><span class="params">employee</span> =&gt;</span></span><br><span class="line">            &lt;Employee key=&#123;employee._links.self.href&#125; employee=&#123;employee&#125;/&gt;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;First Name&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;th&gt;Last Name&lt;/</span>th&gt;</span><br><span class="line">                    &lt;th&gt;Description&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>tr&gt;</span><br><span class="line">                &#123;employees&#125;</span><br><span class="line">                &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>table&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::employee-list[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::employee[]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&#123;<span class="keyword">this</span>.props.employee.firstName&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;&#123;this.props.employee.lastName&#125;&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;&#123;<span class="keyword">this</span>.props.employee.description&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::employee[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::render[]</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;App /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'react'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// end::render[]</span></span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>React 컴포넌트를 삽입 할 DOM 노드는 <a href="#HTML-템플릿-정의와-CSS-추가">HTML 템플릿 정의와 CSS 추가</a>에서 생성한 <code>&lt;div id=&quot;react&quot;&gt;&lt;/div&gt;</code>에 정의된다. </p>          </div><h2 id="결과-화면"><a href="#결과-화면" class="headerlink" title="결과 화면"></a>결과 화면</h2><ol><li><code>./mvnw package</code> 실행</li><li><code>bundle.js</code>와 <code>/target</code>폴더 생성 확인<br><img src="/images/springboot/with-react/2.png" alt></li><li><code>./mvnw spring-boot:run</code> 또는 IDE 으로 실행 </li><li><code>http://localhost:8080/</code> 접속 후 확인<br><img src="/images/springboot/with-react/3.png" alt></li></ol><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>개인적인 생각이지만 간단한 서비스에는 Spring Boot(BackEnd) + React(FrontEnd) 통합 설정을 하면 좋을듯 하지만, BackEnd, FrontEnd를 분류 해서 사용하는게 좋을듯 하다.</p><p><img src="/images/springboot/with-react/4.png" width="60%"></p><p>그 이유는 서비스1, 서비스2, 서비스3에 공통으로 사용할 API를 따로 만들어야되고, Spring Boot 를 run 하기전에 항상 <code>package</code> 빌드를 해야 된다는 것이다.</p><p><img src="/images/springboot/with-react/5.png" width="60%"></p><p>이와 반대로 BackEnd, FrontEnd를 분류하게되면 API를 공통으로 사용할 수 있고, 로컬이나 테스트 서버에 API 서버를 기동후 FrontEnd 작업을 할 수 있다는 장점이 있다.</p><h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-reactjs" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://spring.io/guides/tutorials/react-and-spring-data-rest/" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/guides/tutorials/react-and-spring-data-rest/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Spring Boot(BackEnd) + React(FrontEnd) 통합 설정에 대해서 설명한다. (자세한 명령어에 대해서는 설명을 안한다.)&lt;br&gt;BackEnd, FrontEnd를 분리해서 적용하는 것을 추천하지만 통합할 때 장점과 단점에 대해서 확인하기 위해서 작성하였다.&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://jaehyun8719.github.io/categories/Spring-Boot/"/>
    
    
      <category term="Spring Boot" scheme="https://jaehyun8719.github.io/tags/Spring-Boot/"/>
    
      <category term="Spring Boot with React" scheme="https://jaehyun8719.github.io/tags/Spring-Boot-with-React/"/>
    
      <category term="React" scheme="https://jaehyun8719.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6 - 5. 코드를 값으로 다루어 표현력 높이기</title>
    <link href="https://jaehyun8719.github.io/2019/09/17/javascript/es6/chapter5/"/>
    <id>https://jaehyun8719.github.io/2019/09/17/javascript/es6/chapter5/</id>
    <published>2019-09-16T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.125Z</updated>
    
    <content type="html"><![CDATA[<hr><p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 코드를 값으로 다루어 표현력 높이기에 대해서 설명한다.<br><a id="more"></a></p><h2 id="go-함수-만들기"><a href="#go-함수-만들기" class="headerlink" title="go 함수 만들기"></a>go 함수 만들기</h2><p><code>...args</code> 인자를 받아서 다음 함수 <code>a =&gt; a + 1</code> 그다음 <code>a =&gt; a + 10</code> 에게 전달을 하여 계속해서 연속적으로 하나의 일을 해야하는 <code>reduce</code> 를 이용해서 특정 함수로 축약해서 하나의 값으로 만들어 간다는 것을 구현해보자.</p><div class="note info no-icon">            <p>reduce 관련은 <a href="https://jaehyun8719.github.io/2019/09/16/javascript/es6/chapter4/#reduce">reduce 관련 링크</a> 에서 확인하면 된다.</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function">(<span class="params">...args</span>) =&gt;</span> reduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), args);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    a =&gt; a + <span class="number">1</span>,</span><br><span class="line">    a =&gt; a + <span class="number">10</span>,</span><br><span class="line">    a =&gt; a + <span class="number">100</span>,</span><br><span class="line"><span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">111</span></span><br></pre></td></tr></table></figure><h2 id="pipe-함수-만들기"><a href="#pipe-함수-만들기" class="headerlink" title="pipe 함수 만들기"></a>pipe 함수 만들기</h2><p>pipe 함수는 go 함수와 다르게 함수를 리턴하는 <code>pipe</code> 함수를 구현해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function">(<span class="params">...args</span>) =&gt;</span> reduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), args);</span><br><span class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">f, ...fs</span>) =&gt;</span> (...as) =&gt; go(f(...as), ...fs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">    a =&gt; a + <span class="number">10</span>,</span><br><span class="line">    a =&gt; a + <span class="number">100</span>,</span><br><span class="line"><span class="built_in">console</span>.log)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = pipe(</span><br><span class="line">    (a, b) =&gt; a + b,</span><br><span class="line">    a =&gt; a + <span class="number">10</span>,</span><br><span class="line">    a =&gt; a + <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">0</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">111</span></span><br><span class="line">&gt; <span class="number">111</span></span><br></pre></td></tr></table></figure><h2 id="curry-함수-만들기"><a href="#curry-함수-만들기" class="headerlink" title="curry 함수 만들기"></a>curry 함수 만들기</h2><p>함수를 값으로 다루면서 받아둔 함수를 내가 원하는 시점에 평가하는 함수 이다. <code>curry</code>라는 함수는 우선 함수를 받아서 함수를 리턴하고, 인자를 받아서 인자가 원하는 갯수만큼 들어왔을때 받아 두었던 함수를 나중에 평가 시키는 함수 이다.</p><h3 id="curry-함수-생성"><a href="#curry-함수-생성" class="headerlink" title="curry 함수 생성"></a>curry 함수 생성</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">    (a, ..._) =&gt; _.length ? f(a, ..._) : <span class="function">(<span class="params">..._</span>) =&gt;</span> f(a, ..._);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mult = curry(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b);</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>)(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mult3 = mult(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mult3(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">30</span></span><br></pre></td></tr></table></figure><ol><li><code>(a, ..._)</code> 첫번째 인자와 나머지 인자를 받음.</li><li><code>_.length</code>가 있으면 즉시 함수를 실행, 즉 인자가 2개 이상이면 즉시 실행</li><li>2번이 아니라면 <code>(..._) =&gt; f(a, ..._)</code> 다시 실행한 후 인자를<code>(..._)</code> 받아 합쳐서 실행 </li></ol><h3 id="go-curry를-사용하여-더-읽기-좋은-코드로-만들기"><a href="#go-curry를-사용하여-더-읽기-좋은-코드로-만들기" class="headerlink" title="go+curry를 사용하여 더 읽기 좋은 코드로 만들기"></a>go+curry를 사용하여 더 읽기 좋은 코드로 만들기</h3><h3 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h3><p><img src="/images/javascript/es6/chapter5/1.png" alt></p><figure class="highlight javascript"><figcaption><span>fx.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">    (a, ..._) =&gt; _.length ? f(a, ..._) : <span class="function">(<span class="params">..._</span>) =&gt;</span> f(a, ..._);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        res.push(f(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filter = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(a)) res.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reduce = curry(<span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) &#123;</span><br><span class="line">        iter = acc[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">        acc = iter.next().value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'반팔티'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'긴팔티'</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'핸드폰케이스'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'후드티'</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'바지'</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> go = <span class="function">(<span class="params">...args</span>) =&gt;</span> reduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), args);</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    reduce(</span><br><span class="line">        add,</span><br><span class="line">        map(<span class="function"><span class="params">p</span> =&gt;</span> p.price,</span><br><span class="line">            filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, products))));</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    products =&gt; filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, products),</span><br><span class="line">    products =&gt; map(<span class="function"><span class="params">p</span> =&gt;</span> p.price, products),</span><br><span class="line">    prices =&gt; reduce(add, prices),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">30000</span></span><br></pre></td></tr></table></figure><h2 id="함수-조합으로-함수-만들기"><a href="#함수-조합으로-함수-만들기" class="headerlink" title="함수 조합으로 함수 만들기"></a>함수 조합으로 함수 만들기</h2><p>파이프라인으로 만들어진 코드를 쉽게 조합하여 중복을 제거 할 수 있다.</p><div class="note info no-icon">            <p>위에서 예제로 사용했던 <code>products</code> 변수와 동일하다.</p>          </div><h3 id="중복된-코드-확인"><a href="#중복된-코드-확인" class="headerlink" title="중복된 코드 확인"></a>중복된 코드 확인</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &gt;= <span class="number">20000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">75000</span></span><br></pre></td></tr></table></figure><h3 id="중복된-코드-제거해서-공통-함수-만들기"><a href="#중복된-코드-제거해서-공통-함수-만들기" class="headerlink" title="중복된 코드 제거해서 공통 함수 만들기"></a>중복된 코드 제거해서 공통 함수 만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    total_price,</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &gt;= <span class="number">20000</span>),</span><br><span class="line">    total_price,</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">75000</span></span><br></pre></td></tr></table></figure><h3 id="고차함수-이용해서-공통-함수-만들기"><a href="#고차함수-이용해서-공통-함수-만들기" class="headerlink" title="고차함수 이용해서 공통 함수 만들기"></a>고차함수 이용해서 공통 함수 만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseTotalPrice = <span class="function"><span class="params">predi</span> =&gt;</span> pipe(</span><br><span class="line">    filter(predi),</span><br><span class="line">    totalPrice);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    baseTotalPrice(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    baseTotalPrice(<span class="function"><span class="params">p</span> =&gt;</span> p.price &gt;= <span class="number">20000</span>),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">75000</span></span><br></pre></td></tr></table></figure><h2 id="코드를-값으로-다루어-표현력-높이기-소스코드"><a href="#코드를-값으로-다루어-표현력-높이기-소스코드" class="headerlink" title="코드를 값으로 다루어 표현력 높이기 소스코드"></a>코드를 값으로 다루어 표현력 높이기 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/5.%20%EC%BD%94%EB%93%9C%EB%A5%BC%20%EA%B0%92%EC%9C%BC%EB%A1%9C%20%EB%8B%A4%EB%A3%A8%EC%96%B4%20%ED%91%9C%ED%98%84%EB%A0%A5%20%EB%86%92%EC%9D%B4%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.&lt;br&gt;함수형 프로그래밍과 JavaScript ES6 코드를 값으로 다루어 표현력 높이기에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/categories/JavaScript/"/>
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/categories/JavaScript/JavaScript-Funtional-ES6/"/>
    
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-Funtional-ES6/"/>
    
      <category term="JavaScript ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-ES6/"/>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6 - 4. map, filter, reduce</title>
    <link href="https://jaehyun8719.github.io/2019/09/16/javascript/es6/chapter4/"/>
    <id>https://jaehyun8719.github.io/2019/09/16/javascript/es6/chapter4/</id>
    <published>2019-09-15T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.124Z</updated>
    
    <content type="html"><![CDATA[<hr><p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 map, filter, reduce에 대해서 설명한다.<br><a id="more"></a></p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>Map 객체는 요소의 삽입 순서대로 원소를 순회한다. <code>for...of</code> 반복문은 각 순회에서 <code>[key, value]</code>로 이루어진 배열을 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"후드티"</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"바지"</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> products) &#123;</span><br><span class="line">    names.push(p.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prices = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> products) &#123;</span><br><span class="line">    prices.push(p.price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(prices)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="number">5</span>) [<span class="string">"반팔티"</span>, <span class="string">"반팔티"</span>, <span class="string">"핸드폰케이스"</span>, <span class="string">"후드티"</span>, <span class="string">"바지"</span>]</span><br><span class="line">&gt; (<span class="number">5</span>) [<span class="number">15000</span>, <span class="number">20000</span>, <span class="number">15000</span>, <span class="number">30000</span>, <span class="number">25000</span>]</span><br></pre></td></tr></table></figure><p>map은 고차 함수이며 함수를 값으로 다루면서 원하는 시점에 인자를 적용시킨다.<br>아래 예제에서 products라는 이터러블에서 내가 원하는 인자를 가지고 오는 예제이다.</p><div class="note info no-icon">            <p>map은 인자와 리턴값을 사용하기를 권장한다.</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        res.push(f(p)); <span class="comment">// 내가 수집할 인자를 받음.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">p</span> =&gt;</span> p.name, products));</span><br><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">p</span> =&gt;</span> p.price, products));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="number">5</span>) [<span class="string">"반팔티"</span>, <span class="string">"반팔티"</span>, <span class="string">"핸드폰케이스"</span>, <span class="string">"후드티"</span>, <span class="string">"바지"</span>]</span><br><span class="line">&gt; (<span class="number">5</span>) [<span class="number">15000</span>, <span class="number">20000</span>, <span class="number">15000</span>, <span class="number">30000</span>, <span class="number">25000</span>]</span><br></pre></td></tr></table></figure><h2 id="이터러블-프로토콜을-따른-map의-다형성"><a href="#이터러블-프로토콜을-따른-map의-다형성" class="headerlink" title="이터러블 프로토콜을 따른 map의 다형성"></a>이터러블 프로토콜을 따른 map의 다형성</h2><p><code>map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환한다.<br>헬퍼(Helper)함수를 사용하여 map의 다형성에 대해서 알아보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>).map(<span class="function"><span class="params">el</span> =&gt;</span> el.nodeName));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console error</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Uncaught <span class="built_in">TypeError</span>: <span class="built_in">document</span>.querySelectorAll(...).map is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>위에 코드와 같이 <code>document.querySelectorAll</code> 함수 내부에 <code>map</code> 함수가 없는 것을 확인 할 수 있다. 그 이유는 <code>document</code> 함수는 Array를 상속받은 객체가 아니기 때문에 <code>map</code> 함수가 프로토타입이 구현이 안되어 있다.</p>          </div><p>Array는 map을 통해서 값을 수집 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; (<span class="number">3</span>) [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>위에서 만든<a href="#map">map</a> 함수를 이용해서 <code>document.querySelectorAll(&quot;*&quot;).map(el =&gt; el.nodeName)</code>를 사용해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">el</span> =&gt;</span> el.nodeName, <span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">7</span>) [<span class="string">"HTML"</span>, <span class="string">"HEAD"</span>, <span class="string">"META"</span>, <span class="string">"BODY"</span>, <span class="string">"SCRIPT"</span>, <span class="string">"SCRIPT"</span>, <span class="string">"SCRIPT"</span>]</span><br></pre></td></tr></table></figure><p>실행이 정상적으로 되는 이유가 <code>document.querySelectorAll</code>가 이터러블 프로토콜을 따르고 있기 때문이다. 이터러블을 정상적으로 따르면서 for…of문을 사용하여 순회가 가능한지 확인 해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> it = <span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>)[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">value</span>: html, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: head, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: meta, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: body, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: script, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>이와 같이 제네레이터 함수도 이용해보면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">a</span> =&gt;</span> a * a, gen()));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">2</span>) [<span class="number">4</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><p>추가적으로 <code>new Map()</code>을 이용해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">"a"</span>, <span class="number">10</span>);</span><br><span class="line">m.set(<span class="string">"b"</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Map</span>(map(<span class="function">(<span class="params">[k, a]</span>) =&gt;</span> [k, a * <span class="number">2</span>], m)));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Map</span>(<span class="number">2</span>) &#123;<span class="string">"a"</span> =&gt; <span class="number">20</span>, <span class="string">"b"</span> =&gt; <span class="number">40</span>&#125;</span><br></pre></td></tr></table></figure><p><code>map</code>은 문장도 역시 사용할 수 있다.(모든 것 들을 map으로 사용할 수 있다는 것이다)<br>여기서 이터러블 프로토콜을 사용한다는것은 다른 헬퍼함수들과 조합성이 좋아진다.</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterProducts = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    name: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"후드티"</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"바지"</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> under20000 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> filterProducts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p.price &lt; <span class="number">20000</span>) &#123;</span><br><span class="line">        under20000.push(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전개 연산자 사용</span></span><br><span class="line"><span class="built_in">console</span>.log(...under20000);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125; &gt; &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;</span><br></pre></td></tr></table></figure><p><code>filter()</code> 메서드를 만들어서 적용 시키면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filter = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(a)) &#123;</span><br><span class="line">            res.push(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, filterProducts));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;()));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125; &gt; &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;</span><br><span class="line">&gt; (<span class="number">2</span>) [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">&gt; (<span class="number">2</span>) [<span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p><code>reduce()</code> 메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    total = total + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure><p>외부 인터페이스로 살펴보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(add, <span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(add(add(add(add(add(<span class="number">0</span>, <span class="number">1</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">5</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure><p>추가적으로 <code>filter()</code> 메서드에 <code>acc</code>값이 없이 사용 할 수 있도록 reduce가 구현 되어 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) &#123;</span><br><span class="line">        iter = acc[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">        acc = iter.next().value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p><code>acc</code> 값이 없으면 <code>[1, 2, 3, 4, 5]</code> 에서 맨 앞에 있는 <code>1</code>이 초기 값으로 설정된다. 그래서 <code>2, 3, 4, 5</code> 더한 <code>13</code> 의 결과 값이 나온다.</p>          </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reduceProducts = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"후드티"</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"바지"</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(<span class="function">(<span class="params">totalPrice, product</span>) =&gt;</span> totalPrice + product.price, <span class="number">0</span>, reduceProducts));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">105000</span></span><br></pre></td></tr></table></figure><h2 id="map-filter-reduce-중첩-사용과-함수형-사고"><a href="#map-filter-reduce-중첩-사용과-함수형-사고" class="headerlink" title="map+filter+reduce 중첩 사용과 함수형 사고"></a>map+filter+reduce 중첩 사용과 함수형 사고</h2><h3 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h3><p><img src="/images/javascript/es6/chapter4/1.png" alt></p><h4 id="fx-js-함수"><a href="#fx-js-함수" class="headerlink" title="fx.js 함수"></a>fx.js 함수</h4><figure class="highlight javascript"><figcaption><span>fx.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        res.push(f(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filter = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(a)) res.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) &#123;</span><br><span class="line">        iter = acc[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">        acc = iter.next().value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="20000원-이하의-모든-값의-합"><a href="#20000원-이하의-모든-값의-합" class="headerlink" title="20000원 이하의 모든 값의 합"></a>20000원 이하의 모든 값의 합</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'반팔티'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'긴팔티'</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'핸드폰케이스'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'후드티'</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'바지'</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(</span><br><span class="line">    add,</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price,</span><br><span class="line">        filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, products))));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    reduce(</span><br><span class="line">        add,</span><br><span class="line">        filter(<span class="function"><span class="params">n</span> =&gt;</span> n &gt;= <span class="number">20000</span>,</span><br><span class="line">            map(<span class="function"><span class="params">p</span> =&gt;</span> p.price, products))));</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 30000</span><br><span class="line">&gt; 30000</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <p>함수는 함수를 중첩해서 사용할수 있다. 코드를 읽을때 오른쪽에서부터 왼쪽으로 읽으면, products에 price가 20000원 이하를 필터를 하고, 해당하는 값(price)을 map으로 뽑아내고, 합하여 축약을 한다.</p>          </div><h2 id="map-filter-reduce-소스코드"><a href="#map-filter-reduce-소스코드" class="headerlink" title="map, filter, reduce 소스코드"></a>map, filter, reduce 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/4.%20map%2C%20filter%2C%20reduce" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.&lt;br&gt;함수형 프로그래밍과 JavaScript ES6 map, filter, reduce에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/categories/JavaScript/"/>
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/categories/JavaScript/JavaScript-Funtional-ES6/"/>
    
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-Funtional-ES6/"/>
    
      <category term="JavaScript ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-ES6/"/>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript ES6 - 3. 제너레이터와 이터레이터</title>
    <link href="https://jaehyun8719.github.io/2019/09/09/javascript/es6/chapter3/"/>
    <id>https://jaehyun8719.github.io/2019/09/09/javascript/es6/chapter3/</id>
    <published>2019-09-08T15:00:00.000Z</published>
    <updated>2022-04-08T07:52:50.124Z</updated>
    
    <content type="html"><![CDATA[<hr><p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 제너레이터와 이터레이터에 대해서 설명한다.<br><a id="more"></a></p><h2 id="제너레이터와-이터레이터"><a href="#제너레이터와-이터레이터" class="headerlink" title="제너레이터와 이터레이터"></a>제너레이터와 이터레이터</h2><ul><li>제너레이터는 이터레이터이자 이터러블을 생성하는 함수(이터레이터를 리턴하는 함수)</li><li>제네레이터의 리턴값은 마지막 <code>done</code>에 값이 <code>true</code> 일때 전달되고, for…of 문에는 적용이 안된다.</li><li>제너레이터는 순회하는 함수에 문장으로 구현할 수 있다. </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter = gen(); <span class="comment">// 제너레이트를 실행한 결과가 이터레이터</span></span><br><span class="line"><span class="built_in">console</span>.log(iter[<span class="built_in">Symbol</span>.iterator]() == iter);</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> gen()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">true</span></span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">100</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="odds"><a href="#odds" class="headerlink" title="odds"></a>odds</h2><p>제너레이터를 이용해서 홀수만 발생시키는 예제</p><h3 id="직접-입력하여-홀수-발생"><a href="#직접-입력하여-홀수-발생" class="headerlink" title="직접 입력하여 홀수 발생"></a>직접 입력하여 홀수 발생</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds();</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="해당-값을-받아-처리"><a href="#해당-값을-받아-처리" class="headerlink" title="해당 값을 받아 처리"></a>해당 값을 받아 처리</h3><p>10을 입력하여 10보다 작은 홀수를 출력한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">7</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">9</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="무한수열을-통해-홀수만-출력"><a href="#무한수열을-통해-홀수만-출력" class="headerlink" title="무한수열을 통해 홀수만 출력"></a>무한수열을 통해 홀수만 출력</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">infinity</span>(<span class="params">i = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> infinity(<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a == l) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">7</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">9</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="limit-제네레이터-이용하여-순회하는-함수-생성"><a href="#limit-제네레이터-이용하여-순회하는-함수-생성" class="headerlink" title="limit 제네레이터 이용하여 순회하는 함수 생성"></a>limit 제네레이터 이용하여 순회하는 함수 생성</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 무한 수열</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">infinity</span>(<span class="params">i = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">limit</span>(<span class="params">l, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        <span class="keyword">if</span> (a == l) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> limit(l, infinity(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">7</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">9</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="for…of-전개-연산자-구조-분해-나머지-연산자"><a href="#for…of-전개-연산자-구조-분해-나머지-연산자" class="headerlink" title="for…of, 전개 연산자, 구조 분해, 나머지 연산자"></a>for…of, 전개 연산자, 구조 분해, 나머지 연산자</h2><p><a href="#odds">odds</a>에서 만든 제네러이터를 이용해서 실행</p><h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> odds(<span class="number">14</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; <span class="number">5</span></span><br><span class="line">&gt; <span class="number">7</span></span><br><span class="line">&gt; <span class="number">9</span></span><br><span class="line">&gt; <span class="number">11</span></span><br><span class="line">&gt; <span class="number">13</span></span><br></pre></td></tr></table></figure><h3 id="전개-연산자"><a href="#전개-연산자" class="headerlink" title="전개 연산자"></a>전개 연산자</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...odds(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log([...odds(<span class="number">10</span>)], ...odds(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line">&gt; (<span class="number">5</span>) [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>] <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">11</span> <span class="number">13</span> <span class="number">15</span> <span class="number">17</span> <span class="number">19</span></span><br></pre></td></tr></table></figure><h3 id="구조-분해"><a href="#구조-분해" class="headerlink" title="구조 분해"></a>구조 분해</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [head, ...tail] = odds(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(head);</span><br><span class="line"><span class="built_in">console</span>.log(tail);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; (<span class="number">2</span>) [<span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h3 id="나머지-연산자"><a href="#나머지-연산자" class="headerlink" title="나머지 연산자"></a>나머지 연산자</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [head, ...tail] = odds(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(head);</span><br><span class="line"><span class="built_in">console</span>.log(tail);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; (<span class="number">3</span>) [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h2 id="제너레이터와-이터레이터-소스코드"><a href="#제너레이터와-이터레이터-소스코드" class="headerlink" title="제너레이터와 이터레이터 소스코드"></a>제너레이터와 이터레이터 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/3.%20%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0%EC%99%80%20%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.&lt;br&gt;함수형 프로그래밍과 JavaScript ES6 제너레이터와 이터레이터에 대해서 설명한다.&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/categories/JavaScript/"/>
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/categories/JavaScript/JavaScript-Funtional-ES6/"/>
    
    
      <category term="JavaScript Funtional ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-Funtional-ES6/"/>
    
      <category term="JavaScript ES6" scheme="https://jaehyun8719.github.io/tags/JavaScript-ES6/"/>
    
      <category term="JavaScript" scheme="https://jaehyun8719.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
