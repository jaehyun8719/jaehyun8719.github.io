<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS Auto Scaling</title>
    <url>/2020/02/20/aws/auto-scaling/</url>
    <content><![CDATA[<hr>
<p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 Amazon Auto Scaling 생성 방법에 대해서 설명한다.<br>2020년 02월 20일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.<br><a id="more"></a></p>
<h2 id="Auto-Scaling"><a href="#Auto-Scaling" class="headerlink" title="Auto Scaling"></a>Auto Scaling</h2><p>Auto Scaling 이란 트래픽에 따라 서버의 수를 자동으로 늘리고 줄이는 자동 조정(Auto Scaling) 이다. 예를 들어 하나의 인스턴스의 CPU사용률이 5분동안 80%이상을 넘어서면 Auto Scaling 그룹에서 똑같은 인스턴스를 하나 더 생성한다. 그래서 하나더 생성된 인스턴스를 통해서 분산 처리가 되어 CPU가 정상 범위로 내려오면, 똑같이 생성된 인스턴스는 자동으로 제거가 되면서 비용을 절감 할 수 있다.</p>
<h2 id="AWS-Auto-Scaling-그룹의-구성"><a href="#AWS-Auto-Scaling-그룹의-구성" class="headerlink" title="AWS Auto Scaling 그룹의 구성"></a>AWS Auto Scaling 그룹의 구성</h2><p><img src="/images/aws/auto-scaling/auto-scaling-1.png" alt></p>
<ol>
<li>Auto Scaling 그룹을 생성하기 위해서는 생성할 EC2 인스턴스(B 인스턴스)를 선택</li>
<li>B 인스턴스의 현재환경을 스냅숏으로 AMI 생성</li>
<li>AMI를 이용해 어떤 사양의 인스턴스를 띄울지 미리 정의해두는 시작 템플릿 생성</li>
<li>Auto Scaling 그룹에서 B 인스턴스의 환경을 갖고 있으며 시작 템플릿에서 정의된 설정으로 생성된 인스턴스들을 자동으로 생성</li>
</ol>
<h2 id="Auto-Scaling-그룹-생성"><a href="#Auto-Scaling-그룹-생성" class="headerlink" title="Auto Scaling 그룹 생성"></a>Auto Scaling 그룹 생성</h2><h3 id="AMI-이미지-생성-방법"><a href="#AMI-이미지-생성-방법" class="headerlink" title="AMI 이미지 생성 방법"></a>AMI 이미지 생성 방법</h3><h4 id="AMI-이미지-생성"><a href="#AMI-이미지-생성" class="headerlink" title="AMI 이미지 생성"></a>AMI 이미지 생성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-2.png" alt></p>
<div class="note info no-icon">
            <p>EC2 인스턴스 스냅숏을 생성 할때는 안전하게 시스템을 <code>stopped</code>상태로 변경후 생성하는게 좋다.</p>
          </div>
<h4 id="이미지-생성-버튼-클릭"><a href="#이미지-생성-버튼-클릭" class="headerlink" title="이미지 생성 버튼 클릭"></a>이미지 생성 버튼 클릭</h4><p><img src="/images/aws/auto-scaling/auto-scaling-3.png" alt></p>
<h4 id="이미지-생성-요청-성공"><a href="#이미지-생성-요청-성공" class="headerlink" title="이미지 생성 요청 성공"></a>이미지 생성 요청 성공</h4><p><img src="/images/aws/auto-scaling/auto-scaling-4.png" alt></p>
<h3 id="시작-템플릿-생성-방법"><a href="#시작-템플릿-생성-방법" class="headerlink" title="시작 템플릿 생성 방법"></a>시작 템플릿 생성 방법</h3><h4 id="시작-템플릿-생성"><a href="#시작-템플릿-생성" class="headerlink" title="시작 템플릿 생성"></a>시작 템플릿 생성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-5.png" alt></p>
<h4 id="시작-템플릿-설정-값-지정"><a href="#시작-템플릿-설정-값-지정" class="headerlink" title="시작 템플릿 설정 값 지정"></a>시작 템플릿 설정 값 지정</h4><p><img src="/images/aws/auto-scaling/auto-scaling-6.png" alt></p>
<ol>
<li>시작 템플릿 이름 입력</li>
<li>AMI ID는 AMI에서 생성된 이미지 AMI ID 입력후 선택</li>
<li>인스턴스 유형 선택</li>
<li>기존에 만들었어 키페어 선택</li>
<li>VPC 선택</li>
<li><code>web, ssh</code> 의 보안 그룹 적용(테스트할 보안 그룹 적용 하면 됨)</li>
</ol>
<h4 id="시작-템플릿-생성-확인"><a href="#시작-템플릿-생성-확인" class="headerlink" title="시작 템플릿 생성 확인"></a>시작 템플릿 생성 확인</h4><p><img src="/images/aws/auto-scaling/auto-scaling-7.png" alt></p>
<h4 id="메뉴에서-시작-템플릿-생성-확인"><a href="#메뉴에서-시작-템플릿-생성-확인" class="headerlink" title="메뉴에서 시작 템플릿 생성 확인"></a>메뉴에서 시작 템플릿 생성 확인</h4><p><img src="/images/aws/auto-scaling/auto-scaling-8.png" alt></p>
<h3 id="Auto-Scaling-그룹"><a href="#Auto-Scaling-그룹" class="headerlink" title="Auto Scaling 그룹"></a>Auto Scaling 그룹</h3><h4 id="Auto-Scaling-그룹-생성-1"><a href="#Auto-Scaling-그룹-생성-1" class="headerlink" title="Auto Scaling 그룹 생성"></a>Auto Scaling 그룹 생성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-9.png" alt></p>
<h4 id="생성한-시작템플릿을-연결"><a href="#생성한-시작템플릿을-연결" class="headerlink" title="생성한 시작템플릿을 연결"></a>생성한 시작템플릿을 연결</h4><p><img src="/images/aws/auto-scaling/auto-scaling-10.png" alt></p>
<div class="note info no-icon">
            <p>시작 템플릿이 생성되지 않으면 아래 목록에 보이지 않는다.</p>
          </div>
<h4 id="Auto-Scaling-그룹-세부-정보-구성"><a href="#Auto-Scaling-그룹-세부-정보-구성" class="headerlink" title="Auto Scaling 그룹 세부 정보 구성"></a>Auto Scaling 그룹 세부 정보 구성</h4><p>서브넷은 인스턴스들을 어떤 네트워크 망에 띄울 것인지 정하는 것이며, ap-northeast-2a와 ap-northeast-2c의 기본값 모두 지정한다.<br>인스턴스들 중 절반은 서울 리전의 a 가용 여역에, 다른 절반은 서울 리전의 c 가용 영역에 생성한다는 의미이다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-11.png" alt></p>
<h4 id="조정-정책-구성"><a href="#조정-정책-구성" class="headerlink" title="조정 정책 구성"></a>조정 정책 구성</h4><p>인스턴스 수를 자동으로 조절하기 위한 화면이며, 최소 1개에서 최대 2개의 인스턴스를 실행하게 해서 평균 CPU 사용률 80%를 기준으로 설정한다.<br>이와 같은 설정을 하면 Auto Scaling 그룹 내에서 CPU 사용률리 80% 넘는지 안 넘는지에 따라 인스턴스의 수가 최소 1개에서 최대 2개로 자동으로 변하게 된다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-12.png" alt></p>
<h4 id="알림-구성"><a href="#알림-구성" class="headerlink" title="알림 구성"></a>알림 구성</h4><p>인스턴스의 변화가 있을 경우 알림을 받을 수 있으나, 현재 알림 설정에 대해서는 넘어간다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-13.png" alt></p>
<h4 id="태그-구성"><a href="#태그-구성" class="headerlink" title="태그 구성"></a>태그 구성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-14.png" alt></p>
<h4 id="검토"><a href="#검토" class="headerlink" title="검토"></a>검토</h4><p><img src="/images/aws/auto-scaling/auto-scaling-15.png" alt></p>
<h4 id="Auto-Scaling-그룹-생성-완료"><a href="#Auto-Scaling-그룹-생성-완료" class="headerlink" title="Auto Scaling 그룹 생성 완료"></a>Auto Scaling 그룹 생성 완료</h4><p><img src="/images/aws/auto-scaling/auto-scaling-16.png" alt></p>
<h4 id="Auto-Scaling-그룹-화면-구성"><a href="#Auto-Scaling-그룹-화면-구성" class="headerlink" title="Auto Scaling 그룹 화면 구성"></a>Auto Scaling 그룹 화면 구성</h4><p><img src="/images/aws/auto-scaling/auto-scaling-17.png" alt></p>
<p>각 탭에 있는 간단한 내용 정리</p>
<table>
<thead>
<tr>
<th>탭 이름</th>
<th>항목 이름</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>세부 정보</td>
<td>원하는 용량</td>
<td>그룹 내 목표로 하는 인스턴스 수, 사용자가 임의로 지정할 수도 있고 자동 조정 정책에 맞게 이 값이 바뀔 수 있다. 이 값이 변경되면 Auto Scaling 그룹에서는 현재 정상 상태인 인스턴스 수가 그 값과 같아질 때까지 인스턴스를 생성하거나 줄인다.</td>
</tr>
<tr>
<td></td>
<td>최소, 최대 그룹 크기</td>
<td>이 그룹 내 최소 / 최대로 유지할 인스턴스 수, 예를 들어 최소가 2이면 자동 조정 정책이나 사람에 의해 인스턴스 수를 2개 미만으로 줄일 수 없다.</td>
</tr>
<tr>
<td></td>
<td>시작 템플릿</td>
<td>어떤 설정(AMI 종류, EC2 인스턴스 설정 등등)을 갖고 인스턴스를 생성할 것인지 지정해 놓은 설정, 과거에는 시작 구성을 이용했지만 지금은 새로 나온 기능인 시작 템플릿을 이용하도록 추천하고 있다.</td>
</tr>
<tr>
<td></td>
<td>클래식 로드 밸런서 / 대상 그룹</td>
<td>어떤 로드 밸런스로부터 클라이언트 요청을 받을 것인지 지정한다. 하나도 없을 때는 요청을 받지 않는다. 과거에는 클래식 로드 밸런서를 사용했지만 지금은 새로 나온 기능인 애플리케이션 로드 밸런서와 대상 그룹을 사용하는 것을 추천하고 있다.</td>
</tr>
<tr>
<td></td>
<td>태그</td>
<td>Auto Scaling 그룹 내 생성될 인스턴스들에 자동으로 지정할 태그 목록을 보여준다.</td>
</tr>
<tr>
<td>활동 기록</td>
<td></td>
<td>Auto Scaling 그룹 내 인스턴스의 실행, 종료, 실패 등에 대한 로그가 남는다. 자동으로 진행되기 때문에 문제가 발생했을 때 해당 기록을 보면 어떤 일들이 일어났는지 파악하기 쉽다.</td>
</tr>
<tr>
<td>조정 정책</td>
<td></td>
<td>자동으로 인스턴스를 늘리고 줄이기 위한 정책들을 표시한다. 기본적인 설정으로 CPU 사용량, 네트워크 사용량으로 처리할 수 있다. AWS CloudWatch를 통한 추가 설정을 하면 메모리 사용량, 디스크 사용량, 외부 지표 등 다양한 경우에 대해서도 인스턴스 수를 조절할 수 있다.</td>
</tr>
<tr>
<td></td>
<td>예약된 작업</td>
<td>CPU와 같은 자원에 대한 조건이 아닌 조건으로 삼아 특정 시간에 인스턴스수를 변화시킬 수 있는 설정 목록을 보여준다. Cron 표현식을 이용해 매주 월요일 오전 5시와 같은 복잡한 규칙의 작업도 생성할 수 있다.</td>
</tr>
<tr>
<td>인스턴스</td>
<td>인스턴스 관리</td>
<td>이 그룹에서 관리하고 있는 인스턴스들의 목록을 보여준다. 실행 중인 인스턴스뿐만 아니라 새로 실행되고 있거나 종료 중인 인스턴스들까지 모두 표시된다.</td>
</tr>
<tr>
<td></td>
<td>인스턴스 ID</td>
<td>인스턴스의 고유 ID, 이 아이디를 이용해 <code>인스턴스</code> 메뉴에서 직접 인스턴스를 찾을 수 있다.</td>
</tr>
<tr>
<td></td>
<td>수명 주기</td>
<td>현재 인스턴스의 상태, 생성 중, 서비스 중(InService), 종료 중 등의 상태를 가지고있고 InService 상태인 경우에만 정상적으로 서비스 중임을 나타낸다.</td>
</tr>
<tr>
<td></td>
<td>시작 구성 / 템플릿</td>
<td>어떤 시작 구성이나 시작 템플릿을 이용해서 생성된 인스턴스인지 나타낸다.</td>
</tr>
<tr>
<td></td>
<td>수명 주기 후크</td>
<td>Auto Scaling 그룹 내 인스턴스의 생명주기에 후크를 걸어 인스턴스의 변화가 있을 때마다 외부 서비스와 연동할 수 있다. 현재 걸려 있는 후크들의 목록을 보여준다.</td>
</tr>
<tr>
<td>모니터링</td>
<td></td>
<td>그룹 지표 수집을 활성화해둔 경우 Auto Scaling 그룹에 대한 모니터링 그래프들을 보여준다. 인스턴스 수 변화 추이 등의 데이터를 확인할 수 있다.</td>
</tr>
</tbody>
</table>
<h2 id="Auto-Scaling을-통한-인스턴스-자동-추가-제거"><a href="#Auto-Scaling을-통한-인스턴스-자동-추가-제거" class="headerlink" title="Auto Scaling을 통한 인스턴스 자동 추가, 제거"></a>Auto Scaling을 통한 인스턴스 자동 추가, 제거</h2><p><code>EXCERCISE_GROUP</code>에 대해 CPU 사용률이 80%넘으면 인스턴스를 추가하고, 80%이하로 떨어지면 인스턴스를 하나 줄이는 조정 정책을 추가하였다.</p>
<h3 id="편집-EXERCISE-GROUP"><a href="#편집-EXERCISE-GROUP" class="headerlink" title="편집 EXERCISE_GROUP"></a>편집 EXERCISE_GROUP</h3><p>편집 버튼을 눌러 이동한다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-18.png" alt></p>
<p><img src="/images/aws/auto-scaling/auto-scaling-19.png" alt></p>
<div class="note info no-icon">
            <p>이 설정은 EXERCISE-GROUP에서 관리하는 인스턴스를 1대 실행할 것이고, 사용자나 자동 스케일링 조건에 의해 인스턴스 수가 늘어도 최대 2대까지만 가능하며 인스턴스가 줄어도 최소 1대는 실행 중이어야 한다는 뜻이다.</p>
          </div>
<h3 id="인스턴스-상태-확인"><a href="#인스턴스-상태-확인" class="headerlink" title="인스턴스 상태 확인"></a>인스턴스 상태 확인</h3><p>인스턴스 탭에서 실행된 하나의 인스턴스의 상태가 <code>InServie</code>가 될 때까지 기다린다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-20.png" alt></p>
<h3 id="실행중인-인스턴스-확인"><a href="#실행중인-인스턴스-확인" class="headerlink" title="실행중인 인스턴스 확인"></a>실행중인 인스턴스 확인</h3><p>AMI 으로 생성한 <code>exercise-group</code> 인스턴스가 <code>runnung</code>중인 걸 확인한다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-21.png" alt></p>
<h3 id="테스트-putty-접속"><a href="#테스트-putty-접속" class="headerlink" title="테스트(putty 접속)"></a>테스트(putty 접속)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo amazon-linux-extras install epel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install stress -y</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> stress --cpu 1 --timeout 600</span></span><br><span class="line">stress: info: [4281] dispatching hogs: 1 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>600초 동안 1개의 CPU 사용량을 최대로 늘린다. 그러면 5분 ~ 10분 뒤에 하나의 인스턴스가 더 생성 된다.</p>
          </div>
<h3 id="추가된-인스턴스-생성-확인"><a href="#추가된-인스턴스-생성-확인" class="headerlink" title="추가된 인스턴스 생성 확인"></a>추가된 인스턴스 생성 확인</h3><p>생성 확인후 CPU 사용률이 다시 정상적으로 줄어든 후 대기 시간인 300초 가 지나면 인스턴스 수가 1대로 줄어든다.</p>
<p><img src="/images/aws/auto-scaling/auto-scaling-22.png" alt></p>
<div class="note info no-icon">
            <p>실습을 모두 끝낸 후 모든 Auto Scaling 그룹 내의 인스턴스를 종료하고 싶다면 <code>최대 그룹 크기</code>를 <code>0</code>으로 해주면 된다. 인스턴스를 직접 중지하거나 종료하면 Auto Scaling 내에 <code>최소 그룹 크기</code>가 <code>1</code>로 설정 되어 인스턴스를 하나 더 자동으로 생성한다.</p>
          </div>
<h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>Auto Scaling은 AMI를 이용해서 인스턴스를 생성하며, 그 과정에 보안 그룹 등 다양한 설정들을 지정해야 한다. 시작 템플릿이라는 설정 파일에 그 설정을 저장해 두고 Auto Scaling 그룹에서 가져다 쓰는 방식이다. 실습을 하고 나서 한가지 궁금한점이 생겼는데 Auto Scaling 그룹을 사용하게 된다면 <code>EC2 인스턴스</code>가 되어 직접 사용되지 않고 <code>AMI 인스터스</code>가 직접 사용하게 된다. <code>EC2 인스턴스가</code> 변경 되면 <code>AMI 인스턴스</code>를 생성하기 위해서는 모든 작업 다시 해야된다는 문제점이 있다. 문제점을 해결하려고 찾아봤는데 추 후에 공부하게 될 배포 자동화로 해결을 하면 된다. 궁금하니 배포 자동화를 공부 해야 겠다. </p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li>
<li><a href="https://docs.aws.amazon.com/ko_kr/autoscaling/plans/userguide/what-is-aws-auto-scaling.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/autoscaling/plans/userguide/what-is-aws-auto-scaling.html</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>AWS Auto Scailing</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Blue/Green deployment</title>
    <url>/2020/04/22/aws/blue-green-deployment/</url>
    <content><![CDATA[<hr>
<p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 AWS Blue/Green deployment 생성 방법에 대해서 설명한다.</p>
<div class="note info no-icon">
            <p>Blue/Green 배포전 필요한 설정 참고</p><ol><li><a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/">Auto Scaling</a></li><li><a href="https://jaehyun8719.github.io/2020/03/10/aws/elastic-load-balancing/">Elastic Load Balancing</a> </li></ol>
          </div>
<a id="more"></a>
<h2 id="AWS에서-Blue-Green-배포-개념"><a href="#AWS에서-Blue-Green-배포-개념" class="headerlink" title="AWS에서 Blue/Green 배포 개념"></a>AWS에서 Blue/Green 배포 개념</h2><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-1.png" alt></p>
<ol>
<li><code>EC2 인스턴스 v1</code>을 정지하고 <code>AMI v1</code> 생성용 인스턴스를 생성</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-2.png" alt></p>
<ol start="2">
<li><code>v2</code>을 배포 후 인스턴스 종료하고 <code>AMI v2</code> 와 <code>시작 템플릿 v2</code>생성</li>
<li>로드 밸런서에 <code>Green 그룹</code>을 등록해서 <code>Green</code>, <code>Blue</code> 인스턴스들을 나눠서 처리</li>
<li><code>Green</code>, <code>Blue</code> 요청 처리에 문제가 없으면 <code>Blue 그룹</code>을 로드 밸런서에서 제외</li>
<li>몇 시간 모니터링 후 문제가 없으면 <code>Blue 그룹</code> 인스턴스를 모두 종료</li>
</ol>
<h2 id="Blue-Green-배포"><a href="#Blue-Green-배포" class="headerlink" title="Blue/Green 배포"></a>Blue/Green 배포</h2><h3 id="Blue-Green-배포를-위한-Auto-Scaling-그룹-만들기"><a href="#Blue-Green-배포를-위한-Auto-Scaling-그룹-만들기" class="headerlink" title="Blue/Green 배포를 위한 Auto Scaling 그룹 만들기"></a>Blue/Green 배포를 위한 Auto Scaling 그룹 만들기</h3><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-3.png" alt></p>
<ol>
<li>Blue 그룹을 생성하기 위해 <code>[Auto Scaling 그룹 생성]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-4.png" alt><br><img src="/images/aws/blue-green-deployment/blue-green-deployment-5.png" alt></p>
<ol start="2">
<li><code>[시작 템플릿]</code>에서 기존에 AMI로 만든 <code>exercise-launch-template</code>를 선택하여 <code>다음</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-6.png" alt></p>
<ol start="3">
<li><code>[시작 템플릿 준수]</code> 선택 </li>
<li>a, c 리전의 기본값을 설정 후 <code>[다음]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-7.png" alt></p>
<ol start="5">
<li><code>로드 밸런스</code> 설정한 <code>exercise-target-group</code> 선택 후 <code>[다음]</code> 클릭</li>
</ol>
<div class="note info no-icon">
            <p>exercise-target-group 은 미리 로드 밸런스를 설정 해서 생성된 그룹이다. 로드 밸런스 부분 참고</p>
          </div>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-8.png" alt></p>
<ol start="6">
<li><code>그룹 크기</code> 설정 후 <code>[다음]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-9.png" alt></p>
<ol start="7">
<li>메일, 연락처 알림은 추가 하지 않으므로 <code>[다음]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-10.png" alt></p>
<ol start="8">
<li>태그 추가 후 <code>[다음]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-11.png" alt></p>
<ol start="9">
<li>검토 화면에서 값들이 제대로 설정됐는지 확인하고 <code>Auto Scaling 그룹 생성</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-12.png" alt></p>
<ol start="10">
<li>Auto Scaling 생성 확인</li>
</ol>
<h3 id="기존-버전의-코드-서비스하기"><a href="#기존-버전의-코드-서비스하기" class="headerlink" title="기존 버전의 코드 서비스하기"></a>기존 버전의 코드 서비스하기</h3><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-13.png" alt></p>
<ol>
<li><code>[로드 밸런서]</code> -&gt; <code>[exercise-lb]</code> 선택 -&gt; <code>DNS 이름</code> 복사</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-14.png" alt></p>
<ol start="2">
<li>브라우저에서 로드 밸런서의 DNS 주소로 접속 확인</li>
</ol>
<h3 id="새로운-버전의-코드를-적용한-AMI와-시작-템플릿-생성"><a href="#새로운-버전의-코드를-적용한-AMI와-시작-템플릿-생성" class="headerlink" title="새로운 버전의 코드를 적용한 AMI와 시작 템플릿 생성"></a>새로운 버전의 코드를 적용한 AMI와 시작 템플릿 생성</h3><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-15.png" alt></p>
<ol>
<li>인스턴스 상태 <code>[stopeed]</code> 상태에서 오른쪽 마우스 클릭 <code>[이미지]</code> -&gt; <code>[이미지 생성]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-16.png" alt></p>
<ol start="2">
<li><code>[이미지 이름]</code> 입력 후 <code>[이미지 생성]</code> 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-17.png" alt></p>
<ol start="3">
<li><code>[이미지]</code> -&gt; <code>[AMI]</code> 메뉴에 이미지가 생성될때까지 기다리면 상태 값이 <code>available</code>로 변경 확인</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-18.png" alt></p>
<ol start="4">
<li><code>[인스턴스]</code> -&gt; <code>[시작 템플릿]</code> 에서 <code>[시작 템플릿 생성]</code> 버튼 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-19.png" alt></p>
<ol start="5">
<li>템플릿 생성 정보 입력 후 <code>[시작 템플릿 생성]</code> 버튼 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-20.png" alt></p>
<ol start="6">
<li><code>[인스턴스]</code> -&gt; <code>[시작 템플릿]</code> 에서 <code>exercise-launch-template-beta</code> 시작 템플릿 생성 확인</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-21.png" alt></p>
<ol start="7">
<li><code>[Auto Scaling 그룹 생성]</code> 버튼 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-22.png" alt></p>
<ol start="8">
<li>위에 정보 입력 후 <code>[다음]</code> 버튼 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-23.png" alt></p>
<ol start="9">
<li>세부 정보 구성 후 <code>[다음]</code> 버튼 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-24.png" alt></p>
<ol start="10">
<li><code>로드 밸런스</code> 설정한 <code>exercise-target-group</code> 선택 후 <code>[다음]</code> 클릭</li>
</ol>
<div class="note info no-icon">
            <p>exercise-target-group 은 미리 로드 밸런스를 설정 해서 생성된 그룹이다. 로드 밸런스 부분 참고</p>
          </div>
<ol start="11">
<li>그 이하 설정은 <code>Blue</code>와 같으니 위에 부분을 참고하면 된다.</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-25.png" alt></p>
<ol start="12">
<li><code>EXERCISE-GROUP-GREEN</code> 생성 확인</li>
</ol>
<h2 id="로드-밸런서에-등록해-Blue-Green-배포-진행하기"><a href="#로드-밸런서에-등록해-Blue-Green-배포-진행하기" class="headerlink" title="로드 밸런서에 등록해 Blue/Green 배포 진행하기"></a>로드 밸런서에 등록해 Blue/Green 배포 진행하기</h2><p><img src="/images/aws/blue-green-deployment/blue-green-deployment-26.png" alt></p>
<ol>
<li>로드 밸런서에 DNS 이름을 복사 후 브라우저에 새로고침을 해보면 2가지 화면이 나오는 것을 확인할 수 있다.</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-27.png" alt></p>
<ol start="2">
<li>Blue/Green 처리 과정 화면</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-28.png" alt></p>
<ol start="3">
<li>Green 그룹이 로드 밸런서에 올바르게 등록된것을 확인했으니 Blue 그룹에 대상 그룹을 제거 해야된다. <code>[Auto Scaling Groups]</code> -&gt; <code>[EXERCISE-GROUP-BLUE]</code> 선택 -&gt; <code>[편집]</code> 버튼 클릭</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-29.png" alt></p>
<ol start="4">
<li>로드 밸런싱 타겟 제거 후 저장</li>
</ol>
<p><img src="/images/aws/blue-green-deployment/blue-green-deployment-30.png" alt></p>
<ol start="5">
<li>로드 밸런서에 DNS 이름을 복사 후 브라우저에 새로고침을 해보면 Blue 화면이 나오는 것을 확인할 수 있다.</li>
</ol>
<div class="note warning no-icon">
            <p>Auto Scaling은 항상 사용하지 않을때는 <code>그룹 세부 정보</code>에서 원하는 용량, 최소 그룹 크기 를 <code>0</code>로 해줘야 추가 요금이 발생하지 않는다.</p>
          </div>
<h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>AWS에서 배포 방법을 공부하기 위해서는 기본적으로 로드밸런서, 시작템플릿, AMI 등 개념을 알고 있어야 할 것 같다.<br>서비스를 배포 하는 도중에 서비스가 중단이 되면 큰 문제가 발생하지만, Blue/Green 배포 방법으로 서비스가 중단 되지 않고 서비스를 계속 진행 할 수 있다.<br>내가 기본적으로 생각하는 개념은 로드 밸런서의 중심으로 새로운 각 인스턴스에 하나씩 반영하면서 서버가 중지 되지 않는것처럼 보이게 하는것 같다.</p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li>
<li><a href="https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/deployment-groups-create-blue-green.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/codedeploy/latest/userguide/deployment-groups-create-blue-green.html</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>AWS Blue/Green deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS EC2 서버 인스턴스 생성</title>
    <url>/2020/02/10/aws/ec2-setting/</url>
    <content><![CDATA[<hr>
<p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 Amazon Elastic Compute Cloud(Amazon EC2) 초기 생성 방법에 대해서 설명한다.<br>2020년 02월 10일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.<br><a id="more"></a></p>
<h2 id="EC2"><a href="#EC2" class="headerlink" title="EC2"></a>EC2</h2><p>EC2(Elastic Compute Cloud)는 우리가 쉽게 사양을 고르고 원하는 시간만큼 사용할 수 있는 <code>가상 서버</code>라고 이해하면 되고, 서버 구축하고 보안 및 네트워크 구성과 스토리지 관리가 가능하다. 그리고 트래픽을 예측하여 서버 사양을 구성하지 않고 유동적으로 서버 사양을 변경할 수 있다.</p>
<h2 id="EC2-생성시-알아야할-기본-개념"><a href="#EC2-생성시-알아야할-기본-개념" class="headerlink" title="EC2 생성시 알아야할 기본 개념"></a>EC2 생성시 알아야할 기본 개념</h2><h3 id="AMI-Amazon-Machine-Image"><a href="#AMI-Amazon-Machine-Image" class="headerlink" title="AMI(Amazon Machine Image)"></a>AMI(Amazon Machine Image)</h3><p>AMI는 우리가 생성할(Window, Linux 등) EC2 인스턴스의 기반이 되는 이미지이다. 예를 들어 윈도우 설치를 할 때 ISO, CD를 이용하여서 설치 한다고 생각하면 된다.</p>
<h3 id="보안-그룹"><a href="#보안-그룹" class="headerlink" title="보안 그룹"></a>보안 그룹</h3><p>보안을 위해 IP와 포트 번호를 이용해 정의해서 사용하는 서버 접속 규칙이다. 예를 들어 방화벽으로 특정 IP, 포트 접속을 차단하는 것과 비슷 하게 생각하면 된다.</p>
<h3 id="키-페어"><a href="#키-페어" class="headerlink" title="키 페어"></a>키 페어</h3><p>서버에 접속하기 위한 열쇠 라고 이해하면 된다. 공개 키 암호화 기법으로 개인키 유출시 허가 받지 않은사람도 서버에 접속 할 수 있으니 개인키는 안전하게 보관해야 된다.</p>
<h2 id="AWS-EC2-인스턴스-생성"><a href="#AWS-EC2-인스턴스-생성" class="headerlink" title="AWS EC2 인스턴스 생성"></a>AWS EC2 인스턴스 생성</h2><p>서울리전에 프리 티어 <a href="https://aws.amazon.com/ko/amazon-linux-2/" rel="external nofollow noopener noreferrer" target="_blank">Amazon Linux 2 AMI</a>을 인스턴스를 생성 할 것이다. 기존 (<a href="https://aws.amazon.com/ko/amazon-linux-ami/" rel="external nofollow noopener noreferrer" target="_blank">Amazon Linux AMI 2018.03.0</a>)은 2020년 12월 31일부로 표준 지원이 종료 된다.)</p>
<h3 id="EC2-인스턴스-생성"><a href="#EC2-인스턴스-생성" class="headerlink" title="EC2 인스턴스 생성"></a>EC2 인스턴스 생성</h3><h4 id="AWS에-로그인한-뒤-AWS-콘솔에-접속하고-한국-리전을-선택"><a href="#AWS에-로그인한-뒤-AWS-콘솔에-접속하고-한국-리전을-선택" class="headerlink" title="AWS에 로그인한 뒤 AWS 콘솔에 접속하고, 한국 리전을 선택"></a>AWS에 로그인한 뒤 AWS 콘솔에 접속하고, 한국 리전을 선택</h4><p><img src="/images/aws/ec2-setting/ec2-setting-1.png" alt></p>
<h4 id="서비스-메뉴-클릭-후-EC2-검색-하여-EC2-선택"><a href="#서비스-메뉴-클릭-후-EC2-검색-하여-EC2-선택" class="headerlink" title="서비스 메뉴 클릭 후 EC2 검색 하여 EC2 선택"></a><code>서비스</code> 메뉴 클릭 후 <code>EC2</code> 검색 하여 <code>EC2</code> 선택</h4><p><img src="/images/aws/ec2-setting/ec2-setting-2.png" width="800px"></p>
<h4 id="왼쪽-인스턴스-선택하고-오른쪽-인스턴스-시작-선택"><a href="#왼쪽-인스턴스-선택하고-오른쪽-인스턴스-시작-선택" class="headerlink" title="왼쪽 인스턴스 선택하고 오른쪽 인스턴스 시작 선택"></a>왼쪽 <code>인스턴스</code> 선택하고 오른쪽 <code>인스턴스 시작</code> 선택</h4><p><img src="/images/aws/ec2-setting/ec2-setting-3.png" alt></p>
<h4 id="AMI-선택-AWS에-더-맞게-튜닝한-Amazon-Linux2-선택"><a href="#AMI-선택-AWS에-더-맞게-튜닝한-Amazon-Linux2-선택" class="headerlink" title="AMI 선택(AWS에 더 맞게 튜닝한 Amazon Linux2 선택)"></a>AMI 선택(AWS에 더 맞게 튜닝한 Amazon Linux2 선택)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-4.png" alt></p>
<h4 id="인스턴스-유형-선택-프리-티어-선택"><a href="#인스턴스-유형-선택-프리-티어-선택" class="headerlink" title="인스턴스 유형 선택(프리 티어 선택)"></a>인스턴스 유형 선택(프리 티어 선택)</h4><p><code>t2.micro</code>를 선택하고 <code>다음:인스턴스 세부 정보 구성</code> 버튼을 클릭한다.<br><img src="/images/aws/ec2-setting/ec2-setting-5.png" alt></p>
<h4 id="인스턴스-세부-정보-구성-기본-설정값-사용"><a href="#인스턴스-세부-정보-구성-기본-설정값-사용" class="headerlink" title="인스턴스 세부 정보 구성(기본 설정값 사용)"></a>인스턴스 세부 정보 구성(기본 설정값 사용)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-6.png" alt></p>
<h4 id="EC2-인스턴스-저장-장치-선택-기본-설장값-사용"><a href="#EC2-인스턴스-저장-장치-선택-기본-설장값-사용" class="headerlink" title="EC2 인스턴스 저장 장치 선택(기본 설장값 사용)"></a>EC2 인스턴스 저장 장치 선택(기본 설장값 사용)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-7.png" alt></p>
<h4 id="EC2-인스턴스에-태그를-지정"><a href="#EC2-인스턴스에-태그를-지정" class="headerlink" title="EC2 인스턴스에 태그를 지정"></a>EC2 인스턴스에 태그를 지정</h4><ol>
<li>태그를 사용하여 생성한 인스턴스를 성격에 맞게 분류할 때 유용하게 사용할 수 있다. 인스턴스를 생성하기 위해서 <code>태그 추가</code> 버튼을 클릭 후 태그를 생성 하면 된다.</li>
<li>태그를 생성하면 <code>다음: 보안 그룹 구성</code> 선택</li>
</ol>
<p><img src="/images/aws/ec2-setting/ec2-setting-8.png" alt></p>
<h4 id="인스턴스에-대한-접근을-제어하기-위한-보안-그룹"><a href="#인스턴스에-대한-접근을-제어하기-위한-보안-그룹" class="headerlink" title="인스턴스에 대한 접근을 제어하기 위한 보안 그룹"></a>인스턴스에 대한 접근을 제어하기 위한 보안 그룹</h4><p>현재 회사에서 운영하는 IP만 접근을 하고싶다면 보안 그룹에서 회사 IP 주소와 포트번호만 허용하는 것이 중요하다.</p>
<div class="note info no-icon">
            <p>소스에 <code>0.0.0.0/0</code>은 모든 IP 주소에 인스턴스를 접속 허용 하는 것이다.</p>
          </div>
<p><img src="/images/aws/ec2-setting/ec2-setting-9.png" alt></p>
<h4 id="지금까지-설정한-인스턴스-설정값-검토-완료후-시작하기-클릭"><a href="#지금까지-설정한-인스턴스-설정값-검토-완료후-시작하기-클릭" class="headerlink" title="지금까지 설정한 인스턴스 설정값 검토 완료후 시작하기 클릭"></a>지금까지 설정한 인스턴스 설정값 검토 완료후 <code>시작하기</code> 클릭</h4><p><img src="/images/aws/ec2-setting/ec2-setting-10.png" alt></p>
<h4 id="기존-키페어-선택-또는-새키-페어-생성-창"><a href="#기존-키페어-선택-또는-새키-페어-생성-창" class="headerlink" title="기존 키페어 선택 또는 새키 페어 생성 창"></a>기존 키페어 선택 또는 새키 페어 생성 창</h4><p>키 페어를 선택하여 <code>새 키 페어 생성</code>을 선택하고 생성할 키 페어 이름을 넣는다. <code>키 페어 다운로드</code> 버튼을 클릭해 키 페어를 저장해 둔다. 다운로드 받은 키페어는 서버에 접속 할 수 있는 열쇠 이므로 분실 또는 유출 하면 안된다. </p>
<div class="note info no-icon">
            <p>키 페어는 지금 창 말고 다시 다운로드 받을 수 없다.</p>
          </div>
<p><img src="/images/aws/ec2-setting/ec2-setting-11.png" alt></p>
<h4 id="인스턴스-보기-버튼을-클릭해-생성-중인-인스턴스-확인"><a href="#인스턴스-보기-버튼을-클릭해-생성-중인-인스턴스-확인" class="headerlink" title="인스턴스 보기 버튼을 클릭해 생성 중인 인스턴스 확인"></a><code>인스턴스 보기</code> 버튼을 클릭해 생성 중인 인스턴스 확인</h4><div class="note info no-icon">
            <p>인스턴스가 생성되기까지는 몇 분 소요 된다.</p>
          </div>
<p><img src="/images/aws/ec2-setting/ec2-setting-12.png" alt></p>
<h3 id="인스턴스-확인"><a href="#인스턴스-확인" class="headerlink" title="인스턴스 확인"></a>인스턴스 확인</h3><h4 id="인스턴스-상태-확인"><a href="#인스턴스-상태-확인" class="headerlink" title="인스턴스 상태 확인"></a>인스턴스 상태 확인</h4><ol>
<li>생성 중인 <code>인스턴스 상태</code>가 <code>pending</code>상태에서 <code>running</code>상태가 될때 까지 기다린다.</li>
<li><code>running</code>시 인스턴스가 올바르게 작동한다는 뜻이다.</li>
<li><code>stopped</code>는 인스턴스 중지</li>
<li><code>terminated</code>는 인스턴스 삭제</li>
</ol>
<p><img src="/images/aws/ec2-setting/ec2-setting-13.png" alt></p>
<div class="note danger no-icon">
            <p>AWS는 사용량 만큼 비용을 지불 해야 한다. 그래서 사용하지 않는 EC2는 <code>인스턴스 상태</code> -&gt; <code>중지</code>를 선택하여 꺼두는 것이 좋다.</p>
          </div>
<h4 id="인스턴스-설정-확인-간단한-정보만-확인"><a href="#인스턴스-설정-확인-간단한-정보만-확인" class="headerlink" title="인스턴스 설정 확인 (간단한 정보만 확인)"></a>인스턴스 설정 확인 (간단한 정보만 확인)</h4><p><img src="/images/aws/ec2-setting/ec2-setting-14.png" alt></p>
<ol>
<li>퍼블릭 DNS(IPv4) : DNS 도메인</li>
<li>IPv4 퍼블릭 IP : 인스턴스 IP주소</li>
<li>보안 그룹 방화벽 개념과 같이 인바운드 규칙, 아웃바운드 규칙 확인 가능</li>
<li>(선택사항) 웹에서 접속을 하기 위해서는 보안 그룹에 웹 포트 <code>http(80), https(443)</code>를 추가 해야 된다. </li>
</ol>
<div class="note info no-icon">
            <p>퍼블릭 도메인과 IP는 별도의 설정을 하지 않는 이상 인스턴스가 꺼질 때 사라지고 다시 켜질 때마다 새로 할당 받는다.</p>
          </div>
<h2 id="PuTTy를-이용한-접속-방법-window-기준-설명"><a href="#PuTTy를-이용한-접속-방법-window-기준-설명" class="headerlink" title="PuTTy를 이용한 접속 방법(window 기준 설명)"></a>PuTTy를 이용한 접속 방법(window 기준 설명)</h2><p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" rel="external nofollow noopener noreferrer" target="_blank">PuTTy 설치 링크</a></p>
<ol>
<li>PuTTy 프로그램을 AWS에서 내려받은 키 페어 파일을 바로 사용할 수 없다. 그래서 <code>PuTTy Key Generator</code>를 이용해서 키 페어 파일을 변환 시켜야 된다.</li>
<li><code>Load</code> -&gt; <code>키페어 파일 로드</code> -&gt; <code>RSA 선택</code> -&gt; <code>Save Private Key</code><br><img src="/images/aws/ec2-setting/ec2-setting-15.png" alt></li>
<li>변환된 키 확인<br><img src="/images/aws/ec2-setting/ec2-setting-16.png" alt></li>
<li><code>PuTTy</code> 실행 후 HostName에 AWS 인스턴스 정보에서 <code>퍼블릭 DNS(IPv4)</code> 정보 입력<br><img src="/images/aws/ec2-setting/ec2-setting-17.png" alt></li>
<li><code>SSH</code> -&gt; <code>Auth</code>에서 변환한 키 등록<br><img src="/images/aws/ec2-setting/ec2-setting-18.png" alt></li>
<li>사용자 정보 입력 <code>ec2-user</code><br><img src="/images/aws/ec2-setting/ec2-setting-19.png" alt></li>
<li>접속 확인<br><img src="/images/aws/ec2-setting/ec2-setting-20.png" alt></li>
</ol>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li>
<li><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/concepts.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/concepts.html</a></li>
<li><a href="https://aws.amazon.com/ko/amazon-linux-2/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/amazon-linux-2/</a></li>
<li><a href="https://aws.amazon.com/ko/amazon-linux-ami/" rel="external nofollow noopener noreferrer" target="_blank">https://aws.amazon.com/ko/amazon-linux-ami/</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>AWS EC2 Setting</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA - 영속성 컨텍스트(Persistence Context)</title>
    <url>/2022/05/14/jpa/persistence-context/</url>
    <content><![CDATA[<hr>
<p>JPA 영속성 컨텍스트(Persistence Context) 란?</p>
<ul>
<li>엔티티를 영구 저장하는 환경</li>
<li>영속성 컨텍스트는 논리적인 개념으로 눈에 보이지 않고, 엔티티 매니저를 통해서 영속성 컨텍스트에 접근함<a id="more"></a>
</li>
</ul>
<h2 id="엔티티의-생명주기"><a href="#엔티티의-생명주기" class="headerlink" title="엔티티의 생명주기"></a>엔티티의 생명주기</h2><p><img src="/images/jpa/persistence-context/persistence-context1.png" width="50%"></p>
<h3 id="비영속-new-transient"><a href="#비영속-new-transient" class="headerlink" title="비영속(new/transient)"></a>비영속(new/transient)</h3><p>JPA 와 전혀 관련 없이 객체만 생성된 상태가 비영속 상태</p>
<p><img src="/images/jpa/persistence-context/persistence-context2.png" width="50%"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="number">1L</span></span><br><span class="line">member.name = <span class="string">"helloA"</span></span><br></pre></td></tr></table></figure>
<h3 id="영속-managed"><a href="#영속-managed" class="headerlink" title="영속(managed)"></a>영속(managed)</h3><p>영속성 컨텍스트에 관리되는 상태<br>영속성 상태라고 DB에 저장 되는 것이 아니고, commit 이후에 DB에 저장 된다.</p>
<p><img src="/images/jpa/persistence-context/persistence-context3.png" width="50%"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 생성한 상태(비영속)</span></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="number">1L</span></span><br><span class="line">member.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체를 저장한 상태(영속)</span></span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure>
<h3 id="준영속-detached"><a href="#준영속-detached" class="headerlink" title="준영속(detached)"></a>준영속(detached)</h3><p>영속성 컨텍스트에 저장되었다가 분리된 상태</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태</span></span><br><span class="line">em.detach(member)</span><br></pre></td></tr></table></figure>
<h3 id="삭제-removed"><a href="#삭제-removed" class="headerlink" title="삭제(removed)"></a>삭제(removed)</h3><p>상제된 상태</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//객체를 삭제한 상태(삭제)</span></span><br><span class="line">em.remove(member)</span><br></pre></td></tr></table></figure>
<h2 id="엔티티-조회"><a href="#엔티티-조회" class="headerlink" title="엔티티 조회"></a>엔티티 조회</h2><p><img src="/images/jpa/persistence-context/persistence-context4.png" alt></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.id = <span class="string">"memeber1"</span><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    <span class="comment">// 강제 DB Insert</span></span><br><span class="line">    em.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">    member.name = <span class="string">"helloUpdate"</span></span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br><span class="line">member.name = <span class="string">"회원1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에 저장됨</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1차 캐시에서 조회</span></span><br><span class="line"><span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br></pre></td></tr></table></figure>
<p><code>em.persist(member)</code>1차 캐시에 저장 후 <code>find(&quot;memeber1&quot;)</code> 하게되면 DB를 조회하는게 아니고 1차 캐시를 조회함</p>
<p><img src="/images/jpa/persistence-context/persistence-context5.png" alt></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DB에 member1 값이 있다고 가정</span></span><br><span class="line"><span class="keyword">val</span> findMember1 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"><span class="keyword">val</span> findMember2 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>find(&quot;memeber2&quot;)</code>를 하면 영속성 컨텍스트 안 1차 캐시를 조회</li>
<li>1차 캐시에 값이 없으면 DB를 조회</li>
<li>1차 캐시에 <code>member2</code> 저장</li>
<li><code>member2</code>를 반환</li>
<li>한번 1차 캐시에 저장되면 <code>member2</code> 조회시 1차 캐시에서 조회</li>
<li><code>find</code>로 2번 호출하는데 실제로 <code>select</code>쿼리는 한번 발생, 이유는 <code>findMember2</code>는 1차 캐쉬에서 조회<br>주의점) 트랙잰션 단위로 움직임</li>
</ol>
<h2 id="영속-엔티티의-동일설-보장"><a href="#영속-엔티티의-동일설-보장" class="headerlink" title="영속 엔티티의 동일설 보장"></a>영속 엔티티의 동일설 보장</h2><p>동일한 트랜잭션 안에서는 1차캐시에 저장되어있기 때문에 동일한 주소값을 참조(Collection에 똑같은 객체를 사용하는것과 같음)</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DB에 member1 값이 있다고 가정</span></span><br><span class="line"><span class="keyword">val</span> findMember1 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"><span class="keyword">val</span> findMember2 = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"member1")</span></span></span><br><span class="line"></span><br><span class="line">println(findMember1 == findMember2) <span class="comment">// 결과값: true</span></span><br></pre></td></tr></table></figure>
<h2 id="트랙잭션을-지원하는-쓰기-지연"><a href="#트랙잭션을-지원하는-쓰기-지연" class="headerlink" title="트랙잭션을 지원하는 쓰기 지연"></a>트랙잭션을 지원하는 쓰기 지연</h2><p>JPA는 트랜잭션을 하기전까지 영속성 컨텍스트 안에 데이터를 쌓고 있다.<br>트랙잭션 <code>commit</code>을 해야 SQL을 데이터베이스로 보낸다.</p>
<p><img src="/images/jpa/persistence-context/persistence-context6.png" alt></p>
<ol>
<li><code>persist</code>에 <code>memberA</code>를 넣으면 1차 캐시에 저장과 동시에 <code>memberA</code>에 Entity를 분석하여 SQL 문을 생성하여 <code>쓰기 지연 SQL 저장소</code>에 저장</li>
<li><code>memberB</code>도 동일하게 SQL문을 생성하여 <code>쓰기 지연 SQL 저장소</code> 저장</li>
<li><code>memberA</code>와 <code>memberB</code>가 <code>쓰기 지연 SQL 저장소</code>에 쌓인다</li>
</ol>
<p><img src="/images/jpa/persistence-context/persistence-context7.png" alt></p>
<ol start="4">
<li><code>commit()</code>을 실행하면 <code>쓰기 지연 SQL 저장소</code>에 있던 SQL문이 <code>flush</code>로 데이터 베이스에 전달</li>
</ol>
<h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><figure class="highlight kotlin"><figcaption><span>wrtieBehind.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> memberB = Member()</span><br><span class="line">    memberB.id = <span class="number">2L</span></span><br><span class="line">    memberB.name = <span class="string">"helloB"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    em.persist(memberB)</span><br><span class="line">    println(<span class="string">"=============== persist"</span>)</span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="code"><pre><span class="line">=============== persist</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br></pre></td></tr></table></figure>
<ul>
<li>주석처리 한 부분에서 insert 쿼리문이 실행 되지 않고 commit 시점에 sql문 실행</li>
<li><code>hibernate.jdbc.batch_size</code> 옵션으로 <code>쓰기지연 SQL 저장소</code>에 쌓이면 처리 갯수 설정 가능(버퍼링 기능이나 실전에서 잘 사용하지 않음)</li>
</ul>
<h2 id="Entity-수정-변경-감지"><a href="#Entity-수정-변경-감지" class="headerlink" title="Entity 수정(변경 감지)"></a>Entity 수정(변경 감지)</h2><p><img src="/images/jpa/persistence-context/persistence-context8.png" alt></p>
<ol>
<li>데이터가 처음 읽어온 상태를 스냅샷으로 저장</li>
<li>commit 시점에서 <code>Entity</code>와 <code>스냅샷</code>을 비교 하여 변경 된 부분의 update 문을 DB에 전달</li>
</ol>
<figure class="highlight kotlin"><figcaption><span>dirtyChecking.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line"><span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">tx.begin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> memberA = Member()</span><br><span class="line">    memberA.id = <span class="number">1L</span></span><br><span class="line">    memberA.name = <span class="string">"helloA"</span></span><br><span class="line"></span><br><span class="line">    em.persist(memberA)</span><br><span class="line">    <span class="comment">// 강제 DB Insert</span></span><br><span class="line">    em.flush()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">    member.name = <span class="string">"helloUpdate"</span></span><br><span class="line"></span><br><span class="line">    tx.commit()</span><br><span class="line">&#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    tx.rollback()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    em.close();</span><br><span class="line">    emf.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* insert entity.Member</span></span><br><span class="line"><span class="comment">        */</span> insert </span><br><span class="line">        into</span><br><span class="line">            Member</span><br><span class="line">            (name, id) </span><br><span class="line">        values</span><br><span class="line">            (?, ?)</span><br><span class="line">Hibernate: </span><br><span class="line">    <span class="comment">/* update</span></span><br><span class="line"><span class="comment">        entity.Member */</span> update</span><br><span class="line">            Member </span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">            name=? </span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            id=?</span><br></pre></td></tr></table></figure>
<ul>
<li>JPA는 update 코드가 있는게 아니라 Collection 처럼 변경되는 시점을 자동으로 감지해서 수정</li>
</ul>
<h2 id="Entity-삭제"><a href="#Entity-삭제" class="headerlink" title="Entity 삭제"></a>Entity 삭제</h2><p>변경 감지와 동일하게 작동</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">em.remove(member)</span><br></pre></td></tr></table></figure>
<h2 id="플러시-Flush"><a href="#플러시-Flush" class="headerlink" title="플러시(Flush)"></a>플러시(Flush)</h2><ul>
<li>영속성 컨텍스트를 비우지 않음</li>
<li>영속성 컨텍스트의 변경내용을 DB에 동기화</li>
<li>commit 직전에만 동기화</li>
</ul>
<h2 id="준영속-상태"><a href="#준영속-상태" class="headerlink" title="준영속 상태"></a>준영속 상태</h2><p>JPA가 영속성 컨텍스트에서 분리</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> member = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">1L)</span></span></span><br><span class="line">em.detach(member)</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li>
</ul>
]]></content>
      <categories>
        <category>JPA</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>영속성 컨텍스트</tag>
        <tag>Persistence Context</tag>
        <tag>flush</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Load Balancing</title>
    <url>/2020/03/10/aws/elastic-load-balancing/</url>
    <content><![CDATA[<hr>
<p><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">서비스 운영이 쉬워지는 AWS 인프라 구축 가이드</a> 를 읽고 실습 한 내용이고 AWS Elastic Load Balancing 생성 방법에 대해서 설명한다.<br>2020년 03월 10일 기준으로 AWS UI가 변경 될 수 있으니, 참고 하길 바란다.<br><a id="more"></a></p>
<h2 id="Elastic-Load-Balancing"><a href="#Elastic-Load-Balancing" class="headerlink" title="Elastic Load Balancing"></a>Elastic Load Balancing</h2><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-1.png" alt></p>
<p>Elastic Load Balancing(ELB, 이하 로드 밸런서)은 위에 그림에 <code>로드 밸런서</code>의 역할을 하는 AWS 서비스 이다. <code>클라이언트</code>의 요청을 직접 받고 그 요청을 <code>로드 밸런서</code>가 관리하고 있는 <code>서버</code>들에게 여러개의 요청을 골고루 전달해주는 역할을 한다. 단점으로는 AWS에서 로드 밸런서의 기능을 하는 서버를 내부적으로 관리해주기 때문에 우리가 직접 SSH로 접속할 수는 없다. </p>
<div class="note info no-icon">
            <p><code>로드 밸런서</code>가 받은 요청을 특정 <a href="https://jaehyun8719.github.io/2020/02/10/aws/ec2-setting/">인스턴스(EC2)</a>들 또는 <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/#Auto-Scaling">Auto-Scaling 그룹</a>으로 전달하여 설정할 수 있다.</p>
          </div>
<h2 id="대상-그룹"><a href="#대상-그룹" class="headerlink" title="대상 그룹"></a>대상 그룹</h2><p>대상 그룹(Target Group)은 로드 밸런서가 요청을 전달할 서버들을 묶어둔 개념적인 그룹이며, 이 대상 그룹 내에는 <a href="https://jaehyun8719.github.io/2020/02/10/aws/ec2-setting/">인스턴스(EC2)</a>나 <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/#Auto-Scaling">Auto-Scaling 그룹</a> 이 포할될 수 있다.</p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-2.png" alt></p>
<ol>
<li><code>대상 그룹 A</code>에는 EC2 인스턴스 2개</li>
<li><code>대상 그룹 B</code>에는 EC2 인스턴스 3개 그중에 EC2 인스턴스 2개는 Auto Scaling 그룹에 포함</li>
<li><code>대상 그룹 A</code> + <code>대상 그룹 B</code>에 총 EC2 인스턴스 5개 </li>
<li><code>로드 밸런서</code>에는 <code>대상 그룹 A, B</code>가 등록돼 있기 때문에 <code>클라이언트</code>가 <code>로드 밸런서</code>로 보낸 요청들을 5개의 EC2 인스턴스가 나눠서 처리한다.</li>
</ol>
<div class="note info no-icon">
            <p><code>로드 밸런서</code>에 직접 <code>EC2 인스턴스</code>나 <code>Auto Scaling 그룹</code>을 등록하지 않는 이유는 로드 밸런서는 요청한 포트에 따라 다양한 대상 그룹으로 요청을 전달 할 수 있다.<br>예를 들어 80번 443번 포트는 <code>대상 그룹 A</code>에 5000번 포트는 <code>대상 그룹 B</code>에 전달하여 설정 할 수 있기때문이다. </p>
          </div>
<h2 id="로드-밸런서의-상태-검사"><a href="#로드-밸런서의-상태-검사" class="headerlink" title="로드 밸런서의 상태 검사"></a>로드 밸런서의 상태 검사</h2><p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-3.png" alt></p>
<ol>
<li>정상적으로 동작하고 있는지 확인하기 위해 상태 검사(Health Check) 를 한다.</li>
<li>로드 밸런서는 자기가 관리하는 서버들에게 GET/health를 등록해두면 로드 밸런서는 주기적으로 요청을 보내서 상태 코드 200을 확인한다.</li>
<li>상태 코드의 주기 또는 비정상 코드를 몇번만에 응답을 해야 하는지도 설정 가능하다.</li>
</ol>
<h2 id="Auto-Scaling-그룹-대상-그룹-로드-밸런스-구성"><a href="#Auto-Scaling-그룹-대상-그룹-로드-밸런스-구성" class="headerlink" title="Auto Scaling 그룹, 대상 그룹, 로드 밸런스 구성"></a>Auto Scaling 그룹, 대상 그룹, 로드 밸런스 구성</h2><p>Auto Scaling 그룹을 이용한 실습이다. <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/">Auto-Scaling 그룹</a> 관련해서는 참고하길 바란다.</p>
<h3 id="로드-밸런서-생성"><a href="#로드-밸런서-생성" class="headerlink" title="로드 밸런서 생성"></a>로드 밸런서 생성</h3><p>EC2 서비스의 <code>로드 밸런싱</code> -&gt; <code>로드 밸런서</code> 메뉴 선택한 뒤 <code>로드 밸런서 생성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-4.png" alt></p>
<h3 id="로드-밸런서-유형-선택"><a href="#로드-밸런서-유형-선택" class="headerlink" title="로드 밸런서 유형 선택"></a>로드 밸런서 유형 선택</h3><p>일반적으로 HTTP, HTTPS 요청을 받으려고 하므로 <code>Applcation Load Balancer</code>에 <code>생성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-5.png" alt></p>
<h4 id="로드-밸런서-구성"><a href="#로드-밸런서-구성" class="headerlink" title="로드 밸런서 구성"></a>로드 밸런서 구성</h4><p>이름, 리스너, 가용영역 추가후 <code>다음:보안 설정 구성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-6.png" alt></p>
<h4 id="보안-설정-구성"><a href="#보안-설정-구성" class="headerlink" title="보안 설정 구성"></a>보안 설정 구성</h4><p>HTTPS 리스너를 추가하지 않아서 생기는 경고이므로 무시하고 <code>다음:보안 설정 구성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-7.png" alt></p>
<h4 id="보안-그룹-구성"><a href="#보안-그룹-구성" class="headerlink" title="보안 그룹 구성"></a>보안 그룹 구성</h4><p>실습 중에는 HTTP 80포트관련만 받을 것이다. 그러므로 미리 보안 그룹에서 생성한 web 관련 보안 그룹을 선택 후 <code>다음:라우팅 구성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-8.png" alt></p>
<h4 id="라우팅-등록"><a href="#라우팅-등록" class="headerlink" title="라우팅 등록"></a>라우팅 등록</h4><ol>
<li>대상 그룹이 없기 때문에 새 대상 그룹인 <code>exercise-target-group</code>생성</li>
<li>상태 검사는 모든 인스턴스 대상으로 <code>/health</code> 요청을 주기적으로 날리고 HTTP 상태코드 200을 응답하는지 확인하기 위해 추가</li>
<li><code>다음:상태 등로</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-9.png" alt></li>
</ol>
<h4 id="대상-그룹-1"><a href="#대상-그룹-1" class="headerlink" title="대상 그룹"></a>대상 그룹</h4><p>대상 그룹에 관리할 인스턴스를 추가할 수 있는 화면이며, <a href="https://jaehyun8719.github.io/2020/02/20/aws/auto-scaling/">Auto-Scaling 그룹</a>에서 생성된 인스턴스가 보일 것이다.<br>인스턴스를 직접 추가할 수 있지만 <code>Auto Scaling 그룹</code> 자체를 <code>대상 그룹</code>에 등록해서 새로운 인스턴스들이 실핼될 때마다 자동으로 <code>대상 그룹</code>에 등록되게 할 것이므로 <code>다음:검토</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-10.png" alt></p>
<h4 id="검토"><a href="#검토" class="headerlink" title="검토"></a>검토</h4><p>검토 화면에서 앞서 설정한 값이 정상인지 확인 뒤 <code>생성</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-11.png" alt></p>
<h3 id="로드-밸런서-생성-확인"><a href="#로드-밸런서-생성-확인" class="headerlink" title="로드 밸런서 생성 확인"></a>로드 밸런서 생성 확인</h3><p><code>로드 밸런싱</code> -&gt; <code>로드 밸런서</code> 방금 생성한 로그 밸런서 확인<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-12.png" alt></p>
<h3 id="Auto-Scaling-그룹에-대상-그룹-추가"><a href="#Auto-Scaling-그룹에-대상-그룹-추가" class="headerlink" title="Auto Scaling 그룹에 대상 그룹 추가"></a>Auto Scaling 그룹에 대상 그룹 추가</h3><p><code>Auto Scaling 그룹</code> -&gt; <code>세부 정보</code> 탭 -&gt; <code>편집</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-13.png" alt></p>
<p><code>대상 그룹(exercise-target-group)</code> 추가 -&gt; <code>저장</code> 버튼 클릭<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-14.png" alt></p>
<p><code>로드 밸런싱</code> -&gt; <code>대상 그룹</code> -&gt; <code>대상</code> 탭에서 대상 그룹에 Auto Scaling 그룹의 인스턴스가 대상에 등록된것을 확인<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-15.png" alt></p>
<h3 id="로드-밸런서-작동-확인"><a href="#로드-밸런서-작동-확인" class="headerlink" title="로드 밸런서 작동 확인"></a>로드 밸런서 작동 확인</h3><p><code>로드 밸런싱</code> -&gt; <code>로드밸런서</code> -&gt; <code>exercise-lb</code> 선택 -&gt; <code>DNS 이름</code> 복사 후 접속 확인<br><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-16.png" alt></p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-17.png" alt></p>
<div class="note info no-icon">
            <p>server name에 등록을 하지 않아서 애플리케이션에 접속 할 수 있는 이유는 요청 받았을 때 정확히 일치하는 서버가 없더라도 가장 근접한 서버를 찾아서 실행 해준다.</p>
          </div>
<h2 id="장애-조치-구성"><a href="#장애-조치-구성" class="headerlink" title="장애 조치 구성"></a>장애 조치 구성</h2><p>장애 조치란 2개의 시스템이 있을 경우 1개의 시스템에서 장애가 발생시 전체 시스템이 죽는게 아니라 다른 예비 시스템에 즉시 요청을 대신 처리하여 시스템에 문제가 생기지 않도록 하는 것이다. </p>
<h2 id="Auto-Scaling-그룹을-이용한-장애-조치"><a href="#Auto-Scaling-그룹을-이용한-장애-조치" class="headerlink" title="Auto Scaling 그룹을 이용한 장애 조치"></a>Auto Scaling 그룹을 이용한 장애 조치</h2><p>Auto Scaling 그룹과 로드 밸런서를 이용하면 장애 조치를 구현할 수 있는데, 로드 밸런서에서 관리하는 서버 인스턴스들의 상태를 계속해서 파악을 하고 로드 밸런서는 응답이 없는 해당 인스턴스에는 요청을 하지않는디. 결과적으로 클라이언트는 에러 응답을 받지않고 정상적인 응답만 받는다.</p>
<h2 id="Auto-Scaling-그룹과-로드-밸런서를-통한-장애-조치"><a href="#Auto-Scaling-그룹과-로드-밸런서를-통한-장애-조치" class="headerlink" title="Auto Scaling 그룹과 로드 밸런서를 통한 장애 조치"></a>Auto Scaling 그룹과 로드 밸런서를 통한 장애 조치</h2><p>여기서 2개의 서버로 서비스하다가 한 서버 장애가 나는 경우 로드 밸런서가 자동으로 정상적인 서버에만 요청하는지 확인한다.</p>
<h3 id="로드-밸런서-상태-검사-편집"><a href="#로드-밸런서-상태-검사-편집" class="headerlink" title="로드 밸런서 상태 검사 편집"></a>로드 밸런서 상태 검사 편집</h3><p><code>로드 밸런싱</code> -&gt; <code>대상 그룹</code> -&gt; <code>상태 검사</code> 탭 -&gt; <code>상태 검사 편집</code> 버튼 클릭</p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-18.png" alt></p>
<p>상태값 변경 후 <code>저장</code> 버튼 클릭</p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-19.png" alt></p>
<table>
<thead>
<tr>
<th>항목</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>경로</td>
<td>인스턴스가 정상인지 확인하기 위해 호출할 URL주소</td>
</tr>
<tr>
<td>정상 임계 값</td>
<td>연속으로 몇 번 정상 응답을 해야만 정상 상태로 볼 것인지 지정</td>
</tr>
<tr>
<td>비정상 임계 값</td>
<td>연속으로 몇 번 비정상 응답을 해야만 정상 상태로 볼 것인지 지정</td>
</tr>
<tr>
<td>제한 시간</td>
<td>타임아웃 시간으로 응답이 몇 초 이내로 오지 않을 경우 비정상 응답으로 판단할지 지정</td>
</tr>
<tr>
<td>간격</td>
<td>몇 초 간격으로 인스턴스의 상태를 물어볼지 지정하는 항목</td>
</tr>
<tr>
<td>성공 코드</td>
<td>어떤 HTTP 응답 코드를 줬을 경우 정상 상태로 판단할 것인지 지정</td>
</tr>
</tbody>
</table>
<h3 id="Auto-Scaling-원하는-용량-최소-그룹-크기-변경"><a href="#Auto-Scaling-원하는-용량-최소-그룹-크기-변경" class="headerlink" title="Auto Scaling 원하는 용량, 최소 그룹 크기 변경"></a>Auto Scaling 원하는 용량, 최소 그룹 크기 변경</h3><p><code>AUTO SCALING</code> -&gt; Auto Scaling 그룹 -&gt; <code>편집</code> 버튼 클릭</p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-20.png" alt></p>
<h3 id="인스턴스-확인"><a href="#인스턴스-확인" class="headerlink" title="인스턴스 확인"></a>인스턴스 확인</h3><p><code>Instance management</code> 탭 </p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-21.png" alt></p>
<h3 id="두-서버에-SSH-접속-후-실시간-로그-확인"><a href="#두-서버에-SSH-접속-후-실시간-로그-확인" class="headerlink" title="두 서버에 SSH 접속 후 실시간 로그 확인"></a>두 서버에 SSH 접속 후 실시간 로그 확인</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/nginx/logs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f access.log</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-22.png" alt></p>
<div class="note info no-icon">
            <p>Elastic Load Balancing 에서 200코드로 2개의 서버에 Health Check를 하고 있는것을 확인할 수 있다.</p>
          </div>
<h3 id="장애-발생-처리"><a href="#장애-발생-처리" class="headerlink" title="장애 발생 처리"></a>장애 발생 처리</h3><p>A 서버 종료 후 브라우저를 연속으로 새로고침 을 하면 처음에는 상태코드 502가 나오고 우리가 설정한 정상 임계값인 200이 아니므로 B 서버가 요청을 처리한다. </p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-23.png" alt></p>
<p><img src="/images/aws/elastic-load-balancing/elastic-load-balancing-24.png" alt></p>
<div class="note warning no-icon">
            <p>모든 실습이 완료되면 Auto Scaling 그룹에서 원하는 용량, 최소 그룹 크기, 최대 그룹 크기를 0으로 변경하여 인스턴스를 종료하자. </p>
          </div>
<h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>운영 중 Elastic Load Balancing으로 하나의 서버가 장애가 발생했을 경우 다른 서버에 분산할 수 있다는 것을 알았다. 하지만 Elastic Load Balancing만으로는 서버의 개수를 유동적으로 할 수 없다는 단점이 있는데, Auto Scaling 그룹으로 서버의 개수를 유동적으로 할 수 있다는 강점이 생긴다. 하나의 기능보다 AWS는 여러 가 기능을 결합하여 잘 사용하면 더 좋은 서비스를 구현할 수 있다고 생각을 한다.</p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://wikibook.co.kr/aws-infra/" rel="external nofollow noopener noreferrer" target="_blank">https://wikibook.co.kr/aws-infra/</a></li>
<li><a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/userguide/what-is-load-balancing.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/userguide/what-is-load-balancing.html</a></li>
</ul>
]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>AWS Elastic Load Balancing</tag>
      </tags>
  </entry>
  <entry>
    <title>프론트엔드 개발에 Node.js 가 필요한 이유</title>
    <url>/2020/05/21/nodejs/nodejs-npm/</url>
    <content><![CDATA[<hr>
<p>Node.js를 백엔드 구현체로 사용하지 않고, 프론트 엔드 개발을 할때 개발 환경에 대한 이해를 하기 위해 작성하였다.<br><a id="more"></a></p>
<h2 id="Node-js-설치"><a href="#Node-js-설치" class="headerlink" title="Node.js 설치"></a>Node.js 설치</h2><ol>
<li><a href="https://nodejs.org/ko/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/ko/</a> 사이트 가서 노드의 최신 버전을 다운로드</li>
</ol>
<p><img src="/images/nodejs/nodejs-npm/nodejs-npm-1.png" alt></p>
<div class="note info no-icon">
            <p>LTS 버젼은 안정적인 버젼으로 Java에서도 대부분 LTS 버젼을 많이 사용한다. (Current 버전은 최신 기술을 테스트할 때 개발 서버에서만 사용하길 권장한다.)</p>
          </div>
<ol start="2">
<li><p>설치는 <code>Next</code>버튼을 눌러 완료 하면 된다.</p>
</li>
<li><p>cmd 실행</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node</span><br><span class="line">Welcome to Node.js v12.16.3.</span><br><span class="line">Type <span class="string">".help"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt; 1 + 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>정수를 계산하면 입력된 결과 값이 나온다. 즉, 자바스크립의 코드를 입력하면 즉시 결과를 확인 할 수 있다.</p>
          </div>
<ol start="4">
<li>Node.js 버젼 확인<br>node 실행 창을 나오는 명령어는 <code>.exit</code>와 <code>ctrl + c</code>를 연속 두번 입력하면 된다.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">v12.16.3</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>NPM(Node Package Manage) 확인</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm</span><br><span class="line"></span><br><span class="line">Usage: npm &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    access, adduser, audit, bin, bugs, c, cache, ci, cit,</span><br><span class="line">    clean-install, clean-install-test, completion, config,</span><br><span class="line">    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,</span><br><span class="line">    edit, explore, fund, get, <span class="built_in">help</span>, <span class="built_in">help</span>-search, hook, i, init,</span><br><span class="line">    install, install-ci-test, install-test, it, link, list, ln,</span><br><span class="line">    login, <span class="built_in">logout</span>, ls, org, outdated, owner, pack, ping, prefix,</span><br><span class="line">    profile, prune, publish, rb, rebuild, repo, restart, root,</span><br><span class="line">    run, run-script, s, se, search, <span class="built_in">set</span>, shrinkwrap, star,</span><br><span class="line">    stars, start, stop, t, team, <span class="built_in">test</span>, token, tst, un,</span><br><span class="line">    uninstall, unpublish, unstar, up, update, v, version, view,</span><br><span class="line">    whoami</span><br><span class="line"></span><br><span class="line">npm &lt;<span class="built_in">command</span>&gt; -h  quick <span class="built_in">help</span> on &lt;<span class="built_in">command</span>&gt;</span><br><span class="line">npm -l            display full usage info</span><br><span class="line">npm <span class="built_in">help</span> &lt;term&gt;   search <span class="keyword">for</span> <span class="built_in">help</span> on &lt;term&gt;</span><br><span class="line">npm <span class="built_in">help</span> npm      involved overview</span><br><span class="line"></span><br><span class="line">Specify configs <span class="keyword">in</span> the ini-formatted file:</span><br><span class="line">    C:\Users\jaehy\.npmrc</span><br><span class="line">or on the <span class="built_in">command</span> line via: npm &lt;<span class="built_in">command</span>&gt; --key value</span><br><span class="line">Config info can be viewed via: npm <span class="built_in">help</span> config</span><br><span class="line"></span><br><span class="line">npm@6.13.2 C:\Users\jaehy\AppData\Roaming\npm\node_modules\npm</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>NPM 버젼 확인</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm --version</span><br><span class="line">6.13.2</span><br></pre></td></tr></table></figure>
<h2 id="프로젝트-초기화"><a href="#프로젝트-초기화" class="headerlink" title="프로젝트 초기화"></a>프로젝트 초기화</h2><p>외부 라이브러리를 다운로드하고 빌드 하는 등 명령어를 자동화하여 프로젝트를 관리하는 도구가 존재하는데, 예를 들어 자바의 Maven, Gradle이 있다.<br>NPM은 자바스크립트의 빌드 도구 이다.</p>
<h3 id="INIT"><a href="#INIT" class="headerlink" title="INIT"></a>INIT</h3><p>NPM에 <code>init</code> 명령을 사용하여 프로젝트를 생성(sample이라는 폴더를 생성하여 실행) 하면 <code>pacakge.json</code>파일이 생성 된다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (sample)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description:</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>:</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to E:\97.private_work\sample\package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"sample"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this OK? (yes)</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>npm init -y</code> 명령어를 사용하면 질문을 스킵하고 <code>package.json</code> 파일이 생성된다.</p>
          </div>
<h3 id="Package-json"><a href="#Package-json" class="headerlink" title="Package.json"></a>Package.json</h3><p>Node.js 는 Package.json 파일에 모든 프로젝트 정보를 기록한다.</p>
<table>
<thead>
<tr>
<th>정보명</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>프로젝트 이름</td>
</tr>
<tr>
<td>version</td>
<td>프로젝트 버전 정보</td>
</tr>
<tr>
<td>description</td>
<td>프로젝트 설명</td>
</tr>
<tr>
<td>main</td>
<td>노드 어플리케이션일 경우 진입점 경로</td>
</tr>
<tr>
<td>scripts</td>
<td>프로젝트 명령어를 등록</td>
</tr>
<tr>
<td>author</td>
<td>작성자</td>
</tr>
<tr>
<td>license</td>
<td>라이센스</td>
</tr>
</tbody>
</table>
<h2 id="프로젝트-명령어"><a href="#프로젝트-명령어" class="headerlink" title="프로젝트 명령어"></a>프로젝트 명령어</h2><p>package.json<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"sample"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>script 에 test 명령어 실행하면 <code>echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1</code> 출력 되는 것을 확인 할 수 있다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">&gt; sample@1.0.0 <span class="built_in">test</span> E:\97.private_work\sample</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">"Error: no test specified"</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"></span><br><span class="line"><span class="string">"Error: no test specified"</span></span><br><span class="line">npm ERR! Test failed.  See above <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure>
<p>NPM에서 사용할 수 있는 명령어가 있는데, 대부분 <code>start, test, install, uninstall</code>을 많이 사용 한다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm</span><br><span class="line"></span><br><span class="line">Usage: npm &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;<span class="built_in">command</span>&gt; is one of:</span><br><span class="line">    access, adduser, audit, bin, bugs, c, cache, ci, cit,</span><br><span class="line">    clean-install, clean-install-test, completion, config,</span><br><span class="line">    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,</span><br><span class="line">    edit, explore, fund, get, <span class="built_in">help</span>, <span class="built_in">help</span>-search, hook, i, init,</span><br><span class="line">    install, install-ci-test, install-test, it, link, list, ln,</span><br><span class="line">    login, <span class="built_in">logout</span>, ls, org, outdated, owner, pack, ping, prefix,</span><br><span class="line">    profile, prune, publish, rb, rebuild, repo, restart, root,</span><br><span class="line">    run, run-script, s, se, search, <span class="built_in">set</span>, shrinkwrap, star,</span><br><span class="line">    stars, start, stop, t, team, <span class="built_in">test</span>, token, tst, un,</span><br><span class="line">    uninstall, unpublish, unstar, up, update, v, version, view,</span><br><span class="line">    whoami</span><br></pre></td></tr></table></figure>
<p><code>package.json</code>에 커스텀으로 등록한 명령어 실행</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">	<span class="string">"bulid"</span> : <span class="string">"빌드 실행"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> npm run bulid</span><br><span class="line"></span><br><span class="line">&gt; sample@1.0.0 bulid E:\97.private_work\sample</span><br><span class="line">&gt; 빌드 실행</span><br></pre></td></tr></table></figure>
<h2 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h2><p><code>npm install</code> 명령어로 외부 패키지를 프로젝트 폴더에 다운로드하여 <code>package.json</code>에 정보를 기록한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install react</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.13.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>16.13.1</code> 버전을 설치</p>
<div class="note info no-icon">
            <p>^16.13.1<br>16은 Major Version으로 기존 Version 과 호환되지 않게 변경<br>13은 Minor Version으로 기존 Version 과 호환되면서 기능이 추가<br>1은 Patch Version으로 기존 버전과 호환되면서 버그를 수정</p>
          </div>    
<h2 id="버전의-범위"><a href="#버전의-범위" class="headerlink" title="버전의 범위"></a>버전의 범위</h2><h3 id="단순-버전-관리"><a href="#단순-버전-관리" class="headerlink" title="단순 버전 관리"></a>단순 버전 관리</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16.13.1</span><br></pre></td></tr></table></figure>
<h3 id="특정-버전보다-높거나-낮을-경우"><a href="#특정-버전보다-높거나-낮을-경우" class="headerlink" title="특정 버전보다 높거나 낮을 경우"></a>특정 버전보다 높거나 낮을 경우</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;16.13.1</span><br><span class="line">&gt;=16.13.1</span><br><span class="line">&lt;16.13.1</span><br><span class="line">&lt;=16.13.1</span><br></pre></td></tr></table></figure>
<h3 id="틸드-와-캐럿-을-이용해-범위"><a href="#틸드-와-캐럿-을-이용해-범위" class="headerlink" title="틸드(~)와 캐럿(^)을 이용해 범위"></a>틸드(~)와 캐럿(^)을 이용해 범위</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~16.13.1</span><br><span class="line">^16.13.1</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>~</code>는 Patch Version을 변경 즉, 16.13.1에서 1을 변경<br><code>^</code>은 Minor Version, Patch Version을 변경 즉, 16.13.1에서 13과 1을 변경</p>
          </div>    
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
</ul>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>node.js</tag>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Admin 설정</title>
    <url>/2019/06/20/springboot/admin/</url>
    <content><![CDATA[<hr>
<p>Spring Boot Admin은 Spring Boot에서 제공하는 Actuator endpoints를 이용해서 모니터링 할 수 있게 UI를 제공해주는 프로젝트이다. Spring Boot Admin을 사용 하기 위해서는 서버를 설정 해야된다.<br><a id="more"></a></p>
<h2 id="Spring-Boot-Admin"><a href="#Spring-Boot-Admin" class="headerlink" title="Spring Boot Admin"></a>Spring Boot Admin</h2><p><img src="/images/springboot/admin/admin_1.png" alt></p>
<h3 id="Spring-Boot-Admin-Maven-Dependency"><a href="#Spring-Boot-Admin-Maven-Dependency" class="headerlink" title="Spring Boot Admin Maven Dependency"></a>Spring Boot Admin Maven Dependency</h3><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="EnableAdminServer-추가"><a href="#EnableAdminServer-추가" class="headerlink" title="@EnableAdminServer 추가"></a>@EnableAdminServer 추가</h3><figure class="highlight java"><figcaption><span>AdminmonitorApplication</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminmonitorApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(AdminmonitorApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="실행-결과-로그"><a href="#실행-결과-로그" class="headerlink" title="실행 결과 로그"></a>실행 결과 로그</h3><p><img src="/images/springboot/admin/admin_2.png" alt></p>
<blockquote>
<p>실행 로그를 보면 actuator를 이용해서 endpoint를 확인 한다.</p>
</blockquote>
<h2 id="Spring-Boot-Client"><a href="#Spring-Boot-Client" class="headerlink" title="Spring Boot Client"></a>Spring Boot Client</h2><p><img src="/images/springboot/admin/admin_3.png" alt></p>
<h3 id="Spring-Boot-Client-Maven-Dependency"><a href="#Spring-Boot-Client-Maven-Dependency" class="headerlink" title="Spring Boot Client Maven Dependency"></a>Spring Boot Client Maven Dependency</h3><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="application-yaml-설정"><a href="#application-yaml-설정" class="headerlink" title="application.yaml 설정"></a>application.yaml 설정</h3><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">spring</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line"><span class="comment"># war 로 기동시 service-url 추가 해야줘됨.</span></span><br><span class="line">        <span class="attr">instance:</span></span><br><span class="line">          <span class="attr">service-url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">18080</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>spring.boot.admin.client.url</code>은 Spring Boot Admin 서버의 URL</li>
<li><code>management.endpoints.web.exposure.include</code>은 노출시킬 EndPoint 지정(*는 전체 노출)</li>
</ol>
<h3 id="localhost-8080-접속-화면"><a href="#localhost-8080-접속-화면" class="headerlink" title="localhost:8080 접속 화면"></a>localhost:8080 접속 화면</h3><p><img src="/images/springboot/admin/admin_4.png" alt><br><img src="/images/springboot/admin/admin_5.png" alt></p>
<h2 id="기타-설정-방법"><a href="#기타-설정-방법" class="headerlink" title="기타 설정 방법"></a>기타 설정 방법</h2><p><code>Spring Boot Admin</code>에서 제공하는 여러가지 기타 설정 방법을 설명한다.</p>
<h3 id="Logfile-Viewer"><a href="#Logfile-Viewer" class="headerlink" title="Logfile Viewer"></a>Logfile Viewer</h3><p><code>Spring Boot Admin</code>로그 파일은 End Point 에서 자동으로 접근 할 수 없다. 그래서 Spring Boot에 있는 로그 파일을 Actuator endpoints에 설정을 해줘야된다.</p>
<h4 id="logback-spring-xml-추가"><a href="#logback-spring-xml-추가" class="headerlink" title="logback-spring.xml 추가"></a>logback-spring.xml 추가</h4><p>Log 파일을 생성 하기 위해서 <code>/src/main/resource/logback-spring.xml</code>을 생성 <a href="https://jaehyun8719.github.io/2019/05/17/springboot/logback-spring/">Spring Logback 설명</a><br><figure class="highlight xml"><figcaption><span>logback-spring.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--로그 파일 저장 위치--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"C:/logs/logback/client.log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ROLLING-FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>10GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.actuator"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ref="appender name 지정" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="application-yaml-추가"><a href="#application-yaml-추가" class="headerlink" title="application.yaml 추가"></a>application.yaml 추가</h4><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span> <span class="string">C:/logs/logback/client.log</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">-%clr(%d&#123;yyyy-MM-dd</span> <span class="string">HH:mm:ss.SSS&#125;)&#123;faint&#125;</span> <span class="string">%clr(%5p)</span> <span class="string">%clr($&#123;PID&#125;)&#123;magenta&#125;</span> <span class="string">%clr(---)&#123;faint&#125;</span> <span class="string">%clr([%15.15t])&#123;faint&#125;</span> <span class="string">%clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125;</span> <span class="string">%clr(:)&#123;faint&#125;</span> <span class="string">%m%n%wEx</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>logging.file</code>은 <code>Spring Boot Admin</code>에서 읽을 log파일 위치 설정</li>
<li><code>logging.pattern.file</code>은 로그 패턴에 색깔을 넣는다.</li>
</ol>
<h4 id="Spring-Boot-Admin-Logfile-Viewer-확인"><a href="#Spring-Boot-Admin-Logfile-Viewer-확인" class="headerlink" title="Spring Boot Admin Logfile Viewer 확인"></a>Spring Boot Admin Logfile Viewer 확인</h4><p>실시간으로 저장<code>(C:/logs/logback/client.log)</code>되는 로그를 확인 할 수 있다.<br><img src="/images/springboot/admin/admin_5.png" alt></p>
<h3 id="EndPoint-Customizing"><a href="#EndPoint-Customizing" class="headerlink" title="EndPoint Customizing"></a>EndPoint Customizing</h3><p><code>application.yaml</code>에 추가<br><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>management.endpoints.web.exposure.include</code> 추가 할 EndPoint 설정<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html" rel="external nofollow noopener noreferrer" target="_blank">EndPoint 관련 참조</a></li>
</ol>
<h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p><code>Spring Boot Admin</code>은 기본적으로 로그인/로그아웃 기능을 제공하지 않지만, Spring-Security를 이용해서 로그인/로그아웃 기능을 만들 수 있다.</p>
<h4 id="Spring-Boot-Admin-1"><a href="#Spring-Boot-Admin-1" class="headerlink" title="Spring Boot Admin"></a>Spring Boot Admin</h4><ol>
<li><p><code>Spring Security</code> Maven Dependency</p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>/src/main/SecuritySecureConfig.java 파일 추가</p>
<figure class="highlight java"><figcaption><span>SecuritySecureConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecuritySecureConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AdminServerProperties adminServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminServer = adminServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        successHandler.setTargetUrlParameter(<span class="string">"redirectTo"</span>);</span><br><span class="line">        successHandler.setDefaultTargetUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">"/"</span>));</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            .antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">"/assets/**"</span>)).permitAll() <span class="comment">// &lt;1&gt;</span></span><br><span class="line">            .antMatchers(<span class="keyword">this</span>.adminServer.path(<span class="string">"/login"</span>)).permitAll()</span><br><span class="line">            .anyRequest().authenticated() <span class="comment">// &lt;2&gt;</span></span><br><span class="line">            .and()</span><br><span class="line">        .formLogin().loginPage(<span class="keyword">this</span>.adminServer.path(<span class="string">"/login"</span>)).successHandler(successHandler).and() <span class="comment">// &lt;3&gt;</span></span><br><span class="line">        .logout().logoutUrl(<span class="keyword">this</span>.adminServer.path(<span class="string">"/logout"</span>)).and()</span><br><span class="line">        .httpBasic().and() <span class="comment">// &lt;4&gt;</span></span><br><span class="line">        .csrf()</span><br><span class="line">            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()) <span class="comment">// &lt;5&gt;</span></span><br><span class="line">            .ignoringAntMatchers(</span><br><span class="line">                <span class="keyword">this</span>.adminServer.path(<span class="string">"/instances"</span>), <span class="comment">// &lt;6&gt;</span></span><br><span class="line">                <span class="keyword">this</span>.adminServer.path(<span class="string">"/actuator/**"</span>) <span class="comment">// &lt;7&gt;</span></span><br><span class="line">            );</span><br><span class="line">        <span class="comment">// @formatter:on</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::configuration-spring-security[]</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<ol>
<li>모든 로그인 페이지에 대한 권한을 부여한다.</li>
<li>권한이 부여되지 않으면 인증을 요청 한다.</li>
<li>로그인 및 로그 아웃을 구성한다.</li>
<li>Spring Boot Admin 클라이언트를 등록하기 위해 HTTP-Basic 지원을 사용한다. </li>
<li>쿠키를 사용하여 CSRF 보호 기능 구현</li>
<li>CRSF를 비활성화한다.</li>
<li>actuator EndPoint 대한 CRSF 보호를 비활성화한다.</li>
</ol>
</blockquote>
<ol start="3">
<li>application.yaml 추가<figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">jaehyun</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Spring-Boot-Client-1"><a href="#Spring-Boot-Client-1" class="headerlink" title="Spring Boot Client"></a>Spring Boot Client</h4><ol>
<li><p><code>Spring Security</code> Maven Dependency</p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Spring Boot Client</code>에서 Security 전체 허용 추가<br><code>/src/main/SecurityPermitAllConfig.java</code> 생성</p>
<figure class="highlight java"><figcaption><span>SecurityPermitAllConfig.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityPermitAllConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().anyRequest().permitAll()</span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yaml 추가</p>
<figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">jaehyun</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">        <span class="attr">instance:</span></span><br><span class="line">          <span class="attr">metadata:</span></span><br><span class="line">            <span class="attr">user.name:</span> <span class="string">jaehyun</span></span><br><span class="line">            <span class="attr">user.password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Security-실행-화면-http-localhost-8080"><a href="#Security-실행-화면-http-localhost-8080" class="headerlink" title="Security 실행 화면(http://localhost:8080)"></a>Security 실행 화면(<a href="http://localhost:8080" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080</a>)</h4><p>jaehyun/1234 입력 후 접속<br><img src="/images/springboot/admin/admin_7.png" alt><br><img src="/images/springboot/admin/admin_8.png" alt><br><img src="/images/springboot/admin/admin_9.png" alt></p>
<h2 id="Spring-Boot-Amdin-소스코드"><a href="#Spring-Boot-Amdin-소스코드" class="headerlink" title="Spring Boot Amdin 소스코드"></a>Spring Boot Amdin 소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/adminmonitor" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="Spring-Boot-Client-소스코드"><a href="#Spring-Boot-Client-소스코드" class="headerlink" title="Spring Boot Client 소스코드"></a>Spring Boot Client 소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/actuator" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8</a></li>
<li><a href="http://codecentric.github.io/spring-boot-admin/current/" rel="external nofollow noopener noreferrer" target="_blank">http://codecentric.github.io/spring-boot-admin/current/</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring Boot Admin</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA - 엔티티 매핑(Entity Mapping)</title>
    <url>/2022/05/23/jpa/entity-mapping/</url>
    <content><![CDATA[<hr>
<p>JPA 엔티티 맵핑(Entity Mapping) 란?</p>
<ul>
<li>객체와 테이블 매핑: @Entity, @Table</li>
<li>필드와 컬럼 매핑: @Column</li>
<li>기본 키 매핑: @Id</li>
<li>연관관계 매핑: @ManyToOne, @JoinColumn<a id="more"></a>
</li>
</ul>
<h2 id="객체와-테이블-매핑"><a href="#객체와-테이블-매핑" class="headerlink" title="객체와 테이블 매핑"></a>객체와 테이블 매핑</h2><h3 id="Entity"><a href="#Entity" class="headerlink" title="@Entity"></a>@Entity</h3><ul>
<li><code>@Entity</code>가 붙은 클래스는 JPA가 관리</li>
<li>JPA를 사용해서 테이블과 매핑할 클래스는 `@Entity 필수</li>
<li>주의<ul>
<li>기본 생성자 필수(파라미터가 없는 public 또는 protected 생성자)</li>
<li>final 클래스, enum, interface, inner 클래스 사용할 수 없음</li>
<li>저장할 필드에 fianl 사용할 수 없음</li>
</ul>
</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h3><p><code>@Table</code>은 엔티티와 맵핑할 테이블 지정</p>
<table>
<thead>
<tr>
<th>속성</th>
<th>가능</th>
<th>기본값</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>매핑할 테이블 이름</td>
<td>엔티티 이름을 사용</td>
</tr>
<tr>
<td>catalog</td>
<td>데이터베이스 catalog 매핑</td>
<td></td>
</tr>
<tr>
<td>schema</td>
<td>데이터베이스 schema 매핑</td>
<td></td>
</tr>
<tr>
<td>uniqueConstraints(DDL)</td>
<td>DDL 생성 시에 유티크 제약 조건 생성</td>
<td><br></td>
</tr>
</tbody>
</table>
<figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=<span class="meta-string">"MemeberName"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="데이터베이스-스키마-자동-생성"><a href="#데이터베이스-스키마-자동-생성" class="headerlink" title="데이터베이스 스키마 자동 생성"></a>데이터베이스 스키마 자동 생성</h2><p>DDL을 애플리케이션 실행 시점에 자동 생성(DDL 관련은 개발서버에서만 사용)</p>
<p><code>hibernate.hbm2ddl.auto</code> 옵션 속성 값</p>
<table>
<thead>
<tr>
<th>속성</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>create</td>
<td>기존테이블 삭제 후 다시 생성(DROP + CREATE)</td>
</tr>
<tr>
<td>create-drop</td>
<td>create와 같으나 종료시점에 테이블 DROP</td>
</tr>
<tr>
<td>update</td>
<td>변경분만 반영(운영DB에는 사용하면 안됨)</td>
</tr>
<tr>
<td>validate</td>
<td>엔티티와 테이블이 정상 매핑되었는지만 확인</td>
</tr>
<tr>
<td>none</td>
<td>사용하지 않음</td>
</tr>
</tbody>
</table>
<p>ex) create 속성<br><figure class="highlight kotlin"><figcaption><span>createOptionResult</span></figcaption><table><tr><td class="code"><pre><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    drop table Member <span class="keyword">if</span> exists</span><br><span class="line">Hibernate: </span><br><span class="line">    </span><br><span class="line">    create table Member (</span><br><span class="line">       id bigint not <span class="literal">null</span>,</span><br><span class="line">        name varchar(<span class="number">255</span>),</span><br><span class="line">        primary key (id)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p>
<h2 id="필드와-컬럼매핑"><a href="#필드와-컬럼매핑" class="headerlink" title="필드와 컬럼매핑"></a>필드와 컬럼매핑</h2><table>
<thead>
<tr>
<th>어노테이션</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>@Column</td>
<td>컬럼 매핑</td>
</tr>
<tr>
<td>@Temporal</td>
<td>날짜 타입 매핑</td>
</tr>
<tr>
<td>@Enumerated</td>
<td>enum 타입 매핑</td>
</tr>
<tr>
<td>@Lob</td>
<td>BLOB, CLOB 매핑</td>
</tr>
<tr>
<td>@Transient</td>
<td>특정 필드를 컬럼에서 제외</td>
</tr>
</tbody>
</table>
<figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"name"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="keyword">var</span> roleType: RoleType? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createDate: LocalDate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lastModifiedDate: LocalDate? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Lob</span></span><br><span class="line">    <span class="keyword">var</span> description: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">var</span> temp: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="code"><pre><span class="line">create table Member (</span><br><span class="line">    id bigint not <span class="literal">null</span>,</span><br><span class="line">    age integer not <span class="literal">null</span>,</span><br><span class="line">    createDate timestamp,</span><br><span class="line">    description clob,</span><br><span class="line">    lastModifiedDate timestamp,</span><br><span class="line">    roleType varchar(<span class="number">255</span>),</span><br><span class="line">    name varchar(<span class="number">255</span>),</span><br><span class="line">    primary key (id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h3><table>
<thead>
<tr>
<th>속성</th>
<th>설명</th>
<th>기본값</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>필드와 매핑할 테이블의 컬럼 이름</td>
<td>객체의 필드 이름</td>
</tr>
<tr>
<td>insert<br>update</td>
<td>등록, 변경 가능 여부</td>
<td>true</td>
</tr>
<tr>
<td>nullable(DDL)</td>
<td>null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약조건을 걸떄 사용한다</td>
<td></td>
</tr>
<tr>
<td>unique(DDL)</td>
<td>@Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약조건을 걸 떄 사용한다</td>
<td></td>
</tr>
<tr>
<td>columnDefinition(DDL)</td>
<td>데이터베이스 컬럼 정보를 직접 줄 수 있다. ex)varchar(100) default ‘EMPTY’</td>
<td>필드의 자바 타입과 방언 정보를 사용</td>
</tr>
<tr>
<td>length(DDL)</td>
<td>문자 길이 제약조건, String 타입에만 사용한다.</td>
<td>255</td>
</tr>
<tr>
<td>precision<br>scale(DDL)</td>
<td>BigDecimal 타입에서 사용한다(BigInteger도 사용할 수 있다).<br>precision은 소수점을 포함한 전체 자릿수, scale은 소수의 자릿수다. 참고로 double, float 타입에는 적용되지 않는다. 아주 큰 숫자나 정 밀한 소수를 다루어야 할 때만 사용한다.</td>
<td>precision=19<br>scale=2</td>
</tr>
</tbody>
</table>
<h3 id="Enumerated"><a href="#Enumerated" class="headerlink" title="@Enumerated"></a>@Enumerated</h3><p>enum Type을 매핑 할때 사용</p>
<div class="note danger no-icon">
            <p>ORINAL은 사용하지 말것</p>
          </div>
<table>
<thead>
<tr>
<th>속성</th>
<th>설명</th>
<th>기본값</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>EnumType.ORDINAL은 enum 순서를 데이터베이스에 저장<br>EnumType.STRING은 enum 이름을 데이터 베이스에 저장</td>
<td>EnumType.ORDINAL</td>
</tr>
</tbody>
</table>
<h2 id="기본-키-매핑"><a href="#기본-키-매핑" class="headerlink" title="기본 키 매핑"></a>기본 키 매핑</h2><ul>
<li>직접 할당: <code>@id</code> 만 사용</li>
<li>자동 생성: <code>@GeneratedValue</code><ul>
<li>IDENTITY, SEQUENCE, TABLE, AUTO</li>
</ul>
</li>
</ul>
<h3 id="IDENTITY-전략"><a href="#IDENTITY-전략" class="headerlink" title="IDENTITY 전략"></a>IDENTITY 전략</h3><p>기본 키 생성을 DB에 위임<br>IDENTITY 전략은 <code>em.persist()</code> 시점에 즉시 INSERT SQL 실행 하고 DB에서 식별자를 조회</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line"><span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<h3 id="SEQUENCE-전략"><a href="#SEQUENCE-전략" class="headerlink" title="SEQUENCE 전략"></a>SEQUENCE 전략</h3><p>DB 시퀀스는 유일한 값을 순서대로 생성하는 특별한 DB 오브젝트</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@SequenceGenerator(</span></span><br><span class="line"><span class="meta">        name = “MEMBER_SEQ_GENERATOR<span class="meta-string">",</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">        sequenceName = “MEMBER_SEQ"</span>, //매핑할 데이터베이스 시퀀스 이름</span></span><br><span class="line"><span class="meta">        initialValue = 1, allocationSize = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>)</span></span><br><span class="line">  <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>속성</th>
<th>설명</th>
<th>기본값</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>식별자 생성기 이름</td>
<td>필수</td>
</tr>
<tr>
<td>sequenceName</td>
<td>데이터베이스에 등록되어 있는 시퀀스 이름</td>
<td>hibernate_sequence</td>
</tr>
<tr>
<td>initialValue</td>
<td>DDL 생성 시에만 사용됨, 시퀀스 DDL을 생성할 때 처음 1 시작하는 수를 지정한다.</td>
<td>1</td>
</tr>
<tr>
<td>allocationSize</td>
<td>시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨 데이터베이스 시퀀스 값이 하나씩 증가하도록 설정되어 있으면 이 값 을 반드시 1로 설정해야 한다</td>
<td>50</td>
</tr>
<tr>
<td>catalog, schema</td>
<td>데이터베이스 catalog, schema 이름</td>
<td>50</td>
</tr>
</tbody>
</table>
<h3 id="TABLE-전략"><a href="#TABLE-전략" class="headerlink" title="TABLE 전략"></a>TABLE 전략</h3><p>키 생성 전용 테이블을 하나 만들어서 DB 시퀀스를 흉내내는 전략</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> MY_SEQUENCES (</span><br><span class="line">    sequence_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    next_val <span class="built_in">bigint</span>,</span><br><span class="line">    primary <span class="keyword">key</span> ( sequence_name )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@TableGenerator(</span></span><br><span class="line"><span class="meta">        name = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>,</span></span><br><span class="line"><span class="meta">        table = <span class="meta-string">"MY_SEQUENCES"</span>,</span></span><br><span class="line"><span class="meta">        pkColumnValue = <span class="meta-string">"MEMBER_SEQ"</span>, allocationSize = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue(strategy = GenerationType.TABLE, generator = <span class="meta-string">"MEMBER_SEQ_GENERATOR"</span>)</span></span><br><span class="line">  <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>속성</th>
<th>설명</th>
<th>기본값</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>식별자 생성기 이름</td>
<td>필수</td>
</tr>
<tr>
<td>table</td>
<td>키생성 테이블명</td>
<td>hibernate_sequence</td>
</tr>
<tr>
<td>pkColumnName</td>
<td>시퀀스 컬럼명</td>
<td>sequence_name</td>
</tr>
<tr>
<td>valueColumnNa</td>
<td>시퀀스 값 컬럼명</td>
<td>next_val</td>
</tr>
<tr>
<td>pkColumnValue</td>
<td>키로 사용할 값 이름</td>
<td>엔티티 이름</td>
</tr>
<tr>
<td>initialValue</td>
<td>초기 값, 마지막으로 생성된 값이 기준이다.</td>
<td>0</td>
</tr>
<tr>
<td>allocationSize</td>
<td>시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨)</td>
<td>50</td>
</tr>
<tr>
<td>catalog, schema</td>
<td>데이터베이스 catalog, schema 이름</td>
<td></td>
</tr>
<tr>
<td>uniqueConstraint s(DDL)</td>
<td>유니크 제약 조건을 지정할 수 있다.</td>
<td><br></td>
</tr>
</tbody>
</table>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li>
</ul>
]]></content>
      <categories>
        <category>JPA</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>Entity</tag>
        <tag>Entity Mapping</tag>
        <tag>엔티티 맵핑</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA - 연관관계 매핑(Realation Mapping)</title>
    <url>/2022/05/28/jpa/relation-mapping/</url>
    <content><![CDATA[<hr>
<ul>
<li>방향(Direction): 단방향, 양방향</li>
<li>연관관계의 주인(Owner): 객체 양방향 연관관계는 관리 주인이 필요<a id="more"></a>
</li>
</ul>
<h2 id="단방향-연관관계"><a href="#단방향-연관관계" class="headerlink" title="단방향 연관관계"></a>단방향 연관관계</h2><p><img src="/images/jpa/relation-mapping/relation-mapping1.png" width="50%"></p>
<p>DB 기준에서 <code>Member</code>와 <code>Team</code>관계는 <code>다대일(N:1)</code>이다.  </p>
<figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> userName: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findTeam = findMember.team</span><br><span class="line">        <span class="keyword">if</span> (findTeam != <span class="literal">null</span>) &#123;</span><br><span class="line">            println(<span class="string">"findTeam = "</span> + findTeam.name)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="code"><pre><span class="line">findTeam = TeamA</span><br></pre></td></tr></table></figure>
<ol>
<li><code>다대일(N:1)</code>관계 이므로 <code>@ManyToOne</code> 사용</li>
<li>객체관계여서 <code>Team</code>에 아이디 Join을 하기 위한 <code>@JoinColumn(name = &quot;TEAM_ID&quot;)</code> 사용</li>
<li>find를 이용해서 Member에 있는 Team 객체를 이용할 수 있다.</li>
</ol>
<h2 id="양방향-연관관계와-연관관계의-주인"><a href="#양방향-연관관계와-연관관계의-주인" class="headerlink" title="양방향 연관관계와 연관관계의 주인"></a>양방향 연관관계와 연관관계의 주인</h2><p><img src="/images/jpa/relation-mapping/relation-mapping2.png" width="50%"></p>
<figure class="highlight kotlin"><figcaption><span>Team.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Team</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = arrayListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>단방향과 같으나 <code>members</code>객체를 추가</p>
<figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> emf = Persistence.createEntityManagerFactory(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="keyword">val</span> em = emf.createEntityManager()</span><br><span class="line">    <span class="keyword">val</span> tx = em.transaction</span><br><span class="line"></span><br><span class="line">    tx.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 저장</span></span><br><span class="line">        <span class="keyword">var</span> team = Team()</span><br><span class="line">        team.name = <span class="string">"TeamA"</span></span><br><span class="line">        em.persist(team)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> member = Member()</span><br><span class="line">        member.username = <span class="string">"member1"</span></span><br><span class="line">        member.team = team</span><br><span class="line">        em.persist(member)</span><br><span class="line"></span><br><span class="line">        em.flush()</span><br><span class="line">        em.clear()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> findMember = em.find(Member::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">member.id)</span></span></span><br><span class="line">        <span class="keyword">val</span> members = findMember.team?.members</span><br><span class="line"></span><br><span class="line">        members?.forEach &#123;</span><br><span class="line">            println(<span class="string">"member = "</span> + it.username)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx.commit()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        tx.rollback()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        em.close();</span><br><span class="line">        emf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>result</span></figcaption><table><tr><td class="code"><pre><span class="line">member = member1</span><br></pre></td></tr></table></figure>
<ul>
<li>양방향 객체 연관관계는 <code>회원 -&gt; 팀</code> 연관관계 1개(단방향), <code>팀 -&gt; 회원</code> 1개(단방향)서로 다른 방향으로 각각 1개씩 해서 2개(양방향)이라고 생각해야된다.</li>
<li>테이블 연관관계는 PK, FK로 JOIN 을 해서 <code>회원, 팀</code>을 서로 알 수 있다.</li>
</ul>
<h3 id="연관관계의-주인-Owner"><a href="#연관관계의-주인-Owner" class="headerlink" title="연관관계의 주인(Owner)"></a>연관관계의 주인(Owner)</h3><ul>
<li>객체의 두 관계중 하나를 연관관계의 주인으로 지정(외래 키가 있는 곳을 주인으로 지정)</li>
<li>연관관계의 주인만이 외래 키를 관리(등록, 수정)</li>
<li>주인이 아닌 쪽은 읽기만 가능</li>
<li>주인은 <code>mappedBy</code> 속성 사용 안함</li>
<li>주인이 아니면 <code>mappedBy</code> 속성으로 주인 지정</li>
</ul>
<h2 id="양방향-매핑시-주의점"><a href="#양방향-매핑시-주의점" class="headerlink" title="양방향 매핑시 주의점"></a>양방향 매핑시 주의점</h2><h3 id="연관관계-주인에-값을-입력-하지-않음"><a href="#연관관계-주인에-값을-입력-하지-않음" class="headerlink" title="연관관계 주인에 값을 입력 하지 않음"></a>연관관계 주인에 값을 입력 하지 않음</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">team.members.add(member)</span><br><span class="line">em.persist(team)</span><br></pre></td></tr></table></figure>
<p><img src="/images/jpa/relation-mapping/relation-mapping3.png" width="30%"></p>
<ul>
<li><code>Member</code>테이블을 보면 <code>TEAM_ID</code>컬럼 값이 null 값인걸 확인 할 수 있다. 그 이유는 위에서 설정한<code>(@OneToMany(mappedBy = &quot;team&quot;))</code> 연관관계의 주인이 <code>team</code> 이므로 아래의 코드와 같이 주인을 먼저 insert 쿼리를 실행 해야된다. (mappedBy 설정한 부분은 읽기 전용) </li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure>
<p><img src="/images/jpa/relation-mapping/relation-mapping4.png" width="30%"></p>
<h3 id="순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음"><a href="#순수한-객체-관계를-고려하면-양쪽에-값을-입력하는-것이-좋음" class="headerlink" title="순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음"></a>순수한 객체 관계를 고려하면 양쪽에 값을 입력하는 것이 좋음</h3><p>team.members 입력하면 영속상태(1차캐시)이므로 바로 조회해서 사용 할 수 있다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.team = team</span><br><span class="line">em.persist(member)</span><br><span class="line"></span><br><span class="line">team.members.add(member)</span><br></pre></td></tr></table></figure>
<h3 id="연관관계-편의-메소드를-생성"><a href="#연관관계-편의-메소드를-생성" class="headerlink" title="연관관계 편의 메소드를 생성"></a>연관관계 편의 메소드를 생성</h3><p>양쪽에 값을 입력 하다보면 실수를 할 수 있으니, 주인에 값을 입력할때 같이 입력 할 수 있는 함수(편의 메소드)를 생성</p>
<figure class="highlight kotlin"><figcaption><span>Member.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"MEMBER_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"USERNAME"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> username: String? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"TEAM_ID"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 편의 메소드 생성</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">changeTeam</span><span class="params">(team: <span class="type">Team</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.team = team;</span><br><span class="line">        team.members.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>JpaMain.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> team = Team()</span><br><span class="line">team.name = <span class="string">"TeamA"</span></span><br><span class="line">em.persist(team)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> member = Member()</span><br><span class="line">member.username = <span class="string">"member1"</span></span><br><span class="line">member.changeTeam(team) <span class="comment">// 편의 메소드 추가</span></span><br><span class="line">em.persist(member)</span><br></pre></td></tr></table></figure>
<h3 id="양방향-매핑시에-무한-루프-조심"><a href="#양방향-매핑시에-무한-루프-조심" class="headerlink" title="양방향 매핑시에 무한 루프 조심"></a>양방향 매핑시에 무한 루프 조심</h3><ul>
<li>toString, JSON 생성 라이브러리 사용시 반복적으로 객체 를 호출 하면서 무한 루프에 빠지게 된다.</li>
<li>JSON 생성 라이브러리 사용시 Entity 를 반환하지 말고 DTO로 변환해서 반환을 해야 된다.</li>
</ul>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-jpa-study" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/ORM-JPA-Basic" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/ORM-JPA-Basic</a></li>
</ul>
]]></content>
      <categories>
        <category>JPA</category>
      </categories>
      <tags>
        <tag>JPA</tag>
        <tag>Realation</tag>
        <tag>Realation Mapping</tag>
        <tag>연관관계 맵핑</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Mybatis 설정</title>
    <url>/2019/06/15/springboot/mybatis/</url>
    <content><![CDATA[<hr>
<p>Spring Boot Mybatis 구성 및 설정에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/springboot/mybatis/mybatis_1.png" alt></p>
<h2 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h2><p><code>mybatis-spring-boot-starter</code> 추가<br><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Spring Boot Mybatis 모듈을 사용하려면 <code>mybatis-spring-boot-autoconfigure</code> 필요하다. <code>mybatis-spring-boot-autoconfigure</code>는 <code>mybatis-spring-boot-starter</code>에 종속 되어있는걸 확인 할 수 있다.<br><figure class="highlight xml"><figcaption><span>mybatis-spring-boot-starter\pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Spring-Boot-Mybatis-구조"><a href="#Spring-Boot-Mybatis-구조" class="headerlink" title="Spring Boot Mybatis 구조"></a>Spring Boot Mybatis 구조</h2><h3 id="inmemory-db-H2-Maven-Dependency"><a href="#inmemory-db-H2-Maven-Dependency" class="headerlink" title="inmemory db(H2) Maven Dependency"></a>inmemory db(H2) Maven Dependency</h3><p>mybatis를 이용하기 위해서 Inmemory DB(H2)를 애플리케이션이 동작하면 구성 되도록 설정했다. 개인 DB가 설정 되어있다면 inmemory db(H2) Maven Dependency는 제외 해도 된다.</p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>스프링 부트는 <code>schema.sql</code>및 <code>data.sql</code>에서 각각 SQL을 자동 로드 한다.<br><figure class="highlight sql"><figcaption><span>schema.sql</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">integer</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    full_name <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight sql"><figcaption><span>data.sql</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> (<span class="keyword">id</span>, full_name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'jaehyun'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> (<span class="keyword">id</span>, full_name) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'jinsil'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">USER</span> (<span class="keyword">id</span>, full_name) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'nada'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h3><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:testdb</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:h2:~/test</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">lazyLoadingEnabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">aggressiveLazyLoading:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">mapUnderscoreToCamelCase:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>Mybatis 자동설정에 대한 구조 확인<br><img src="/images/springboot/mybatis/mybatis_2.png" alt><br><figure class="highlight"><figcaption><span>spring-configuration-metadata.json</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"sourceType"</span>: <span class="string">"org.mybatis.spring.boot.autoconfigure.MybatisProperties"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"mybatis.mapper-locations"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Locations of MyBatis mapper files."</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"java.lang.String[]"</span></span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>위와 같이 mybatis 설정은 <code>name</code>에 자동 설정 되어 있는 것을 확인할 수 있다.</p>
<h2 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h2><figure class="highlight java"><figcaption><span>User.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Builder</span> <span class="meta">@AllArgsConstructor</span> <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(of = <span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String nameName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p>Spring Boot Mybatis는 기본적으로 <code>@Mapper</code> 주석으로 표시된 매퍼를 검색 한다.</p>
<figure class="highlight java"><figcaption><span>UserMapper.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getUserInfo</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><figcaption><span>UserMapper.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"me.mybatis.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserInfo"</span> <span class="attr">resultType</span>=<span class="string">"me.mybatis.User"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            ID</span><br><span class="line">            , FULL_NAME</span><br><span class="line">        FROM</span><br><span class="line">            USER</span><br><span class="line">        WHERE</span><br><span class="line">            ID = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><figcaption><span>UserService.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserInfo</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.getUserInfo(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><figcaption><span>UserController.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 사용자 정보 조회</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getUserInfo</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userService.getUserInfo(id);</span><br><span class="line">        log.debug(<span class="string">"users &#123;&#125;"</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="결과-화면"><a href="#결과-화면" class="headerlink" title="결과 화면"></a>결과 화면</h2><p><img src="/images/springboot/mybatis/mybatis_3.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/mybatis" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" rel="external nofollow noopener noreferrer" target="_blank">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-initialize-a-database-using-spring-jdbc" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-initialize-a-database-using-spring-jdbc</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
        <tag>Spring Boot Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 자동 설정</title>
    <url>/2019/05/28/springboot/auto-configuration/</url>
    <content><![CDATA[<hr>
<p>Spring Boot에서 <code>@SpringBootApplication</code>가 사용되는 방법과 자동 설정에 대해서 설명하고, 자동 설정 구현을 통해서 <code>@EnableAutoConfiguration</code>가 어떤 방식으로 이용되는지 설명한다.<br><a id="more"></a></p>
<h2 id="자동-설정-설명"><a href="#자동-설정-설명" class="headerlink" title="자동 설정 설명"></a>자동 설정 설명</h2><p><code>Bean</code>은 2단계로 등록된다. <code>@ComponentScan</code>으로 등록된 후 추가적으로 <code>@EnableAutoConfiguration</code>으로 등록한다.<br><figure class="highlight java"><figcaption><span>autoApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">autoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(autoApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>@SpringBootApplication</code>에 상속되어있는 어노테이션에 대해서 확인<br><figure class="highlight java"><figcaption><span>SpringBootApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">		<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>여기서 중요한 <code>@SpringBootConfiguration</code>, <code>@ComponentScan</code>, <code>@EnableAutoConfiguration</code>에 대해서 설명 한다.</p>
<ol>
<li><code>@SpringBootConfiguration</code>에 상속된 <code>@Configuration</code>는 Java Configure 설정 파일로 간주하여 <code>Bean</code>으로 등록한다. 즉, Spring Boot에서 사용되는 설정 파일 이다.</li>
<li><code>@ComponentScan</code>는 Component 가진 하위 패키지 클래스들을 <code>Bean</code>으로 등록한다.</li>
<li><code>@EnableAutoConfiguration</code>은 애플리케이션에 추가된 설정들을 자동으로 <code>Bean</code>으로 등록한다.<blockquote>
<p><img src="/images/springboot/auto-configuration/auto_1.png" alt><br><code>spring.factories</code>를 확인해보면<br><img src="/images/springboot/auto-configuration/auto_2.png" alt><br><code>EnableAutoConfiguration</code>키값 밑에 설정된 클래스들은 autoConfiguration 대상이 되는 된다. 대부분의 클래스는 <code>@Configuration</code>을 가지고 있으나, <code>@ConditionalOnXxxYyyZzz</code>가 있으면 조건에 따라서 다르게 등록된다. <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-condition-annotations" rel="external nofollow noopener noreferrer" target="_blank">(Spring Boot Reference Condition Annotations 참조)</a></p>
</blockquote>
</li>
</ol>
<h2 id="자동-설정-구현"><a href="#자동-설정-구현" class="headerlink" title="자동 설정 구현"></a>자동 설정 구현</h2><p>Spring Boot에서 자동 설정을 실제로 구현해보는 예제이다. 여기서 필요한 모듈은 2가지 이다. <code>1.자동 설정 모듈</code>과 <code>2.의존성을 주입한 모듈</code>이다.</p>
<h3 id="자동-설정-모듈"><a href="#자동-설정-모듈" class="headerlink" title="자동 설정 모듈"></a>자동 설정 모듈</h3><ol>
<li><p><strong>모듈 구조</strong><br><img src="/images/springboot/auto-configuration/auto_3.png" alt></p>
</li>
<li><p><strong>pom.xml 에 의존성 추가</strong></p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Truthman 클래스 생성</strong></p>
<figure class="highlight java"><figcaption><span>Truthman.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Truthman</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> howLong;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Properties 정의</strong><br>의존성 주입대상인 <code>application.yaml</code>에서 <code>truthman</code>접두사로 정의한 값을 이용 </p>
<figure class="highlight java"><figcaption><span>TruthmanProperties.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"truthman"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TruthmanProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> howLong;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Configuration 정의</strong><br><code>TruthmanProperties</code>에 값을 받아서 <code>Truthman</code> 인스턴스 생성 후 주입한다.<br><code>@ConditionalOnMissingBean</code>은 의존성을 주입할 대상에서 같은이름(<code>truthman</code>) <code>Bean</code>이 존재하지 않을 때 <code>Bean</code>을 생성한다.</p>
<figure class="highlight java"><figcaption><span>TruthConfiguration.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(TruthmanProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TruthConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Truthman <span class="title">truthman</span><span class="params">(TruthmanProperties truthmanProperties)</span> </span>&#123;</span><br><span class="line">        Truthman truthman = <span class="keyword">new</span> Truthman();</span><br><span class="line">        truthman.setName(truthmanProperties.getName());</span><br><span class="line">        truthman.setHowLong(truthmanProperties.getHowLong());</span><br><span class="line">        <span class="keyword">return</span> truthman;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>resources\META-INF\spring.factories 생성</strong><br><code>@EnableAutoConfiguration</code>으로 <code>Bean</code>으로 등록</p>
<figure class="highlight xml"><figcaption><span>spring.factories</span></figcaption><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  me.auto.TruthConfiguration</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>mvn install</strong></p>
</li>
</ol>
<h3 id="의존성을-주입한-모듈"><a href="#의존성을-주입한-모듈" class="headerlink" title="의존성을 주입한 모듈"></a>의존성을 주입한 모듈</h3><p><code>자동 설정 모듈</code>의 의존성을 주입한다.</p>
<ol>
<li><p><strong>모듈 구조</strong><br><img src="/images/springboot/auto-configuration/auto_4.png" alt></p>
</li>
<li><p><strong>pom.xml에 등록(자동 설정 모듈 install)</strong></p>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.auto<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auto-configuration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>resources/application.yaml</strong><br>Spring Boot 버젼 2.1.x 이상부터 Bean 오버라이딩(<code>@ConditionalOnMissingBean</code>) 기능 이용 시 <code>spring:main:allow-bean-definition-overriding: true</code>를 추가해야 된다.</p>
<figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">truthman:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jaehyun22</span></span><br><span class="line">  <span class="attr">how-long:</span> <span class="number">33</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>StarterRunner 생성</strong></p>
<figure class="highlight java"><figcaption><span>StarterRunner.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarterRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Truthman truthman;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(truthman);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>실행 결과</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Truthman(name=jaehyun22, howLong=<span class="number">33</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><ol>
<li><p><strong>자동 설정 모듈</strong><br><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/auto-configuration" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
</li>
<li><p><strong>의존성을 주입한 모듈</strong><br><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/starter" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
</li>
</ol>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-developing-auto-configuration" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-developing-auto-configuration</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-condition-annotations" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-condition-annotations</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
        <tag>Auto Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Logback 설정</title>
    <url>/2019/05/17/springboot/logback-spring/</url>
    <content><![CDATA[<hr>
<p>Spring Boot에서 Logback 이용해서 logging 설정하는 방법에 대해서 설명한다.<br>여기서 <code>application.yml</code> 을 이용한 설정방법은 설명 하지 않고, 기본 Logback을 확장해서 <code>logback-spring.xml</code> 을 이용한 방법에대해서 설명한다. </p>
<blockquote>
<p>Logback 에 기본 설명은 하지 않는다. 기본설명에 대해서는 <a href="https://jaehyun8719.github.io/2019/05/15/utils/logback/">Logback 설정</a> 을 참고 하길 바란다.<br><a id="more"></a></p>
</blockquote>
<h2 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h2><p><code>spring-boot-starter-web</code> 만 추가해주면 된다.<br><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>logback-classic</code> 이 종속되어있다.</p>
<p><img src="/images/springboot/logback/spring_logback1.png" alt></p>
<h2 id="Spring-Boot-logback-기본-구조"><a href="#Spring-Boot-logback-기본-구조" class="headerlink" title="Spring Boot logback 기본 구조"></a>Spring Boot logback 기본 구조</h2><p>logback-spring.xml 생성</p>
<figure class="highlight xml"><figcaption><span>logback-spring.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>org/springframework/boot/logging/logback/base.xml 경로를 따라가면 base.xml 에 포함된 코드를 확인해볼수 있다.</p>
<blockquote>
<p>Spring Boot 에서 기본 으로 제공하는 logback 설정</p>
</blockquote>
<p><img src="/images/springboot/logback/spring_logback2.png" alt></p>
<ol>
<li><code>base.xml</code>은 Spring Boot 에서 제공하는 기본 logback 설정 파일</li>
<li><code>console-appender.xml</code>은 console에 대한 appender 파일</li>
<li><code>file-appender.xml</code>은 file에 대한 appnder 파일</li>
<li><code>default.xml</code>은 property, logger 관련 파일</li>
</ol>
<div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">base.xml</a></li><li class="tab"><a href="#first-unique-name-2">console-appender.xml</a></li><li class="tab"><a href="#first-unique-name-3">file-appender.xml</a></li><li class="tab"><a href="#first-unique-name-4">default.xml</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><figure class="highlight xml"><figcaption><span>base.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">“org/springframework/boot/logging/logback/defaults.xml”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“LOG_FILE”</span> <span class="attr">value</span>=<span class="string">“$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/spring.log&#125;”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">“org/springframework/boot/logging/logback/console-appender.xml”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">“org/springframework/boot/logging/logback/file-appender.xml”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">“INFO”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">“CONSOLE”</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">“FILE”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-unique-name-2"><figure class="highlight xml"><figcaption><span>console-appender.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">“CONSOLE”</span> <span class="attr">class</span>=<span class="string">“ch.qos.logback.core.ConsoleAppender”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-unique-name-3"><figure class="highlight xml"><figcaption><span>file-appender.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">“FILE”</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">“ch.qos.logback.core.rolling.RollingFileAppender”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">“ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy”</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;LOG_FILE_MAX_SIZE:-10MB&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;LOG_FILE_MAX_HISTORY:-0&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="first-unique-name-4"><figure class="highlight xml"><figcaption><span>file-default.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">“clr”</span> <span class="attr">converterClass</span>=<span class="string">“org.springframework.boot.logging.logback.ColorConverter”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">“wex”</span> <span class="attr">converterClass</span>=<span class="string">“org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">“wEx”</span> <span class="attr">converterClass</span>=<span class="string">“org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter”</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“CONSOLE_LOG_PATTERN”</span> <span class="attr">value</span>=<span class="string">“$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(—)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“FILE_LOG_PATTERN”</span> <span class="attr">value</span>=<span class="string">“$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; — [%t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;”</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.apache.catalina.startup.DigesterFactory”</span> <span class="attr">level</span>=<span class="string">“ERROR”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.apache.catalina.util.LifecycleBase”</span> <span class="attr">level</span>=<span class="string">“ERROR”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.apache.coyote.http11.Http11NioProtocol”</span> <span class="attr">level</span>=<span class="string">“WARN”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.apache.sshd.common.util.SecurityUtils”</span> <span class="attr">level</span>=<span class="string">“WARN”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.apache.tomcat.util.net.NioSelectorPool”</span> <span class="attr">level</span>=<span class="string">“WARN”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.eclipse.jetty.util.component.AbstractLifeCycle”</span> <span class="attr">level</span>=<span class="string">“ERROR”</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">“org.hibernate.validator.internal.util.Version”</span> <span class="attr">level</span>=<span class="string">“WARN”</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>
<p>LogbackApplication.java 생성 후 실행<br><figure class="highlight java"><figcaption><span>LogbackApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbackApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger  = LoggerFactory.getLogger(LogbackApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(LogbackApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"Sping boot Logback &#123;&#125;"</span>, LogbackApplication<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면</p>
<p><img src="/images/springboot/logback/spring_logback3.png" alt></p>
<h2 id="Logback-확장-기능"><a href="#Logback-확장-기능" class="headerlink" title="Logback 확장 기능"></a>Logback 확장 기능</h2><h3 id="springProfile-소개"><a href="#springProfile-소개" class="headerlink" title="springProfile 소개"></a>springProfile 소개</h3><p>springProfile을 이용해서 애플리케이션 배포할 서버마다 로그 단계랑 파일 저장설정에 대해서 설정을 할 수 있다.<br>이 기능을 하용하려면 logback-spring.xml.을 사용해야된다.</p>
<blockquote>
<p>개발, 운영 2가지 상태가 있다고 가정을 하였다.</p>
</blockquote>
<h3 id="application-profile-yaml-생성"><a href="#application-profile-yaml-생성" class="headerlink" title="application-{profile}.yaml 생성"></a>application-{profile}.yaml 생성</h3><ul>
<li>application-dev.yaml 개발 환경 파일</li>
<li>application-prod.yaml 운영 환경 파일</li>
</ul>
<p><img src="/images/springboot/logback/spring_logback4.png" alt></p>
<h3 id="logback-spring-xml-생성"><a href="#logback-spring-xml-생성" class="headerlink" title="logback-spring.xml 생성"></a>logback-spring.xml 생성</h3><figure class="highlight xml"><figcaption><span>logback-spring.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--로그 파일 저장 위치--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"C:/logs/logback/logback.log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE_PROD"</span> <span class="attr">value</span>=<span class="string">"C:/logs/logback/logback-prod.log"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ROLLING-FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>10<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>10GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- ref="appender name 지정" --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ROLLING-FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE_PROD&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE_PROD&#125;.%d&#123;yyyy-MM-dd&#125;-prod<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h3><p>환경 설정에 따라 springProfile에 active 할 name을 지정해서 애플리케이션을 실행시키면 각 설정한 환경에 따라 log를 확인 할수있다.</p>
<ul>
<li><code>&lt;springProfile name = &quot;dev&quot;&gt;</code> 적용된 개발에 VM option 으로 <code>-Dspring.profiles.active=dev</code> 실행</li>
</ul>
<p><img src="/images/springboot/logback/spring_logback5.png" alt></p>
<blockquote>
<p>로그 3번째 Activated activeProfiles dev 활성화 확인</p>
</blockquote>
<ul>
<li><code>&lt;springProfile name = &quot;prod&quot;&gt;</code> 적용된 운영에 VM option 으로 <code>-Dspring.profiles.active=prod</code> 실행</li>
</ul>
<p><img src="/images/springboot/logback/spring_logback6.png" alt></p>
<blockquote>
<p>로그 3번째 Activated activeProfiles prod 활성화 확인</p>
</blockquote>
<p>생성된 파일 확인</p>
<p><img src="/images/springboot/logback/spring_logback7.png" alt></p>
<p>실제 로그파일 저장위치를 <code>&lt;property name=&quot;LOG_FILE&quot;&gt;</code> 과 <code>&lt;property name=&quot;LOG_FILE_PROD&quot;&gt;</code> 로 설정했는데, 실제 서버 운영에는 각 저장소가 다르기때문에 같은 name으로 해도된다. 로컬에서 파일이름을 다르게 생성하기 위해서 설정한것이다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/logback" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/reference/htmlsingle/#_profile_specific_configuration" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/reference/htmlsingle/#_profile_specific_configuration</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 내장 웹 서버</title>
    <url>/2019/06/06/springboot/web-server/</url>
    <content><![CDATA[<hr>
<p>Spring Boot 웹 응용 프로그램은 내장 웹 서버를 포함한다. 여기서 임베디드 서버 구성 및 변경하는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h1 id="내장-웹-서버-이해"><a href="#내장-웹-서버-이해" class="headerlink" title="내장 웹 서버 이해"></a>내장 웹 서버 이해</h1><p>Spring Boot에 <code>spring-boot-autoconfigure</code>자동 설정 확인<br><img src="/images/springboot/web-server/web-server_1.png" alt></p>
<p><code>spring.factories</code> 에 <code>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</code>자동 설정이 되어 있는걸 확인 할 수 있다.<br><figure class="highlight xml"><figcaption><span>spring.factories</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p><code>ServletWebServerFactoryAutoConfiguration.java</code>에서 <code>EmbeddedTomcat</code>, <code>EmbeddedJetty</code>, <code>EmbeddedUndertow</code>의 자동 설정부분이 Import 되어 있어서 내장 웹 서버가 자동으로 구동 된다.<br><figure class="highlight java"><figcaption><span>ServletWebServerFactoryAutoConfiguration.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedTomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedJetty</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedUndertow</span>.<span class="title">class</span> &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="다른-서블릿-컨테이너-사용하기"><a href="#다른-서블릿-컨테이너-사용하기" class="headerlink" title="다른 서블릿 컨테이너 사용하기"></a>다른 서블릿 컨테이너 사용하기</h1><p>Spring Boot는 기본 서블릿 컨테이너가 <code>Tomcat</code>이다. 이를 변경하기 위해서는 <code>Tomcat</code>의 종속성을 제거하고, 원하는 서블릿 컨테이너(<code>Netty</code>, <code>Undertow</code>) 추가해주면 된다.</p>
<h2 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h2><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Undertow의존성-확인"><a href="#Undertow의존성-확인" class="headerlink" title="Undertow의존성 확인"></a><code>Undertow</code>의존성 확인</h2><p><img src="/images/springboot/web-server/web-server_2.png" alt></p>
<h2 id="Unsertow동작-확인"><a href="#Unsertow동작-확인" class="headerlink" title="Unsertow동작 확인"></a><code>Unsertow</code>동작 확인</h2><p><img src="/images/springboot/web-server/web-server_3.png" alt></p>
<h1 id="웹-서버-비활성화"><a href="#웹-서버-비활성화" class="headerlink" title="웹 서버 비활성화"></a>웹 서버 비활성화</h1><p>Spring Boot 서블릿 컨테이너가 의존성 주입이 되어 있는데 동작을 하지 않게 하는 방법이다.<br><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">web-application-type:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure></p>
<h1 id="포트-변경"><a href="#포트-변경" class="headerlink" title="포트 변경"></a>포트 변경</h1><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8443</span></span><br></pre></td></tr></table></figure>
<h1 id="랜덤-포트-변경"><a href="#랜덤-포트-변경" class="headerlink" title="랜덤 포트 변경"></a>랜덤 포트 변경</h1><p>사용하지 않는 포트를 찾아 포트 변경<br><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<h1 id="웹-서버-기동시-port-포트-확인"><a href="#웹-서버-기동시-port-포트-확인" class="headerlink" title="웹 서버 기동시 port 포트 확인"></a>웹 서버 기동시 port 포트 확인</h1><p>웹 서버가 생성이 되면 <code>ApplicationListener&lt;ServletWebServerInitializedEvent&gt;</code>가 호출이 된다.  <code>getApplicationContext</code> 인스턴스를 생성 후 포트 정보를 확인하면 된다.<br><figure class="highlight java"><figcaption><span>ApplicationListener.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PortListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ServletWebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ServletWebServerInitializedEvent servletWebServerInitializedEvent)</span> </span>&#123;</span><br><span class="line">        ServletWebServerApplicationContext applicationContext = servletWebServerInitializedEvent.getApplicationContext();</span><br><span class="line">        System.out.println(applicationContext.getWebServer().getPort());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>동작 확인<br><img src="/images/springboot/web-server/web-server_4.png" alt></p>
<h1 id="ssl-적용"><a href="#ssl-적용" class="headerlink" title="ssl 적용"></a>ssl 적용</h1><p>ssl 적용하기 위해서는 keystore를 생성해야 된다.</p>
<h2 id="keystore-생성"><a href="#keystore-생성" class="headerlink" title="keystore 생성"></a>keystore 생성</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ keytool -genkey -<span class="built_in">alias</span> tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 4000</span><br><span class="line">Enter keystore password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">What is your first and last name?</span><br><span class="line">  [Unknown]:  jaehyun</span><br><span class="line">What is the name of your organizational unit?</span><br><span class="line">  [Unknown]:  it</span><br><span class="line">What is the name of your organization?</span><br><span class="line">  [Unknown]:  it</span><br><span class="line">What is the name of your City or Locality?</span><br><span class="line">  [Unknown]:  seoul</span><br><span class="line">What is the name of your State or Province?</span><br><span class="line">  [Unknown]:  sangbong</span><br><span class="line">What is the two-letter country code <span class="keyword">for</span> this unit?</span><br><span class="line">  [Unknown]:  100</span><br><span class="line">Is CN=jaehyun, OU=it, O=it, L=seoul, ST=sangbong, C=100 correct?</span><br><span class="line">  [no]:  y</span><br></pre></td></tr></table></figure>
<h2 id="keystore-생성-확인"><a href="#keystore-생성-확인" class="headerlink" title="keystore 생성 확인"></a>keystore 생성 확인</h2><p><img src="/images/springboot/web-server/web-server_5.png" alt></p>
<h2 id="application-yaml을-이용해서-SSL-등록-정보를-설정"><a href="#application-yaml을-이용해서-SSL-등록-정보를-설정" class="headerlink" title="application.yaml을 이용해서 SSL 등록 정보를 설정"></a>application.yaml을 이용해서 SSL 등록 정보를 설정</h2><h3 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h3><figure class="highlight yaml"><figcaption><span>application.yaml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ssl:</span></span><br><span class="line">    <span class="attr">key-store:</span> <span class="string">web-server/keystore.p12</span></span><br><span class="line">    <span class="attr">key-store-type:</span> <span class="string">PKCS12</span></span><br><span class="line">    <span class="attr">key-store-password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">key-alias:</span> <span class="string">spring</span></span><br></pre></td></tr></table></figure>
<h3 id="ssl-확인"><a href="#ssl-확인" class="headerlink" title="ssl 확인"></a>ssl 확인</h3><p><img src="/images/springboot/web-server/web-server_6.png" alt></p>
<h1 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h1><p><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/web-server" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h1 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h1><ul>
<li><a href="https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8</a></li>
<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-web-servers.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
        <tag>Spring Boot WebServer</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot REST Docs</title>
    <url>/2019/05/29/springboot/restdocs/</url>
    <content><![CDATA[<hr>
<p>Spring REST Docs는 RESTful 서비스를 정확하고 읽기 편하게 문서화하는 것을 돕는 것이다. 테스트 기반의 접근법은 서비스에 대한 문서화의 정확도를 보장해주고, 테스트가 실패할 경우 문서화가 되지 않는다.<br><a id="more"></a></p>
<h2 id="REST-Docs-장점"><a href="#REST-Docs-장점" class="headerlink" title="REST Docs 장점"></a>REST Docs 장점</h2><ol>
<li>curl 과 http request snippets이 생성된다.</li>
<li>snippets 정보를 쉽게 추가 할 수 있다.</li>
<li>프로젝트 jar파일에 문서를 쉽게 패키지 할 수 있다.</li>
<li>JSON 과 XML 을 지원한다.</li>
<li>비지니스 로직과 일치한 API 문서</li>
</ol>
<h2 id="구조"><a href="#구조" class="headerlink" title="구조"></a>구조</h2><p><img src="/images/springboot/restdocs/restdocs_1.png" alt></p>
<h2 id="빌드-설정-Bulid-Configuration"><a href="#빌드-설정-Bulid-Configuration" class="headerlink" title="빌드 설정(Bulid Configuration)"></a>빌드 설정(Bulid Configuration)</h2><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-hateoas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.restdocs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-restdocs-mockmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.asciidoctor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asciidoctor-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>generate-docs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span> <span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>process-asciidoc<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">backend</span>&gt;</span>html<span class="tag">&lt;/<span class="name">backend</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">doctype</span>&gt;</span>book<span class="tag">&lt;/<span class="name">doctype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> <span class="comment">&lt;!-- 4 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.restdocs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-restdocs-asciidoctor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-restdocs.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>spring-restdocs-mockmvc</code>의 test범위에 의존성 추가</li>
<li>Asciidoctor 플러그인 추가</li>
<li><code>prepare-package</code>사용하면 문서가 패키지에 포함될 수 있다.</li>
<li>spring-restdocs-asciidoctorAsciidoctor 플러그인의 의존성 추가. 이렇게하면 파일 snippets에 사용할 속성 <code>.adoc</code>을 가리 키도록 자동으로 구성 된다. <code>target/generated-snippets</code> 또한 <code>operation</code> 블록 매크로 를 사용할 수 있다.</li>
</ol>
<h2 id="User-REST-API-추가-me-restdocs-users-패키지-생성"><a href="#User-REST-API-추가-me-restdocs-users-패키지-생성" class="headerlink" title="User REST API 추가(me.restdocs.users 패키지 생성)"></a>User REST API 추가(me.restdocs.users 패키지 생성)</h2><h3 id="User-추가"><a href="#User-추가" class="headerlink" title="User 추가"></a>User 추가</h3><figure class="highlight java"><figcaption><span>User.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Builder</span> <span class="meta">@AllArgsConstructor</span> <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@EqualsAndHashCode</span>(of = <span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="UserResource-추가"><a href="#UserResource-추가" class="headerlink" title="UserResource 추가"></a>UserResource 추가</h3><p>Spring HATEOAS를 사용해서 <code>self-description</code>하게 적용한다.(<a href="https://docs.spring.io/spring-hateoas/docs/0.25.1.RELEASE/reference/html/" rel="external nofollow noopener noreferrer" target="_blank">Spring HATEOS 참조</a>)<br><figure class="highlight java"><figcaption><span>UserResource.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserResource</span> <span class="keyword">extends</span> <span class="title">Resource</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserResource</span><span class="params">(User user, Link... links)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(user, links);</span><br><span class="line">        add(linkTo(UserController<span class="class">.<span class="keyword">class</span>).<span class="title">slash</span>(<span class="title">user</span>.<span class="title">getId</span>()).<span class="title">withSelfRel</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="UserController-추가"><a href="#UserController-추가" class="headerlink" title="UserController 추가"></a>UserController 추가</h3><figure class="highlight java"><figcaption><span>UserController.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api/users"</span>, produces = MediaTypes.HAL_JSON_UTF8_VALUE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">getUser</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        User user = User.builder()</span><br><span class="line">                .id(id)</span><br><span class="line">                .email(id + <span class="string">"@mail.com"</span>)</span><br><span class="line">                .address(<span class="string">"Seoul"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        UserResource userResource = <span class="keyword">new</span> UserResource(user);</span><br><span class="line">        userResource.add(<span class="keyword">new</span> Link(<span class="string">"docs/index.html#resources-user-get"</span>).withRel(<span class="string">"profile"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userResource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="API-호출-결과-화면"><a href="#API-호출-결과-화면" class="headerlink" title="API 호출 결과 화면"></a>API 호출 결과 화면</h3><p><img src="/images/springboot/restdocs/restdocs_2.png" alt></p>
<h2 id="문서-패키징-Packaging-the-documentation"><a href="#문서-패키징-Packaging-the-documentation" class="headerlink" title="문서 패키징(Packaging the documentation)"></a>문서 패키징(Packaging the documentation)</h2><p>생성된 문서를 프로젝트의 jar 파일에 패키지화 할 수 있다.<br><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span> <span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span> <span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.outputDirectory&#125;/static/docs<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/generated-docs<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ol>
<li>Maven Resources 플러그인 추가</li>
<li>생성 된 문서를 static/docs jar 파일에 포함될 빌드 출력 디렉토리로 복사</li>
</ol>
<h2 id="테스트-설정-Test-Configuration"><a href="#테스트-설정-Test-Configuration" class="headerlink" title="테스트 설정(Test Configuration)"></a>테스트 설정(Test Configuration)</h2><h3 id="Test-Class에-AutoConfigureRestDocs와-AutoConfigureMockMvc-추가"><a href="#Test-Class에-AutoConfigureRestDocs와-AutoConfigureMockMvc-추가" class="headerlink" title="Test Class에 @AutoConfigureRestDocs와 @AutoConfigureMockMvc 추가"></a>Test Class에 <code>@AutoConfigureRestDocs</code>와 <code>@AutoConfigureMockMvc</code> 추가</h3><figure class="highlight java"><figcaption><span>UserControllerTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span> // 1</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureRestDocs</span> // 2</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getApi</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String id = <span class="string">"jaehyun"</span>;</span><br><span class="line"></span><br><span class="line">        mockMvc.perform(get(<span class="string">"/api/users/&#123;id&#125;"</span>, id)</span><br><span class="line">                    .contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">                .andDo(print())</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"email"</span>).value(<span class="string">"jaehyun@mail.com"</span>))</span><br><span class="line">                .andExpect(jsonPath(<span class="string">"address"</span>).value(<span class="string">"Seoul"</span>))</span><br><span class="line">                .andDo(document(<span class="string">"users-get"</span>, <span class="comment">// 3</span></span><br><span class="line">                        links(</span><br><span class="line">                                linkWithRel(<span class="string">"self"</span>).description(<span class="string">"link to self"</span>)</span><br><span class="line">                                , linkWithRel(<span class="string">"profile"</span>).description(<span class="string">"link to profile"</span>)</span><br><span class="line">                        ),</span><br><span class="line">                        responseHeaders(</span><br><span class="line">                                headerWithName(HttpHeaders.CONTENT_TYPE).description(<span class="string">"content type header"</span>)</span><br><span class="line">                        ),</span><br><span class="line">                        responseFields(</span><br><span class="line">                                fieldWithPath(<span class="string">"id"</span>).description(<span class="string">"사용자 아이디"</span>)</span><br><span class="line">                                , fieldWithPath(<span class="string">"email"</span>).description(<span class="string">"사용자 이메일"</span>)</span><br><span class="line">                                , fieldWithPath(<span class="string">"address"</span>).description(<span class="string">"사용자 주소"</span>)</span><br><span class="line">                                , fieldWithPath(<span class="string">"_links.self.href"</span>).description(<span class="string">"link to self"</span>)</span><br><span class="line">                                , fieldWithPath(<span class="string">"_links.profile.href"</span>).description(<span class="string">"link to self profile"</span>)</span><br><span class="line">                        )</span><br><span class="line">                ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>@AutoConfigureMockMvc</code>는 MockMvc로 Test하기</li>
<li><code>@AutoConfigureRestDocs</code>는 Spring REST Doc의 자동 설정을 사용</li>
<li><code>users-get</code> 으로 snippet 생성하여 응답 링크 생성<br><img src="/images/springboot/restdocs/restdocs_3.png" alt></li>
<li>추가 사용방법</li>
</ol>
<ul>
<li>requestParameters() + parameterWithName()</li>
<li>pathParameters() + parametersWithName()</li>
<li>requestParts() + partWithname()</li>
<li>equestPartBody()</li>
<li>requestPartFields()</li>
<li>requestHeaders() + headerWithName()</li>
<li>requestFields() + fieldWithPath()</li>
<li>responseHeaders() + headerWithName()</li>
<li>responseFields() + fieldWithPath()</li>
</ul>
<h3 id="opertarion-index-adoc-파일에-추가"><a href="#opertarion-index-adoc-파일에-추가" class="headerlink" title="opertarion index.adoc 파일에 추가"></a>opertarion index.adoc 파일에 추가</h3><p>bulid 한 Rest docs snippet을 <code>operation</code> 명령어로 연동하기 위해서는 <code>src/main/asciidoc/index.adoc</code> 파일에 추가<br><figure class="highlight java"><figcaption><span>index.adoc</span></figcaption><table><tr><td class="code"><pre><span class="line">[[resources-user-get]]</span><br><span class="line">== 사용자 조회</span><br><span class="line"></span><br><span class="line">사용자 리소스는 사용자를 만들거나 조회할 때 사용한다.</span><br><span class="line"></span><br><span class="line">operation::users-get[snippets=<span class="string">'response-fields,curl-request,http-response'</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="실행-방법"><a href="#실행-방법" class="headerlink" title="실행 방법"></a>실행 방법</h3><ol>
<li>mvn package</li>
<li><a href="http://localhost:8080/docs/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/docs/index.html</a> 접속</li>
</ol>
<h3 id="결과-화면"><a href="#결과-화면" class="headerlink" title="결과 화면"></a>결과 화면</h3><p><img src="/images/springboot/restdocs/restdocs_4.png" alt></p>
<h2 id="Customizing-requests-and-responses"><a href="#Customizing-requests-and-responses" class="headerlink" title="Customizing requests and responses"></a>Customizing requests and responses</h2><p>요청이나 응답에 대한 json 형식으로 pretty 하게 출력</p>
<h3 id="전처리기-설정"><a href="#전처리기-설정" class="headerlink" title="전처리기 설정"></a>전처리기 설정</h3><p>@TestConfiguration 테스트에서만 작동하는 설정 어노테이션 추가 하고, 전처리기 설정을 withRequestDefaults(prettyPrint()), withResponseDefaults(prettyPrint());로 오버라이딩<br><figure class="highlight java"><figcaption><span>RestDocsConfiguration.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestDocsConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestDocsMockMvcConfigurationCustomizer <span class="title">restDocsMockMvcConfigurationCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configurer -&gt; configurer.operationPreprocessors()</span><br><span class="line">                .withRequestDefaults(prettyPrint())</span><br><span class="line">                .withResponseDefaults(prettyPrint());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Import-RestDocsConfiguration-class-를-이용해서-RestDocsConfiguration-class-추가"><a href="#Import-RestDocsConfiguration-class-를-이용해서-RestDocsConfiguration-class-추가" class="headerlink" title="@Import(RestDocsConfiguration.class) 를 이용해서 RestDocsConfiguration.class 추가"></a>@Import(RestDocsConfiguration.class) 를 이용해서 RestDocsConfiguration.class 추가</h3><figure class="highlight java"><figcaption><span>UserControllerTest.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureRestDocs</span></span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(<span class="title">RestDocsConfiguration</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="결과-화면-1"><a href="#결과-화면-1" class="headerlink" title="결과 화면"></a>결과 화면</h3><p><img src="/images/springboot/restdocs/restdocs_5.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-unity/tree/master/restdocs" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/spring_rest-api" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/spring_rest-api</a></li>
<li><a href="https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/#documenting-your-api-customizing-snippets" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-restdocs/docs/2.0.2.RELEASE/reference/html5/#documenting-your-api-customizing-snippets</a></li>
<li><a href="https://www.baeldung.com/spring-rest-docs" rel="external nofollow noopener noreferrer" target="_blank">https://www.baeldung.com/spring-rest-docs</a></li>
<li><a href="https://docs.spring.io/spring-hateoas/docs/0.25.1.RELEASE/reference/html/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-hateoas/docs/0.25.1.RELEASE/reference/html/</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Java</tag>
        <tag>Rest Docs</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot with React 설정</title>
    <url>/2019/09/25/springboot/with-react/</url>
    <content><![CDATA[<hr>
<p>Spring Boot(BackEnd) + React(FrontEnd) 통합 설정에 대해서 설명한다. (자세한 명령어에 대해서는 설명을 안한다.)<br>BackEnd, FrontEnd를 분리해서 적용하는 것을 추천하지만 통합할 때 장점과 단점에 대해서 확인하기 위해서 작성하였다.<br><a id="more"></a></p>
<h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul>
<li>Rest Repositories</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>H2</li>
<li>Java 11</li>
<li>Lombok</li>
</ul>
<h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/springboot/with-react/1.png" alt></p>
<h2 id="도메인-선언"><a href="#도메인-선언" class="headerlink" title="도메인 선언"></a>도메인 선언</h2><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/Employee.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span> <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String firstName, String lastName, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Entity</code>는 관계형 테이블에 클래스를 저장하기위한 주석이다.</li>
<li><code>@Id</code>및 <code>@GeneratedValue</code>기본키로 사용할 JPA 주석이고,필요할 때 자동으로 생성된다.</li>
</ul>
<h2 id="저장소-정의"><a href="#저장소-정의" class="headerlink" title="저장소 정의"></a>저장소 정의</h2><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/EmployeeRepository.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>도메인 객체 유형과 기본키를 연결한다.</li>
</ul>
<h2 id="데모-데이터-생성"><a href="#데모-데이터-생성" class="headerlink" title="데모 데이터 생성"></a>데모 데이터 생성</h2><figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/DatabaseLoader.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseLoader</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmployeeRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository.save(<span class="keyword">new</span> Employee(<span class="string">"Frodo"</span>, <span class="string">"Baggins"</span>, <span class="string">"ring bearer"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Spring의 <code>@Component</code>주석을 표시해서 <code>@SpringBootApplication</code>에 자동 선택되게 한다.</li>
<li><code>CommandLineRunner</code>는 모든 Bean을 등록후 에 애플리케이션이 동작하게 한다.</li>
<li><code>EmployeeRepository</code> 생성한다.</li>
<li><code>run()</code>메소드를 통해 명령행에 있는 데이터를 로드한다.</li>
</ul>
<h2 id="루트-URL-조정"><a href="#루트-URL-조정" class="headerlink" title="루트 URL 조정"></a>루트 URL 조정</h2><p>동일한 경로에서 WEB UI를 호출해서 루트 URL를 변경 해줘야된다.</p>
<figure class="highlight yaml"><figcaption><span>src/main/resources/application.properties</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/api</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring-Boot-Back-End-실행"><a href="#Spring-Boot-Back-End-실행" class="headerlink" title="Spring Boot(Back-End) 실행"></a>Spring Boot(Back-End) 실행</h2><p><code>./mvnw spring-boot:run</code> 또는 IDE 으로 실행</p>
<figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/SpringBootReactjsApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootReactjsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootReactjsApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="REST-서비스-호출-해보기"><a href="#REST-서비스-호출-해보기" class="headerlink" title="REST 서비스 호출 해보기"></a>REST 서비스 호출 해보기</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl localhost:8080/api</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_links"</span> : &#123;</span><br><span class="line">    <span class="string">"employees"</span> : &#123;</span><br><span class="line">      <span class="string">"href"</span> : <span class="string">"http://localhost:8080/api/employees"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profile"</span> : &#123;</span><br><span class="line">      <span class="string">"href"</span> : <span class="string">"http://localhost:8080/api/profile"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl localhost:8080/api/employees</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_embedded"</span>: &#123;</span><br><span class="line">    <span class="string">"employees"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"firstName"</span>: <span class="string">"Frodo"</span>,</span><br><span class="line">        <span class="string">"lastName"</span>: <span class="string">"Baggins"</span>,</span><br><span class="line">        <span class="string">"description"</span>: <span class="string">"ring bearer"</span>,</span><br><span class="line">        <span class="string">"_links"</span>: &#123;</span><br><span class="line">          <span class="string">"self"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/employees/1"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"employee"</span>: &#123;</span><br><span class="line">            <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/employees/1"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"_links"</span>: &#123;</span><br><span class="line">    <span class="string">"self"</span>: &#123;</span><br><span class="line">      <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/employees"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"profile"</span>: &#123;</span><br><span class="line">      <span class="string">"href"</span>: <span class="string">"http://localhost:8080/api/profile/employees"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UI-Controller-설정"><a href="#UI-Controller-설정" class="headerlink" title="UI Controller 설정"></a>UI Controller 설정</h2><p>Spring에 MVC Controller가 필요하다.</p>
<figure class="highlight java"><figcaption><span>src/main/java/me/study/reactjs/HomeController.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>@Controller</code>는 클래스를 Spring MVC 컨트롤러로 표시합니다.</li>
<li><code>@RequestMapping</code> “/“ 경로로 접속하면 <code>index()</code> 메소드 호출한다.</li>
<li>자동 설정된 뷰 리졸버가 매핑 할 템플릿의 이름(<code>index</code>)으로 반환 한다.(src/main/resources/templates/index.html)</li>
</ul>
<h2 id="HTML-템플릿-정의와-CSS-추가"><a href="#HTML-템플릿-정의와-CSS-추가" class="headerlink" title="HTML 템플릿 정의와 CSS 추가"></a>HTML 템플릿 정의와 CSS 추가</h2><figure class="highlight html"><figcaption><span>src/main/resources/templates/index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"https://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ReactJS + Spring Data REST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/main.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"react"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"built/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>이 템플릿의 중요한 부분은 <code>&lt;div id=&quot;react&quot;&gt;&lt;/div&gt;</code>이고, React에 렌더링된 부분을 출력하라고 하는 부분이다.</p>
<figure class="highlight css"><figcaption><span>src/main/resources/static/main.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring Boot에서 <code>src/main/resources/static</code>는 서버에서 자동으로 로드 하기 때문에 <code>main.css</code>파일을 넣었지만 자세한 내용은 다루지 않는다.</p>
<h2 id="JavaScript-모듈-로드"><a href="#JavaScript-모듈-로드" class="headerlink" title="JavaScript 모듈 로드"></a>JavaScript 모듈 로드</h2><p>자바 스크립트를 실행하지 않는대신 <code>pom.xml</code>을 추가해야된다.</p>
<h3 id="pom-xml-추가"><a href="#pom-xml-추가" class="headerlink" title="pom.xml 추가"></a>pom.xml 추가</h3><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.study.reactjs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-reactjs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-boot-reactjs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- tag::frontend-maven-plugin[] --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">installDirectory</span>&gt;</span>target<span class="tag">&lt;/<span class="name">installDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and npm<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v10.11.0<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>6.4.1<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>webpack build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- end::frontend-maven-plugin[] --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>frontend-maven-plugin[]</code> JavaScript 빌드에 사용될 부분이다.</p>
          </div>
<p>플러그인 작동 순서</p>
<ol>
<li><code>install-node-and-npm</code>명령은 Node.js를 <code>npm</code>명령어를 통해서 패키지 관리 도구를 <code>/tartget</code>폴더에 설치 한다.</li>
<li><code>npm install</code> 명령을 통해서 <code>package.json</code>에 정의된 내용으로 설치한다.</li>
<li><code>webpack</code>명령은 JavaScript 코드를 컴파일(<code>webpack.config.js</code>)하는 webpack 바이너리를 실행한다.</li>
</ol>
<figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"spring-boot-reactjs"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Demo of ReactJS + Spring Data REST"</span>,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git@github.com:jaehyun8719/spring-boot-reactjs.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"rest"</span>,</span><br><span class="line">    <span class="string">"hateoas"</span>,</span><br><span class="line">    <span class="string">"spring"</span>,</span><br><span class="line">    <span class="string">"data"</span>,</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Jaehyun"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"Apache-2.0"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/jaehyun8719/spring-boot-reactjs/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/jaehyun8719/spring-boot-reactjs"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.5.2"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.5.2"</span>,</span><br><span class="line">    <span class="attr">"rest"</span>: <span class="string">"^1.3.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"watch"</span>: <span class="string">"webpack --watch -d"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-env"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"@babel/preset-react"</span>: <span class="string">"^7.0.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.2"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.19.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.1.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main/js/app.js'</span>,</span><br><span class="line">    devtool: <span class="string">'sourcemaps'</span>,</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname,</span><br><span class="line">        filename: <span class="string">'./src/main/resources/static/built/bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: path.join(__dirname, <span class="string">'.'</span>),</span><br><span class="line">                exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        presets: [<span class="string">"@babel/preset-env"</span>, <span class="string">"@babel/preset-react"</span>]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="React-작성"><a href="#React-작성" class="headerlink" title="React 작성"></a>React 작성</h2><figure class="highlight js"><figcaption><span>src/main/js/app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::vars[]</span></span><br><span class="line"><span class="keyword">const</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"><span class="keyword">const</span> ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"><span class="keyword">const</span> client = <span class="built_in">require</span>(<span class="string">'./client'</span>);</span><br><span class="line"><span class="comment">// end::vars[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::app[]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">employees</span>: []&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        client(&#123;<span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">path</span>: <span class="string">'/api/employees'</span>&#125;).done(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">employees</span>: response.entity._embedded.employees&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;EmployeeList employees=&#123;<span class="keyword">this</span>.state.employees&#125;/&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::app[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::employee-list[]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> employees = <span class="keyword">this</span>.props.employees.map(<span class="function"><span class="params">employee</span> =&gt;</span></span><br><span class="line">            &lt;Employee key=&#123;employee._links.self.href&#125; employee=&#123;employee&#125;/&gt;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;First Name&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;th&gt;Last Name&lt;/</span>th&gt;</span><br><span class="line">                    &lt;th&gt;Description&lt;<span class="regexp">/th&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>tr&gt;</span><br><span class="line">                &#123;employees&#125;</span><br><span class="line">                &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>table&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::employee-list[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::employee[]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&#123;<span class="keyword">this</span>.props.employee.firstName&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">                &lt;td&gt;&#123;this.props.employee.lastName&#125;&lt;/</span>td&gt;</span><br><span class="line">                &lt;td&gt;&#123;<span class="keyword">this</span>.props.employee.description&#125;&lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>tr&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// end::employee[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tag::render[]</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;App /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'react'</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// end::render[]</span></span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>React 컴포넌트를 삽입 할 DOM 노드는 <a href="#HTML-템플릿-정의와-CSS-추가">HTML 템플릿 정의와 CSS 추가</a>에서 생성한 <code>&lt;div id=&quot;react&quot;&gt;&lt;/div&gt;</code>에 정의된다. </p>
          </div>
<h2 id="결과-화면"><a href="#결과-화면" class="headerlink" title="결과 화면"></a>결과 화면</h2><ol>
<li><code>./mvnw package</code> 실행</li>
<li><code>bundle.js</code>와 <code>/target</code>폴더 생성 확인<br><img src="/images/springboot/with-react/2.png" alt></li>
<li><code>./mvnw spring-boot:run</code> 또는 IDE 으로 실행 </li>
<li><code>http://localhost:8080/</code> 접속 후 확인<br><img src="/images/springboot/with-react/3.png" alt></li>
</ol>
<h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>개인적인 생각이지만 간단한 서비스에는 Spring Boot(BackEnd) + React(FrontEnd) 통합 설정을 하면 좋을듯 하지만, BackEnd, FrontEnd를 분류 해서 사용하는게 좋을듯 하다.</p>
<p><img src="/images/springboot/with-react/4.png" width="60%"></p>
<p>그 이유는 서비스1, 서비스2, 서비스3에 공통으로 사용할 API를 따로 만들어야되고, Spring Boot 를 run 하기전에 항상 <code>package</code> 빌드를 해야 된다는 것이다.</p>
<p><img src="/images/springboot/with-react/5.png" width="60%"></p>
<p>이와 반대로 BackEnd, FrontEnd를 분류하게되면 API를 공통으로 사용할 수 있고, 로컬이나 테스트 서버에 API 서버를 기동후 FrontEnd 작업을 할 수 있다는 장점이 있다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/spring-boot-reactjs" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://spring.io/guides/tutorials/react-and-spring-data-rest/" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/guides/tutorials/react-and-spring-data-rest/</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring Boot with React</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>4. babel &amp; sass</title>
    <url>/2020/06/17/webpack/babel/</url>
    <content><![CDATA[<hr>
<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>webpack에서 로더 형태로 제공하는 <a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">babel-loader</a>을 이용하여 사용한다.<br><a id="more"></a></p>
<h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul>
<li>node: v12.16.3</li>
<li>npm: 6.14.5</li>
<li>webpack: 4.43.0</li>
<li>webpack-cli: 3.3.11</li>
</ul>
<h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/babel/babel_1.png" alt></p>
<h2 id="babel-loader-설치"><a href="#babel-loader-설치" class="headerlink" title="babel-loader 설치"></a>babel-loader 설치</h2><p><a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">babel-loader</a>을 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D babel-loader</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>, <span class="comment">// 바벨 로더를 추가</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>test에는 <code>.js</code> 확장자로 끝난 파일이 babel-loader가 처리하도록 설정</li>
<li>exclude에는 <code>/node_modules/</code>에 있는 <code>.js</code> 파일이 처리되지 않도록 설정(바벨 로더의 속도 향상)</li>
<li>loader에는 <code>babel-loader</code> 추가 </li>
</ul>
<h2 id="env-preset-설정과-polyfile"><a href="#env-preset-설정과-polyfile" class="headerlink" title="env preset 설정과 polyfile"></a>env preset 설정과 polyfile</h2><h3 id="preset-env-설치"><a href="#preset-env-설치" class="headerlink" title="preset-env 설치"></a>preset-env 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D @babel/preset-env</span><br></pre></td></tr></table></figure>
<h3 id="타켓-브라우져-설정"><a href="#타켓-브라우져-설정" class="headerlink" title="타켓 브라우져 설정"></a>타켓 브라우져 설정</h3><p>env preset은 브라우저에 맞는 플러그인들을 찾아 최적 코드로 출력해 준다.</p>
<h4 id="babel-config-js-생성"><a href="#babel-config-js-생성" class="headerlink" title="babel.config.js 생성"></a>babel.config.js 생성</h4><p><a href="https://babeljs.io/docs/en/config-files#project-wide-configuration" rel="external nofollow noopener noreferrer" target="_blank">babel.config.js</a>는 기본 설정 파일이다.</p>
<figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                    chrome: <span class="string">"79"</span>, <span class="comment">// 크롬 79까지 지원하는 코드 생성</span></span><br><span class="line">                    ie: <span class="string">"11"</span> <span class="comment">// 익스플로러 11 까지 지원하는 코드 생성</span></span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="webpack-빌드-확인"><a href="#webpack-빌드-확인" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/babel/babel_2.png" alt></p>
<p><code>app.js</code>에 작성된 코드가 <code>dist/main.js</code>에서 const가 var로 변환 되어 익스플로러도 지원을 한다.</p>
<h3 id="polyfile-설정"><a href="#polyfile-설정" class="headerlink" title="polyfile 설정"></a>polyfile 설정</h3><p>바벨은 ECMAScript2015+를 ECMAScript5 버전으로 변환할 수 있는 것만 빌드하고, 그렇지 못한 것들을 <code>polyfile</code>이라고 부르는 코드 조각으로 해결한다.<br>(참고 <a href="https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.promise.js" rel="external nofollow noopener noreferrer" target="_blank">core-js promise</a>)</p>
<h4 id="core-js-설치"><a href="#core-js-설치" class="headerlink" title="core-js 설치"></a>core-js 설치</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D core-js@3</span><br></pre></td></tr></table></figure>
<h4 id="src-app-js-수정"><a href="#src-app-js-수정" class="headerlink" title="src/app.js 수정"></a>src/app.js 수정</h4><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// core-js</span></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'foo'</span>);</span><br><span class="line">    &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);  <span class="comment">// expected output: "foo"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(promise1); <span class="comment">// expected output: [object Promise]</span></span><br></pre></td></tr></table></figure>
<h4 id="babel-config-js에-추가"><a href="#babel-config-js에-추가" class="headerlink" title="babel.config.js에 추가"></a>babel.config.js에 추가</h4><p><code>env preset</code>은 <code>polyfile</code>을 지정할 수 있는 옵션 제공</p>
<figure class="highlight js"><figcaption><span>babel.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    presets: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                targets: &#123;</span><br><span class="line">                    chrome: <span class="string">"79"</span>, <span class="comment">// 크롬 79까지 지원하는 코드 생성</span></span><br><span class="line">                    ie: <span class="string">"11"</span> <span class="comment">// 익스플로러 11 까지 지원하는 코드 생성</span></span><br><span class="line">                &#125;,</span><br><span class="line">                useBuiltIns: <span class="string">"usage"</span>, <span class="comment">// 폴리필 사용 방식 지정</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                    version: <span class="number">3</span> <span class="comment">// 폴리필 버전 지정</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://babeljs.io/docs/en/babel-preset-env#usebuiltins" rel="external nofollow noopener noreferrer" target="_blank">userBuiltIns</a>은 polyfile 사용할지 설정하는 옵션(기본값 : false)</li>
<li><a href="https://babeljs.io/docs/en/babel-preset-env#corejs" rel="external nofollow noopener noreferrer" target="_blank">core-js</a>에 3버전 모듈을 가지고 온다.</li>
</ul>
<h4 id="webpack-빌드-확인-1"><a href="#webpack-빌드-확인-1" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://caniuse.com/#search=Promise" rel="external nofollow noopener noreferrer" target="_blank">caniuse</a> 에서 <code>Promise()</code> 브라우저 지원 확인</li>
</ul>
<p><img src="/images/webpack/babel/babel_3.png" alt></p>
<ul>
<li>ie 11버젼에서 작동 확인</li>
</ul>
<p><img src="/images/webpack/babel/babel_4.png" alt></p>
<p><code>app.js</code>에 작성된 <code>new Promise()</code>가 변환 되어 익스플로러에서도 작동한다.</p>
<h2 id="sass-설정"><a href="#sass-설정" class="headerlink" title="sass 설정"></a>sass 설정</h2><h3 id="sass-loader-설치"><a href="#sass-loader-설치" class="headerlink" title="sass-loader 설치"></a>sass-loader 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D sass-loader</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D node-sass</span><br></pre></td></tr></table></figure>
<h3 id="variables-scss-파일-생성"><a href="#variables-scss-파일-생성" class="headerlink" title="variables.scss 파일 생성"></a>variables.scss 파일 생성</h3><figure class="highlight scss"><figcaption><span>variables.scss</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="variable">$brand-color</span>: <span class="number">#2ac1bc</span>;</span><br><span class="line"><span class="variable">$primary-color</span>: blue;</span><br><span class="line"><span class="variable">$secondary-color</span>: <span class="number">#aaa</span>;</span><br><span class="line"><span class="variable">$white-color</span>: <span class="number">#fff</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$border-color</span>: lighten(<span class="variable">$secondary-color</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$span</span>: <span class="number">4px</span>;</span><br></pre></td></tr></table></figure>
<h3 id="style-scss-파일-생성"><a href="#style-scss-파일-생성" class="headerlink" title="style.scss 파일 생성"></a>style.scss 파일 생성</h3><figure class="highlight scss"><figcaption><span>style.scss</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"./src/variables.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$brand-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-sass-loader-추가"><a href="#webpack-config-js에-sass-loader-추가" class="headerlink" title="webpack.config.js에 sass-loader 추가"></a>webpack.config.js에 sass-loader 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(scss|css)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                        <span class="string">"style-loader"</span>,</span><br><span class="line">                        <span class="string">"css-loader"</span>,</span><br><span class="line">                        <span class="string">"sass-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="webpack-빌드-확인-2"><a href="#webpack-빌드-확인-2" class="headerlink" title="webpack 빌드 확인"></a>webpack 빌드 확인</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/babel/babel_5.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
<li><a href="https://babeljs.io/" rel="external nofollow noopener noreferrer" target="_blank">https://babeljs.io/</a></li>
<li><a href="https://github.com/babel/babel-loader" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/babel/babel-loader</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>babel</tag>
        <tag>babel preset</tag>
        <tag>babel polyfile</tag>
        <tag>sass</tag>
      </tags>
  </entry>
  <entry>
    <title>Logback 설정</title>
    <url>/2019/05/15/utils/logback/</url>
    <content><![CDATA[<hr>
<p>Logback은 Java에서 가장 많이 사용되는 logging framework 이다.<br>Log4j의 후속 버전으로 새롭게 만든 Logging 라이브러리이며, slf4j API를 구현하므로 다른 logging framework와 logback 간에 쉽게 전환이 가능하다.<br><a id="more"></a></p>
<h2 id="Log4j1-x와-Logback비교시-Logback-장점"><a href="#Log4j1-x와-Logback비교시-Logback-장점" class="headerlink" title="Log4j1.x와 Logback비교시 Logback 장점"></a>Log4j1.x와 Logback비교시 Logback 장점</h2><ol>
<li>log4j 보다 메모리 점유도 작고, 성능도 10배 이상 향상</li>
<li>log4j는 로그레벨 변경시 서버 재기동이 필요하지만 logback은 내부 스캐닝을 통해 자동으로 로드 가능</li>
<li>로그 파일 롤링시 설정을 통해서 주기적으로 파일 자동삭제</li>
<li>log4j 보다 많은 필터링 기능 제공</li>
</ol>
<h2 id="Logback구조"><a href="#Logback구조" class="headerlink" title="Logback구조"></a>Logback구조</h2><p>logback은 Logger, Appender, Layout 3가지 구성요소가 있다.</p>
<p>Logger class 는 <code>logback-classic</code>의 모듈 이고, Appender 및 Layout interfaces 는 <code>logback-core</code> 부분 입니다.</p>
<ul>
<li>Logger : 어플리케이션이 로그 메세지를 작성하기 위해 사용하는 클래스</li>
<li>Appender : 설정해 놓은 위치에 로그 메세지를 저장</li>
<li>Layout: 메세지를 출력할 준비 ( 참고 URL : <a href="https://logback.qos.ch/manual/layouts.html" rel="external nofollow noopener noreferrer" target="_blank">https://logback.qos.ch/manual/layouts.html</a> )</li>
</ul>
<h2 id="Log-레벨"><a href="#Log-레벨" class="headerlink" title="Log 레벨"></a>Log 레벨</h2><p><img src="/images/logback/logback_level.png" alt></p>
<h2 id="설정파일-순서대로-높은-우선순위를-가짐"><a href="#설정파일-순서대로-높은-우선순위를-가짐" class="headerlink" title="설정파일 (순서대로 높은 우선순위를 가짐)"></a>설정파일 (순서대로 높은 우선순위를 가짐)</h2><ol>
<li>logback.groovy</li>
<li>logback-test.xml</li>
<li>logback.xml</li>
</ol>
<h2 id="Maven-Dependency"><a href="#Maven-Dependency" class="headerlink" title="Maven Dependency"></a>Maven Dependency</h2><p>logback classic에 core가 종속되어있어서 따로 추가 안 해도 된다.<br><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="기본-구성"><a href="#기본-구성" class="headerlink" title="기본 구성"></a>기본 구성</h2><p>logback.xml 파일을 만들어 src\main\resources에 추가 한다.</p>
<p><img src="/images/logback/logback_src.png" alt><br><figure class="highlight xml"><figcaption><span>logback.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>테스트를 하기 위해서 main 메서드를 가진 클래스를 생성<br><figure class="highlight java"><figcaption><span>Logback.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Logback</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger  = LoggerFactory.getLogger(Logback<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                 logger.info(<span class="string">"log Example &#123;&#125;"</span>, Logback<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">23</span>:<span class="number">15</span>:<span class="number">16.425</span> [main] INFO  Logback - log Example Logback</span><br></pre></td></tr></table></figure>
<p>기본 구성을 살펴보면</p>
<ol>
<li><code>class=&quot;ch.qos.logback.core.ConsoleAppender&quot;</code>  클래스 이름을 참조하는 <code>name=&quot;STDOUT&quot;</code> name을 가진 <code>appender</code>가 있다.</li>
<li>로그 메세지 출력 형식의 <code>&lt;pattern&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/pattern&gt;</code> 을 확인 할수 있다.</li>
<li>root 태그는 debug 모드로 설정하고, <code>STDOUT</code>을 가진 <code>appender</code> 를 참조한다.</li>
<li>Logger 를 만들고 <code>logger.info()</code>메소를 통해 메세지가 출력되는지 결과화면으로 확인한다.</li>
</ol>
<h2 id="설정-옵션"><a href="#설정-옵션" class="headerlink" title="설정 옵션"></a>설정 옵션</h2><h3 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h3><p>설정 파일 수정시 자동으로 로드 ( scanPeriod=”30 seconds“ -&gt; 설정파일 수정을 30초마다 스캔, default=1분 )<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPriod</span>=<span class="string">"30 seconds"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p><code>name=&quot;me.logback.level&quot;</code>이하 모든 Logger들의 level은 DEBUG라는 설정<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback.level"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>additivity :  <code>name=&quot;me.logback.level&quot;</code> 이하 패키지는 모두 적용되지만, false 값으로 설정시 name에만 logger 가 적용된다.<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback.level"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h3><ul>
<li>ConsoleAppender</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- "CONSOLE" name 을 가진 appender 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 로그 출력 패턴 지정 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- additivity="false 설정시 me.logback.level 이하 패키지에는 logger 이벤트가 전달되지 않음 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback.level"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ref="appender name(CONSOLE) 지정" --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>RollingFileAppender</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ROLLING-FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>xxx.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 날짜 기준에 따라 로그파일 롤링 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 롤링될 로그 파일 패턴 지정 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>xxx.log.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- maxHistory=14이면 14일 이후의 로그파일 삭제  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 로그파일들의 총 용량 제한 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 로그 출력 패턴 지정 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- additivity="false 설정시 me.logback.level 이하 패키지에는 logger 이벤트가 전달되지 않음 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback.level"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref="appender name(ROLLING-FILE) 지정" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>파일 생성 결과 화면</p>
<p><img src="/images/logback/logback_file.png" alt></p>
<h3 id="logback-xml-샘플"><a href="#logback-xml-샘플" class="headerlink" title="logback.xml 샘플"></a>logback.xml 샘플</h3><figure class="highlight xml"><figcaption><span>logback.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- LOG_FILE, FILE_LOG_PATTERN property 생성 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"C:/logs/logback/logback.log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 로그 출력 패턴 지정 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- CONSOLE name 을 가진 appender 설정 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ROLLING-FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property에 설정한 value 값 입력 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 날짜 기준에 따라 로그파일 롤링 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 롤링될 로그 파일 패턴 지정 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxHistory=14이면 14일 이후의 로그파일 삭제  --&gt;</span>	</span><br><span class="line">                <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 로그파일들의 총 용량 제한 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- property에 설정한 value 으로 로그 출력 패턴 지정 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- root는 최상위 패키지 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- additivity="false 설정시 me.logback.level 이하 패키지에는 logger 이벤트가 전달되지 않음 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"me.logback.level"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref="appender name 지정" --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"ROLLING-FILE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://logback.qos.ch/manual/architecture.html" rel="external nofollow noopener noreferrer" target="_blank">https://logback.qos.ch/manual/architecture.html</a></li>
<li><a href="https://www.baeldung.com/logback" rel="external nofollow noopener noreferrer" target="_blank">https://www.baeldung.com/logback</a></li>
</ul>
]]></content>
      <categories>
        <category>Utils</category>
        <category>Logback</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>6. webpack-dev-server</title>
    <url>/2020/06/24/webpack/dev-server/</url>
    <content><![CDATA[<hr>
<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br><a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">webpack-dev-server</a>는 운영환경과 동일하게 배포전에 서버 구동을 하여 테스트할 수 있는 환경을 제공해 준다.<br><a id="more"></a></p>
<h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul>
<li>node: v12.16.3</li>
<li>npm: 6.14.5</li>
<li>webpack: 4.43.0</li>
<li>webpack-cli: 3.3.11</li>
</ul>
<h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/dev-server/dev-server_1.png" alt></p>
<h2 id="설치-amp-사용법"><a href="#설치-amp-사용법" class="headerlink" title="설치 &amp; 사용법"></a>설치 &amp; 사용법</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D webpack-dev-server</span><br></pre></td></tr></table></figure>
<h3 id="app-js-수정"><a href="#app-js-수정" class="headerlink" title="app.js 수정"></a>app.js 수정</h3><figure class="highlight js"><figcaption><span>app.js </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>
<h3 id="style-scss-수정"><a href="#style-scss-수정" class="headerlink" title="style.scss 수정"></a>style.scss 수정</h3><figure class="highlight scss"><figcaption><span>style.scss</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"./src/variables.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$brand-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>variables.scss</code>에 <code>$brand-color: #2ac1bc;</code>변수값을 설정 했다.</p>
          </div>
<h3 id="package-json에-추가"><a href="#package-json에-추가" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="서버-구동"><a href="#서버-구동" class="headerlink" title="서버 구동"></a>서버 구동</h3><p>package.json에 등록한 명령어로 실행을 하여 서버를 구동한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/dev-server/dev-server_2.png" alt></p>
<ul>
<li>localhost:8080 으로 접속해 보면 결과물을 확인할 수 있고, webpack 서버는 파일 변화를 감지하면 webpack 을 재빌드 하여 브라우져를 갱신하여 변화된 코드로 화면을 보여준다.</li>
</ul>
<p><img src="/images/webpack/dev-server/dev-server_3.gif" alt></p>
<h2 id="기본-옵션-설정"><a href="#기본-옵션-설정" class="headerlink" title="기본 옵션 설정"></a>기본 옵션 설정</h2><p>webpack 설정 파일의 devServer 객체에 <a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">서버 옵션</a>을 설정할 수 있다.</p>
<h3 id="기본-옵셜-설명"><a href="#기본-옵셜-설명" class="headerlink" title="기본 옵셜 설명"></a>기본 옵셜 설명</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">"dist"</span>), </span><br><span class="line">        publicPath: <span class="string">"/"</span>, </span><br><span class="line">        host: <span class="string">"dev.domain.com"</span>,</span><br><span class="line">        overlay: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">8081</span>,</span><br><span class="line">        stats: <span class="string">"errors-only"</span>,</span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>옵션</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>contentBase</td>
<td>정적파일 제공 경로(기본값: webpack의 output)</td>
</tr>
<tr>
<td>publicPath</td>
<td>브라우저 접근 경로(기본값: / )</td>
</tr>
<tr>
<td>host</td>
<td>Domain 환경을 맞춤</td>
</tr>
<tr>
<td>overlay</td>
<td>빌드시 에러나 경고를 브라우저에 출력</td>
</tr>
<tr>
<td>port</td>
<td>개발 서버 포트 번호를 설정</td>
</tr>
<tr>
<td>stats</td>
<td>상태 메시지 수준 설정(‘none’, ‘errors-only’, ‘minimal’, ‘normal’, ‘verbose’)</td>
</tr>
<tr>
<td>historyApiFallBack</td>
<td>history api를 사용하여 SPA 개발시 404가 발생하면 index.html으로 리다이렉트</td>
</tr>
</tbody>
</table>
<h3 id="webpack-config-js-수정"><a href="#webpack-config-js-수정" class="headerlink" title="webpack.config.js 수정"></a>webpack.config.js 수정</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    overlay: <span class="literal">true</span>,</span><br><span class="line">    stats: <span class="string">"errors-only"</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="서버-구동-1"><a href="#서버-구동-1" class="headerlink" title="서버 구동"></a>서버 구동</h3><p>서버 구동후 에러를 발생시켜 브라우저 화면에 에러가 출력을 확인한다.</p>
<p><img src="/images/webpack/dev-server/dev-server_4.gif" alt></p>
<h2 id="Hot-Module-Replacement-HMR"><a href="#Hot-Module-Replacement-HMR" class="headerlink" title="Hot Module Replacement(HMR)"></a>Hot Module Replacement(HMR)</h2><p><a href="https://webpack.js.org/concepts/hot-module-replacement/" rel="external nofollow noopener noreferrer" target="_blank">Hot Module Replacement</a>는 브라우저 전체 화면을 갱신하지 않고, 변경된 모듈만 갱신한다. </p>
<h3 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h3><p><a href="https://webpack.js.org/configuration/dev-server/#devserverhot" rel="external nofollow noopener noreferrer" target="_blank">devServer.hot</a> 속성을 설정</p>
<figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    hot:<span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="서버-구동-2"><a href="#서버-구동-2" class="headerlink" title="서버 구동"></a>서버 구동</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm start</span><br></pre></td></tr></table></figure>
<p>서버 구동을 완료하고, <code>src/style.scss</code> 파일에 배경화면을 값을 변경하여 브라우저가 갱신을 하지 않고 배경색깔이 변경되는 것을 확인</p>
<p><img src="/images/webpack/dev-server/dev-server_5.gif" alt></p>
<h3 id="핫로딩-지원하는-로더"><a href="#핫로딩-지원하는-로더" class="headerlink" title="핫로딩 지원하는 로더"></a>핫로딩 지원하는 로더</h3><p><a href="https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks" rel="external nofollow noopener noreferrer" target="_blank">Hot Module Replacemnt 지원하는 로더</a>는 참고</p>
<figure class="highlight js"><figcaption><span>style-loader</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">    <span class="built_in">module</span>.hot.accept(</span><br><span class="line">        $&#123;loaderUtils.stringifyRequest(<span class="keyword">this</span>, <span class="string">`!!<span class="subst">$&#123;request&#125;</span>`</span>)&#125;,</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>style-loader코드에서 보면 <code>if (module.hot)</code> 값이 <code>true</code>일 경우 <code>module.hot.accept</code>함수를 사용한다.</p>
          </div>
<h2 id="Mode"><a href="#Mode" class="headerlink" title="Mode"></a>Mode</h2><p>웹팩을 최적화 하는 방법중에 <a href="https://webpack.js.org/configuration/mode/" rel="external nofollow noopener noreferrer" target="_blank">mode</a> 값을 설정하는 방식</p>
<table>
<thead>
<tr>
<th>옵션</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>development</td>
<td>NamedChunksPlugin, NamedModulesPlugin</td>
</tr>
<tr>
<td>production</td>
<td>FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin, TerserPlugin</td>
</tr>
</tbody>
</table>
<ul>
<li>설정한 <code>mode</code> 옵션 값에 따라 사용하는 플러그인이 다르게 사용된다.</li>
</ul>
<h3 id="webpack-config-js-mode-값-추가"><a href="#webpack-config-js-mode-값-추가" class="headerlink" title="webpack.config.js mode 값 추가"></a>webpack.config.js mode 값 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mode = process.env.NODE_ENV || <span class="string">"development"</span>; <span class="comment">// 기본값을 `development` 설정</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="package-json-수정"><a href="#package-json-수정" class="headerlink" title="package.json 수정"></a>package.json 수정</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack-dev-server --progress"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --progress"</span> <span class="comment">// 개발시 NODE_ENV=development로 변경</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="빌드"><a href="#빌드" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<div class="note warning no-icon">
            <p>운영체제가 window일 경우 <strong>‘NODE_ENV’은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는<br>배치 파일이 아닙니다.</strong> 메세지 발생시 <code>$ npm install -g win-node-env</code> 설치</p>
          </div>
<h4 id="NODE-ENV-production-빌드-결과"><a href="#NODE-ENV-production-빌드-결과" class="headerlink" title="NODE_ENV=production 빌드 결과"></a>NODE_ENV=production 빌드 결과</h4><p><img src="/images/webpack/dev-server/dev-server_6.png" alt></p>
<h4 id="NODE-ENV-development-빌드-결과"><a href="#NODE-ENV-development-빌드-결과" class="headerlink" title="NODE_ENV=development 빌드 결과"></a>NODE_ENV=development 빌드 결과</h4><p><img src="/images/webpack/dev-server/dev-server_7.png" alt></p>
<ul>
<li>두 결과물을 보면 <code>NODE_ENV=production</code>과 <code>NODE_ENV=development</code>로 빌드 시 사용되는 플러그인이 다른 것을 확인할 수 있다.</li>
</ul>
<h2 id="optimazation-속성으로-최적화"><a href="#optimazation-속성으로-최적화" class="headerlink" title="optimazation 속성으로 최적화"></a>optimazation 속성으로 최적화</h2><p>빌드 과정에서 커스터마이징할 수 있는 <a href="https://webpack.js.org/configuration/optimization/" rel="external nofollow noopener noreferrer" target="_blank">optimazation</a>속성을 사용.</p>
<h3 id="optimize-css-assets-webpack-plugin"><a href="#optimize-css-assets-webpack-plugin" class="headerlink" title="optimize-css-assets-webpack-plugin"></a>optimize-css-assets-webpack-plugin</h3><p><a href="https://webpack.js.org/plugins/mini-css-extract-plugin/#minimizing-for-production" rel="external nofollow noopener noreferrer" target="_blank">optimize-css-assets-webpack-plugin</a>은 css 파일을 압축하는 최적화 플러그인</p>
<h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D optimize-css-assets-webpack-plugin</span><br></pre></td></tr></table></figure>
<h4 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h4><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: mode === <span class="string">'production'</span> ? [ <span class="comment">// mode가 production일 경우만 실행</span></span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(),</span><br><span class="line">        ] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>optimization.minimizer</code>는 <code>OptimizeCSSAssetsPlugin</code>을 전달해서 css파일을 압축하도록 하는 플러그인</li>
</ul>
<h4 id="NODE-ENV-production-빌드"><a href="#NODE-ENV-production-빌드" class="headerlink" title="NODE_ENV=production 빌드"></a>NODE_ENV=production 빌드</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/dev-server/dev-server_8.png" alt></p>
<ul>
<li>빌드 후 css 코드가 압축된 것을 확인할 수 있다.</li>
</ul>
<h3 id="terser-webpack-plugin"><a href="#terser-webpack-plugin" class="headerlink" title="terser-webpack-plugin"></a>terser-webpack-plugin</h3><p><a href="https://webpack.js.org/plugins/terser-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">TerserWebpackPlugin</a>는 debugger 구문을 제거하거나, 옵션 값으로 <code>console.log</code>도 배포전에 삭제하는 플러그인이다.</p>
<h4 id="설치-1"><a href="#설치-1" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D terser-webpack-plugin</span><br></pre></td></tr></table></figure>
<h4 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h4><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     optimization: &#123;</span><br><span class="line">        minimizer: mode === <span class="string">'production'</span> ? [ <span class="comment">// mode가 production일 경우만 실행</span></span><br><span class="line">            <span class="keyword">new</span> TerserPlugin(&#123;</span><br><span class="line">                terserOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        drop_console: <span class="literal">true</span>, <span class="comment">// console.log를 제거</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">        ] : [],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="NODE-ENV-production-빌드-1"><a href="#NODE-ENV-production-빌드-1" class="headerlink" title="NODE_ENV=production 빌드"></a>NODE_ENV=production 빌드</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/dev-server/dev-server_9.png" alt></p>
<ul>
<li>빌드 후 <code>consol.log</code>를 검색해보면 삭제 된 것을 확인할 수 있다. </li>
</ul>
<h2 id="코드-스플리팅"><a href="#코드-스플리팅" class="headerlink" title="코드 스플리팅"></a>코드 스플리팅</h2><p>코드를 하나로 압축 하는 것 외에 코드 결과물을 여러개로 쪼개서 다운로드 속도를 빠르게 할 수 있다</p>
<div class="note warning no-icon">
            <p>초기 프로젝트에는 크게 사용할 일이 없지만, 프로젝트 파일이 커지면 적용하면 좋은 거지 꼭 해야 되는 것은 아니다.<br>코드 스플리팅에대해서 간단하게만 설명하고, 다이나익 임포트에 대해서는 설명을 안한다.</p>
          </div>
<h3 id="result-js-파일-생성"><a href="#result-js-파일-생성" class="headerlink" title="result.js 파일 생성"></a>result.js 파일 생성</h3><figure class="highlight js"><figcaption><span>result.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    hide() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hide"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"show"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="app-js-수정-1"><a href="#app-js-수정-1" class="headerlink" title="app.js 수정"></a>app.js 수정</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.scss"</span>;</span><br><span class="line"><span class="keyword">import</span> result <span class="keyword">from</span> <span class="string">"./result"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line">result.hide();</span><br><span class="line">result.show();</span><br></pre></td></tr></table></figure>
<h3 id="중복-코드-제거"><a href="#중복-코드-제거" class="headerlink" title="중복 코드 제거"></a>중복 코드 제거</h3><p><a href="https://webpack.js.org/guides/code-splitting/#prevent-duplication" rel="external nofollow noopener noreferrer" target="_blank">SplitChunksPlugin</a>는 코드를 분리할때 중복을 예방하는 플러그인이다.</p>
<h3 id="webpack-config-js에-추가-2"><a href="#webpack-config-js에-추가-2" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span>,</span><br><span class="line">        result: <span class="string">"./src/result.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">"all"</span>, <span class="comment">// 중복 제거 플로그인 옵션</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="빌드-1"><a href="#빌드-1" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/dev-server/dev-server_10.png" alt></p>
<p>index.html 에 result.js 추가 확인</p>
<p><img src="/images/webpack/dev-server/dev-server_11.png" alt></p>
<h2 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h2><p><a href="https://webpack.js.org/configuration/externals/" rel="external nofollow noopener noreferrer" target="_blank">externals</a>은 패키지로 제공될때 이미 빌드 과정을 한것을 제외시켜 최적화 시키는 방법이다.<br>axios같은 써드파티 라이브러리로 예를 들어보자.</p>
<h3 id="CopyWebpackPlugin-amp-axios설치"><a href="#CopyWebpackPlugin-amp-axios설치" class="headerlink" title="CopyWebpackPlugin &amp; axios설치"></a>CopyWebpackPlugin &amp; axios설치</h3><p>(CopyWebpackPlugin)[<a href="https://webpack.js.org/plugins/copy-webpack-plugin/]은" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/plugins/copy-webpack-plugin/]은</a> 파일을 복사하는 플러그인이다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D copy-webpack-plugin</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D axios</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-추가-3"><a href="#webpack-config-js에-추가-3" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight js"><figcaption><span>webpack.config.js:</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyPlugin = <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    externals: &#123;</span><br><span class="line">        axios: <span class="string">'axios'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="keyword">new</span> CopyPlugin(&#123;</span><br><span class="line">        patterns: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">from</span>: <span class="string">"./node_modules/axios/dist/axios.min.js"</span>,</span><br><span class="line">                to: <span class="string">"./axios.min.js"</span> <span class="comment">// 목적지 파일에 들어간다</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>axois를 번들에 포함 하지 않고 빌드하며, <code>to</code>는 목적지로 파일을 복사한다.</p>
<h3 id="index-html에-추가"><a href="#index-html에-추가" class="headerlink" title="index.html에 추가"></a>index.html에 추가</h3><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="빌드-2"><a href="#빌드-2" class="headerlink" title="빌드"></a>빌드</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/dev-server/dev-server_12.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
<li><a href="https://webpack.js.org/configuration/dev-server/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/dev-server/</a></li>
<li><a href="https://webpack.js.org/concepts/hot-module-replacement/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/hot-module-replacement/</a></li>
<li><a href="https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/hot-module-replacement/#other-code-and-frameworks</a></li>
<li><a href="https://webpack.js.org/configuration/mode/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/mode/</a></li>
<li><a href="https://webpack.js.org/configuration/optimization/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/configuration/optimization/</a></li>
<li><a href="https://webpack.js.org/guides/code-splitting/#prevent-duplication" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/code-splitting/#prevent-duplication</a></li>
<li><a href="https://webpack.js.org/plugins/copy-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/plugins/copy-webpack-plugin/</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>webpack dev-server</tag>
      </tags>
  </entry>
  <entry>
    <title>5. ESLint &amp; prettier</title>
    <url>/2020/06/22/webpack/eslint-prettier/</url>
    <content><![CDATA[<hr>
<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.</p>
<ol>
<li><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a>는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구</li>
<li><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">Prettier</a>는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.<a id="more"></a>
</li>
</ol>
<h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul>
<li>node: v12.16.3</li>
<li>npm: 6.14.5</li>
<li>webpack: 4.43.0</li>
<li>webpack-cli: 3.3.11</li>
</ul>
<h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/eslint-prettier/eslint-prettier_1.png" alt></p>
<h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">ESLint</a>는 ECMAScript 코드에서 문제점을 검사하고 더 나은 코드로 정정하는 도구</p>
<h3 id="ESLint-설치"><a href="#ESLint-설치" class="headerlink" title="ESLint 설치"></a>ESLint 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D eslint</span><br></pre></td></tr></table></figure>
<h3 id="ESLint-초기화"><a href="#ESLint-초기화" class="headerlink" title="ESLint 초기화"></a>ESLint 초기화</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx eslint --init</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/eslint-prettier/eslint-prettier_2.gif" alt></p>
<div class="note info no-icon">
            <p>대화식 명령어로 진행하는데 현재 사용하고 있는 환경에 대해 답을 하면 된다.<br><code>.eslintrc</code> 파일이 자동 생성된다.</p>
          </div>
<h3 id="eslintrc-js"><a href="#eslintrc-js" class="headerlink" title="eslintrc.js"></a>eslintrc.js</h3><p>ESLint 가 제공하는 여러 가지 규칙을 미리 정해 놓은 eslint:recommended 설정<br><a href="https://eslint.org/docs/rules/" rel="external nofollow noopener noreferrer" target="_blank">ESLint 규칙</a> 목록에서 왼쪽에 체크 표시되어 있는 설정을 활성화</p>
<figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: <span class="number">11</span>,</span><br><span class="line">        sourceType: <span class="string">"module"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>node: true</code>는 <code>webpack.config.js</code> 빌드시 node 환경도 적용</li>
<li>이 설정 외에 규칙이 필요하면 rules 속성에 추가하면 된다.</li>
</ul>
<div class="note info no-icon">
            <p>외부 스타일 가이드 중에 <a href="https://github.com/airbnb/javascript" rel="external nofollow noopener noreferrer" target="_blank">Airbnb Style Guide</a>, <a href="https://github.com/google/eslint-config-google" rel="external nofollow noopener noreferrer" target="_blank">Google Style Guide</a>가 대표적인 가이드로 많이 사용된다.</p>
          </div>
<h3 id="eslintignore-생성-선택-사항"><a href="#eslintignore-생성-선택-사항" class="headerlink" title=".eslintignore 생성(선택 사항)"></a>.eslintignore 생성(선택 사항)</h3><p>ESLint에 적용되지 않는 대상을 정하는 파일</p>
<figure class="highlight js"><figcaption><span>.eslintignore</span></figcaption><table><tr><td class="code"><pre><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure>
<h3 id="package-json에-추가"><a href="#package-json에-추가" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"webpack --progress"</span>,</span><br><span class="line">    <span class="string">"lint"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<ul>
<li><code>eslint src --fix</code> 명령어로 <code>src</code> 하위 폴더에 있는 파일을 ESLint 적용, <code>--fix</code>는 ESLint에 적용된 파일을 자동으로 스타일 코드로 수정</li>
</ul>
<h3 id="app-js-코드-수정"><a href="#app-js-코드-수정" class="headerlink" title="app.js 코드 수정"></a>app.js 코드 수정</h3><figure class="highlight js"><figcaption><span>src/app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">"jaehyun"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);;;;;;;;;;;;;;;;;;;;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>;;;;;;;;;;;;;;;;;;;;</code>을 추가하여 ESLint 불필요한 부분 수정되는지 확인</li>
</ul>
<h3 id="ESLint-빌드"><a href="#ESLint-빌드" class="headerlink" title="ESLint 빌드"></a>ESLint 빌드</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/eslint-prettier/eslint-prettier_3.gif" alt></p>
<ul>
<li><code>;;;;;;;;;;;;;;;;;;;;</code>삭제되었는지 확인</li>
<li>이외에도 여러 가지 스타일 코드대로 수정이 된다.</li>
</ul>
<h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>여기서는 단독으로 Prettier 방법보다 ESLint와 함께 통합하는 방법에 대해서만 설명한다.<br><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">Prettier</a>는 코드를 일관적인 스타일로 코드를 만들어 주는 도구이고, ESLint와 다르게 품질 관련된 기능은 사용되지 않는다.</p>
<h3 id="prettier-설치"><a href="#prettier-설치" class="headerlink" title="prettier 설치"></a>prettier 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D prettier</span><br></pre></td></tr></table></figure>
<h3 id="eslint-plugin-prettier-설치"><a href="#eslint-plugin-prettier-설치" class="headerlink" title="eslint-plugin-prettier 설치"></a>eslint-plugin-prettier 설치</h3><p><a href="https://github.com/prettier/eslint-plugin-prettier" rel="external nofollow noopener noreferrer" target="_blank">eslint-plugin-prettier</a>는 프리티어 규칙을 ESLint 규칙으로 추가하는 플러그인</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D eslint-plugin-prettier</span><br></pre></td></tr></table></figure>
<h3 id="prettierrc-생성"><a href="#prettierrc-생성" class="headerlink" title=".prettierrc 생성"></a>.prettierrc 생성</h3><p>prettier에 대한 <a href="https://prettier.io/docs/en/options.html" rel="external nofollow noopener noreferrer" target="_blank">Option</a>에 대해서 설정</p>
<figure class="highlight js"><figcaption><span>.prettierrc</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"tabWidth"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>여기서는 탭 간격만 기본값이 2를 tab 간격을 4로 설정하였다.</li>
</ul>
<h3 id="eslintrc-js-수정"><a href="#eslintrc-js-수정" class="headerlink" title="eslintrc.js 수정"></a>eslintrc.js 수정</h3><figure class="highlight js"><figcaption><span>.eslintrc.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        browser: <span class="literal">true</span>,</span><br><span class="line">        es2020: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: <span class="number">11</span>,</span><br><span class="line">        sourceType: <span class="string">"module"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="app-js-코드-수정-1"><a href="#app-js-코드-수정-1" class="headerlink" title="app.js 코드 수정"></a>app.js 코드 수정</h3><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log();;;;;;;</span><br></pre></td></tr></table></figure>
<h3 id="ESLint-빌드-1"><a href="#ESLint-빌드-1" class="headerlink" title="ESLint 빌드"></a>ESLint 빌드</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run lint</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">console</span>.log();</span><br><span class="line"></span><br><span class="line">name = <span class="string">"jaehyun"</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/eslint-prettier/eslint-prettier_4.gif" alt></p>
<ul>
<li>2번째 줄에서는 ESLint의 에러가 발생으로 로그창 에 에러 내용 출력</li>
<li>3번째 줄에서는 prettier의 <code>;;;;;;</code> 삭제</li>
<li>5번째 줄에서는 prettier의 <code>&#39;&#39;</code> 을 <code>&quot;&quot;</code>로 변경</li>
</ul>
<h2 id="자동화"><a href="#자동화" class="headerlink" title="자동화"></a>자동화</h2><p>git commit 시 자동으로 ESLint 빌드를 실행하기 위해서는 Git Hook을 이용해야 된다.<br>Git Hook을 쉽게 사용할 수 있는 도구는 <a href="https://github.com/typicode/husky" rel="external nofollow noopener noreferrer" target="_blank">husky</a>이다.</p>
<h3 id="husky-설치"><a href="#husky-설치" class="headerlink" title="husky 설치"></a>husky 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D husky</span><br></pre></td></tr></table></figure>
<h3 id="package-json에-추가-1"><a href="#package-json에-추가-1" class="headerlink" title="package.json에 추가"></a>package.json에 추가</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"eslint src --fix"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>commit 하기 전에 ESLint 실행하고 오류를 발견하면 커밋 과정은 취소된다.</p>
          </div>
<h3 id="변경된-파일만-ESLint-검사"><a href="#변경된-파일만-ESLint-검사" class="headerlink" title="변경된 파일만 ESLint 검사"></a>변경된 파일만 ESLint 검사</h3><p><a href="https://github.com/okonet/lint-staged" rel="external nofollow noopener noreferrer" target="_blank">lint-staged</a>를 이용해서 변경된 파일만 ESLint 실행하는 도구</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -D lint-staged</span><br></pre></td></tr></table></figure>
<h3 id="package-json-수정"><a href="#package-json-수정" class="headerlink" title="package.json 수정"></a>package.json 수정</h3><figure class="highlight js"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"lint-staged"</span>: &#123;</span><br><span class="line">  <span class="string">"*.js"</span>: <span class="string">"eslint --fix"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/eslint-prettier/eslint-prettier_5.png" alt></p>
<ul>
<li>app.js에 변수명을 선언하지 않았기 때문에 commit을 할 수 없고, ESLint 에러가 나타난다.</li>
</ul>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
<li><a href="https://eslint.org/" rel="external nofollow noopener noreferrer" target="_blank">https://eslint.org/</a></li>
<li><a href="https://prettier.io/" rel="external nofollow noopener noreferrer" target="_blank">https://prettier.io/</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>webpack lint</tag>
        <tag>webpack prettier</tag>
      </tags>
  </entry>
  <entry>
    <title>2. webpack loader</title>
    <url>/2020/06/05/webpack/loader/</url>
    <content><![CDATA[<hr>
<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>로더(Lodaer)는 웹팩이 웹 애플리케이션을 해석할 때 자바스크립트 파일이 아닌 HTML, CSS, Image, Font 등을 변환하여 자바스크립트에서 직접 로딩할 수 있도록 해준다.<br><a id="more"></a></p>
<h2 id="커스텀-로더-만들기"><a href="#커스텀-로더-만들기" class="headerlink" title="커스텀 로더 만들기"></a>커스텀 로더 만들기</h2><p>로더를 사용하기 전에 커스텀 로더를 만들어서 확인해 보자.</p>
<h3 id="cumstomLoader-js-생성"><a href="#cumstomLoader-js-생성" class="headerlink" title="cumstomLoader.js 생성"></a>cumstomLoader.js 생성</h3><figure class="highlight javascript"><figcaption><span>cumstomLoader.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">customLoader</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"커스텀 로더 작동"</span>);</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js파일의-module-객체에-추가"><a href="#webpack-config-js파일의-module-객체에-추가" class="headerlink" title="webpack.config.js파일의 module 객체에 추가"></a>webpack.config.js파일의 module 객체에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>, <span class="comment">// .js 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [path.resolve(<span class="string">"./src/customLoader.js"</span>)] <span class="comment">// 방금 만든 로더를 적용한다</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>test에는 로딩에 적용할 파일을 적용한다. 정규화 표현식을 이용해서 <code>.js</code> 확장자의 모든 파일을 처리</li>
<li>user에는 이 패턴에 해당하는 방금 만든 <code>cumstomLoader.js</code> 경로를 지정</li>
</ul>
<h3 id="커스텀-로더-실행"><a href="#커스텀-로더-실행" class="headerlink" title="커스텀 로더 실행"></a>커스텀 로더 실행</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; frontend-dev-env@1.0.0 build C:\workGit\frontend-dev-env</span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">커스텀 로더 작동</span><br><span class="line">커스텀 로더 작동</span><br></pre></td></tr></table></figure>
<p>터미널에 ‘커스텀 로더 작동’ 문자열이 나오고, <code>cumstomLoader()</code> 함수가 동작한 것을 확인할 수 있다.</p>
<h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>CSS 파일을 자바스크립트에서 불러와 사용하려면 CSS 모듈 변환하는 작업이 필요한데, <a href="https://github.com/webpack-contrib/css-loader" rel="external nofollow noopener noreferrer" target="_blank">css-loder</a>가 CSS 모듈 변화 작업을 진행하여 사용할 수 있게 한다.</p>
<h3 id="css-loader-설치"><a href="#css-loader-설치" class="headerlink" title="css-loader 설치"></a>css-loader 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D css-loader</span><br></pre></td></tr></table></figure>
<h3 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h3><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [<span class="string">"css-loader"</span>], <span class="comment">// ss-loader를 적용</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>웹팩은 엔트리 포인트 부터 검색하여 css 파일을 찾으면 <code>css-loader</code>가 처리 한다.</li>
</ul>
<h3 id="css-loader-변환-확인"><a href="#css-loader-변환-확인" class="headerlink" title="css-loader 변환 확인"></a>css-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><code>dist/main.js</code> 파일에 <code>background-color: green</code> 검색하면 css 코드가 자바스크립트로 변환된 것을 확인할 수 있다. </p>
<p><img src="/images/webpack/loader/loader_2.png" alt></p>
<h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p><code>css-loader</code>로 변경된 style sheet는 Dom에 추가되어야만 브라우져가 해석할 수 있다. <a href="https://github.com/webpack-contrib/style-loader" rel="external nofollow noopener noreferrer" target="_blank">style-loader</a>는 자바스크립트로 변경된 스타일을 동적으로 Dom 에 추가하는 로더이므로 <code>css-loader</code>와 <code>style-loader</code>는 함께 사용해야 된다.</p>
<h3 id="style-loader-설치"><a href="#style-loader-설치" class="headerlink" title="style-loader 설치"></a>style-loader 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D style-loader</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">            use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>rules.use</code>에 배열은 앞에서부터 순서대로 로더가 작동</p>
          </div>
<h3 id="style-loader-변환-확인"><a href="#style-loader-변환-확인" class="headerlink" title="style-loader 변환 확인"></a>style-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/loader/loader_3.png" alt></p>
<h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><p>webpack output에 파일을 옮겨주는 것이 <a href="https://github.com/webpack-contrib/file-loader" rel="external nofollow noopener noreferrer" target="_blank">file-loader</a>이다.</p>
<h3 id="file-loader-설치"><a href="#file-loader-설치" class="headerlink" title="file-loader 설치"></a>file-loader 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D file-loader</span><br></pre></td></tr></table></figure>
<h3 id="style-css-1"><a href="#style-css-1" class="headerlink" title="style.css"></a>style.css</h3><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./dist/bg.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.png$/</span>, <span class="comment">// .png 확장자로 마치는 모든 파일</span></span><br><span class="line">                loader: <span class="string">"file-loader"</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">"[name].[ext]?[hash]"</span>, <span class="comment">// 파일명 형식</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>publicPath</code>은 <code>file-loader</code>가 처리하는 파일 모듈로 사용할 때 앞에 추가되는 문자열</li>
<li><code>name</code>은 ‘bg.png?c1771da01a4975d381c2b5583293a075’ 형식으로 파일 변경 요청</li>
</ul>
<p><img src="/images/webpack/loader/loader_4.png" alt></p>
<h3 id="file-loader-변환-확인"><a href="#file-loader-변환-확인" class="headerlink" title="file-loader 변환 확인"></a>file-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/loader/loader_5.png" alt></p>
<h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>url-loader가 처리하는 옵션 중 fallback 기본값이 file-loader이다.<br>이미지를 Base64로 인코딩하여 문자열 형태로 소스에 넣어주는 형식으로 처리해 주는 게<a href="https://github.com/webpack-contrib/url-loader" rel="external nofollow noopener noreferrer" target="_blank">url-loader</a>이다.</p>
<h3 id="url-loader-설치"><a href="#url-loader-설치" class="headerlink" title="url-loader 설치"></a>url-loader 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D url-loader</span><br></pre></td></tr></table></figure>
<h3 id="app-js-1"><a href="#app-js-1" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span></span><br><span class="line"><span class="keyword">import</span> small <span class="keyword">from</span> <span class="string">'./small.png'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML = <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;img src="<span class="subst">$&#123;small&#125;</span>" /&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js-1"><a href="#webpack-config-js-1" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, <span class="comment">// .css 확장자로 끝나는 모든 파일</span></span><br><span class="line">                use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>], <span class="comment">// style-loader를 적용</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|svg|gif)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"url-loader"</span>, <span class="comment">// url 로더를 설정한다</span></span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">"[name].[ext]?[hash]"</span>, <span class="comment">// file-loader와 동일</span></span><br><span class="line">                        limit: <span class="number">100000</span> <span class="comment">// 100kb 미만 파일만 data url로 처리</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>`limit에 설정한 값에 따라 100kb 미만 파일은 Data url 형태로 변환.<br>아이콘처럼 사용 빈도수가 높은 이미지 파일을 사용하면 좋다.</p>
          </div>
<p><img src="/images/webpack/loader/loader_6.png" alt></p>
<h3 id="url-loader-변환-확인"><a href="#url-loader-변환-확인" class="headerlink" title="url-loader 변환 확인"></a>url-loader 변환 확인</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/loader/loader_7.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
<li><a href="https://webpack.js.org/concepts/loaders/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/loaders/</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>webpack loader</tag>
        <tag>webpack 로더</tag>
      </tags>
  </entry>
  <entry>
    <title>1. webpack entry/output</title>
    <url>/2020/06/04/webpack/setup/</url>
    <content><![CDATA[<hr>
<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>시작점(entry)으로부터 의존적인 모듈을 전부 찾아내서 하나의 결과물을 만들어 낸다.<br><a id="more"></a></p>
<h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><ul>
<li>node: v12.16.3</li>
<li>npm: 6.14.5</li>
<li>webpack: 4.43.0</li>
<li>webpack-cli: 3.3.11</li>
</ul>
<h2 id="모듈-구조"><a href="#모듈-구조" class="headerlink" title="모듈 구조"></a>모듈 구조</h2><p><img src="/images/webpack/setup/setup_1.png" alt></p>
<h2 id="webpack-설치"><a href="#webpack-설치" class="headerlink" title="webpack 설치"></a>webpack 설치</h2><p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a> 패키지와 웹팩 터미널 도구인 <a href="https://github.com/webpack/webpack-cli" rel="external nofollow noopener noreferrer" target="_blank">webpack-cli</a> 설치한다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D webpack webpack-cli</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ node_modules/.bin/webpack --<span class="built_in">help</span></span><br><span class="line">webpack-cli 3.3.11</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>webpack,  webpack-cli 정상적으로 설치가 되면 –help 명령어 실행 </p>
          </div>
<h2 id="index-html-생성"><a href="#index-html-생성" class="headerlink" title="index.html 생성"></a>index.html 생성</h2><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>&lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt;</code>은 npm 커스텀 명령어를 추가하면 생기는 파일이다.</p>
          </div>
<h2 id="app-js와-math-js-생성"><a href="#app-js와-math-js-생성" class="headerlink" title="app.js와 math js 생성"></a>app.js와 math js 생성</h2><p><img src="/images/webpack/setup/setup_2.png" alt></p>
<figure class="highlight javascript"><figcaption><span>math.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"./math.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(math.sum(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure>
<h2 id="webpack-config-js-생성"><a href="#webpack-config-js-생성" class="headerlink" title="webpack.config.js 생성"></a>webpack.config.js 생성</h2><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">"./src/app.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"[name].js"</span>,</span><br><span class="line">        path: path.resolve(<span class="string">"./dist"</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>mode: 웹팩의 실행 모드인 ‘development’ 문자열 사용</li>
<li>entry: 어플리케이션 시작점인 ‘./src/app.js’ 로 설정</li>
<li>output: 번들링한 결과물을 위치할 경로이다. (output.path는 절대 경로를 사용하기 때문에 node 코드 모듈인 path를 사용하여 처리하였다.)</li>
</ul>
<h2 id="package-json에-npm-커스텀-명령어-build-추가"><a href="#package-json에-npm-커스텀-명령어-build-추가" class="headerlink" title="package.json에 npm 커스텀 명령어 build 추가"></a>package.json에 npm 커스텀 명령어 build 추가</h2><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"frontend-dev-env"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.43.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.11"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="npm-커스텀-명령어-실행"><a href="#npm-커스텀-명령어-실행" class="headerlink" title="npm 커스텀 명령어 실행"></a>npm 커스텀 명령어 실행</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; webpack</span><br><span class="line"></span><br><span class="line">Hash: 5d24763a699d2f2ca80d</span><br><span class="line">Version: webpack 4.43.0</span><br><span class="line">Time: 68ms</span><br><span class="line">Built at: 2020-06-04 14:21:22</span><br><span class="line">  Asset      Size  Chunks             Chunk Names</span><br><span class="line">main.js  4.51 KiB    main  [emitted]  main</span><br><span class="line">Entrypoint main = main.js</span><br><span class="line">[./src/app.js] 66 bytes &#123;main&#125; [built]</span><br><span class="line">[./src/math.js] 49 bytes &#123;main&#125; [built]</span><br></pre></td></tr></table></figure>
<h3 id="dist-main-js-파일-생성-확인"><a href="#dist-main-js-파일-생성-확인" class="headerlink" title="./dist/main.js 파일 생성 확인"></a>./dist/main.js 파일 생성 확인</h3><p><img src="/images/webpack/setup/setup_3.png" alt></p>
<h3 id="index-html-브라우저-확인"><a href="#index-html-브라우저-확인" class="headerlink" title="index.html 브라우저 확인"></a>index.html 브라우저 확인</h3><p>DevTool을 이용해서 app.js에서 console.log에 결과값을 확인한다.</p>
<p><img src="/images/webpack/setup/setup_4.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
<li><a href="https://webpack.js.org/guides/getting-started/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/guides/getting-started/</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>webpack entry</tag>
        <tag>webpack output</tag>
      </tags>
  </entry>
  <entry>
    <title>3. webpack plugin</title>
    <url>/2020/06/10/webpack/plugin/</url>
    <content><![CDATA[<hr>
<p><a href="https://webpack.js.org/" rel="external nofollow noopener noreferrer" target="_blank">webpack</a>은 여러 개 파일을 하나의 파일로 합쳐주는 번들러(bundler)다.<br>플러그인(plugin)는 로더는 파일 단위로 처리하는 반면 플러그인은 번들 된 결과물을 처리한다.<br><a id="more"></a></p>
<h2 id="커스텀-플러그인-만들기"><a href="#커스텀-플러그인-만들기" class="headerlink" title="커스텀 플러그인 만들기"></a>커스텀 플러그인 만들기</h2><p>플러그인을 사용하기 전에 커스텀 플러그인을 만들어서 확인해 보자.</p>
<h3 id="customPlugin-js-생성"><a href="#customPlugin-js-생성" class="headerlink" title="customPlugin.js 생성"></a>customPlugin.js 생성</h3><figure class="highlight javascript"><figcaption><span>customPlugin.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.done.tap(<span class="string">"Custom Plugin"</span>, stats =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Hello World"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = CustomPlugin;</span><br></pre></td></tr></table></figure>
<ul>
<li>로더와 다르게 플러그인은 클래스로 작성해야 한다. 플로그인 작업이 완료되는 시점에 <code>console.log(&quot;Hello World&quot;);</code> 함수 호출</li>
</ul>
<h3 id="webpack-config-js에-추가"><a href="#webpack-config-js에-추가" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CustomPlugin = <span class="built_in">require</span>(<span class="string">"./src/customPlugin.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CustomPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="커스텀-플러그인-실행-결과-확인"><a href="#커스텀-플러그인-실행-결과-확인" class="headerlink" title="커스텀 플러그인 실행 결과 확인"></a>커스텀 플러그인 실행 결과 확인</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_1.png" alt></p>
<h2 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h2><p><a href="https://webpack.js.org/plugins/banner-plugin/" rel="external nofollow noopener noreferrer" target="_blank">BannerPlugin</a>은 웹팩으로 빌드 한 결과물에 정보를 입력할 수 있다.</p>
<h3 id="webpack-config-js에-추가-1"><a href="#webpack-config-js에-추가-1" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> customPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">            banner: <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                <span class="string">`commitVersion: <span class="subst">$&#123;childProcess.execSync(<span class="string">"git rev-parse --short HEAD"</span>)&#125;</span>`</span> +</span><br><span class="line">                <span class="string">`Build Date: <span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString()&#125;</span>\n`</span> +</span><br><span class="line">                <span class="string">`Author: <span class="subst">$&#123;childProcess.execSync(<span class="string">"git config user.name"</span>)&#125;</span>`</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>빌드 날짜, 커밋 해쉬, 빌드 한 유저 정보 추가</li>
</ul>
<h3 id="BannerPlugin-빌드"><a href="#BannerPlugin-빌드" class="headerlink" title="BannerPlugin 빌드"></a>BannerPlugin 빌드</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_2.png" alt></p>
<ul>
<li><code>./dist/main.js</code>에 BannerPlugin을 이용한 정보를 확인</li>
</ul>
<h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p><a href="https://webpack.js.org/plugins/define-plugin/" rel="external nofollow noopener noreferrer" target="_blank">DefinePlugin</a>은 개발 환경과 운영 환경의 API서버 주소가 다르기 때문에 빌드를 할 때 명령어로 개발 관련, 운영 관련 환경으로 빌드를 하게 한다.</p>
<h3 id="webpack-config-js에-추가-2"><a href="#webpack-config-js에-추가-2" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">"v.1.2.3"</span>),</span><br><span class="line">            PRODUCTION : process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>) : <span class="built_in">JSON</span>.stringify(<span class="literal">false</span>),</span><br><span class="line">            MAX_COUNT: <span class="built_in">JSON</span>.stringify(<span class="number">999</span>),</span><br><span class="line">            <span class="string">"api.domain"</span>: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="built_in">JSON</span>.stringify(<span class="string">"http://prod.api.domain.com"</span>) : <span class="built_in">JSON</span>.stringify(<span class="string">"http://dev.api.domain.com"</span>),</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>process.env.NODE_ENV 웹팩 빌드 시 설정한 값에 따라 운영, 개발 환경 변경</li>
</ul>
<h3 id="app-js에-추가"><a href="#app-js에-추가" class="headerlink" title="app.js에 추가"></a>app.js에 추가</h3><figure class="highlight javascript"><figcaption><span>app.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(VERSION) <span class="comment">// "v.1.2.3"</span></span><br><span class="line"><span class="built_in">console</span>.log(PRODUCTION) <span class="comment">// true or false</span></span><br><span class="line"><span class="built_in">console</span>.log(MAX_COUNT) <span class="comment">// 999</span></span><br><span class="line"><span class="built_in">console</span>.log(api.domain) <span class="comment">// "http://prod.api.domain.com" or "http://dev.api.domain.com"</span></span><br></pre></td></tr></table></figure>
<h3 id="DefinePlugin-빌드"><a href="#DefinePlugin-빌드" class="headerlink" title="DefinePlugin 빌드"></a>DefinePlugin 빌드</h3><ol>
<li>운영 빌드</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_3.png" alt></p>
<ol start="2">
<li>개발 빌드</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_4.png" alt></p>
<h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p><a href="https://github.com/jantimon/html-webpack-plugin/" rel="external nofollow noopener noreferrer" target="_blank">HtmlWebpackPlugin</a>은 빌드 타입 값을 넣거나 코드를 압축하여 HTML 파일을 후처리하는데 사용한다.</p>
<h3 id="HtmlWebpackPlugin-설치"><a href="#HtmlWebpackPlugin-설치" class="headerlink" title="HtmlWebpackPlugin 설치"></a>HtmlWebpackPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D html-webpack-plugin</span><br></pre></td></tr></table></figure>
<h3 id="src-index-html-수정"><a href="#src-index-html-수정" class="headerlink" title="src/index.html 수정"></a>src/index.html 수정</h3><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;<span class="name">%=</span> <span class="attr">env</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 로딩 스크립트 제거 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="../dist/main.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>title</code>태그에  <code>&lt;%= env %&gt;</code> ejs 문법을 이용하여 웹팩에 빌드 한 결과물을 자동으로 로딩하여 코드에 주입해 준다.</li>
</ul>
<h3 id="webpack-config-js에-추가-3"><a href="#webpack-config-js에-추가-3" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">"./src/index.html"</span>, <span class="comment">// 템플릿 경로를 지정</span></span><br><span class="line">            templateParameters: &#123; <span class="comment">// 템플릿에 주입할 파라매터 변수 지정</span></span><br><span class="line">                env: process.env.NODE_ENV === <span class="string">"development"</span> ? <span class="string">"(개발용)"</span> : <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            minify: process.env.NODE_ENV === <span class="string">"production"</span> ? &#123;</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 빈칸 제거</span></span><br><span class="line">                removeComments: <span class="literal">true</span>, <span class="comment">// 주석 제거</span></span><br><span class="line">            &#125; : <span class="literal">false</span>,</span><br><span class="line">            hash: <span class="literal">true</span>, <span class="comment">// 정적 파일을 불러올때 쿼리문자열에 웹팩 해쉬값을 추가</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HtmlWebpackPlugin-빌드"><a href="#HtmlWebpackPlugin-빌드" class="headerlink" title="HtmlWebpackPlugin 빌드"></a>HtmlWebpackPlugin 빌드</h3><ol>
<li>운영 빌드</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_5.png" alt></p>
<p><img src="/images/webpack/plugin/plugin_7.png" alt></p>
<ul>
<li>빈칸 제거, 주석 제거, 정적 파일 로딩 시 해쉬값을 추가</li>
</ul>
<ol start="2">
<li>개발 빌드</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>빌드 된 결과물은 <code>./dist/index.html</code>에서 확인하면 된다.</p>
          </div>
<p><img src="/images/webpack/plugin/plugin_6.png" alt></p>
<h2 id="CleanWebpackPlugin"><a href="#CleanWebpackPlugin" class="headerlink" title="CleanWebpackPlugin"></a>CleanWebpackPlugin</h2><p><a href="https://github.com/johnagan/clean-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">CleanWebpackPlugin</a>은 빌드 이전 결과물을 삭제하는 플러그인이다.</p>
<h3 id="CleanWebpackPlugin-설치"><a href="#CleanWebpackPlugin-설치" class="headerlink" title="CleanWebpackPlugin 설치"></a>CleanWebpackPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D clean-webpack-plugin</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-추가-4"><a href="#webpack-config-js에-추가-4" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CleanWebpackPlugin-빌드"><a href="#CleanWebpackPlugin-빌드" class="headerlink" title="CleanWebpackPlugin 빌드"></a>CleanWebpackPlugin 빌드</h3><ul>
<li>빌드 전</li>
</ul>
<p><img src="/images/webpack/plugin/plugin_8.png" alt></p>
<ul>
<li>빌드 후</li>
</ul>
<p><img src="/images/webpack/plugin/plugin_9.png" alt></p>
<div class="note info no-icon">
            <p>빌드 후 <code>small.png</code>파일에 삭제된 것을 확인할 수 있다.</p>
          </div>
<h2 id="MiniCssExtractPlugin"><a href="#MiniCssExtractPlugin" class="headerlink" title="MiniCssExtractPlugin"></a>MiniCssExtractPlugin</h2><p><a href="https://github.com/webpack-contrib/mini-css-extract-plugin" rel="external nofollow noopener noreferrer" target="_blank">MiniCssExtractPlugin</a>은 하나의 자바스크립트의 결과물로 만드는 것이 아니라, 스타일시트 코드만 뽑아 CSS 파일을 만들어 주는 플러그인이다. </p>
<h3 id="MiniCssExtractPlugin-설치"><a href="#MiniCssExtractPlugin-설치" class="headerlink" title="MiniCssExtractPlugin 설치"></a>MiniCssExtractPlugin 설치</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -D mini-css-extract-plugin</span><br></pre></td></tr></table></figure>
<h3 id="webpack-config-js에-추가-5"><a href="#webpack-config-js에-추가-5" class="headerlink" title="webpack.config.js에 추가"></a>webpack.config.js에 추가</h3><figure class="highlight javascript"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">                        ? MiniCssExtractPlugin.loader <span class="comment">// 운영 환경</span></span><br><span class="line">                        : <span class="string">"style-loader"</span>, <span class="comment">// 개발 환경</span></span><br><span class="line">                        <span class="string">"css-loader"</span></span><br><span class="line">                ],</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...(</span><br><span class="line">            process.env.NODE_ENV === <span class="string">"production"</span></span><br><span class="line">                ? [ <span class="keyword">new</span> MiniCssExtractPlugin(&#123;<span class="attr">filename</span>: <span class="string">"[name].css"</span>&#125;) ]</span><br><span class="line">                : []</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>운영환경일 경우에만 css 파일을 추출하는 플러그인을 적용하였다. </li>
</ul>
<h3 id="MiniCssExtractPlugin-빌드"><a href="#MiniCssExtractPlugin-빌드" class="headerlink" title="MiniCssExtractPlugin 빌드"></a>MiniCssExtractPlugin 빌드</h3><ol>
<li>운영 빌드</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ NODE_ENV=production npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_10.png" alt></p>
<p><img src="/images/webpack/plugin/plugin_12.png" alt></p>
<div class="note info no-icon">
            <p><code>./dist/main.css</code>가 생성되었고 <code>index.html</code>에 파일을 로딩하는 코드를 추가</p>
          </div>
<ol start="2">
<li>개발 빌드</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ NODE_ENV=development npm run build</span><br></pre></td></tr></table></figure>
<p><img src="/images/webpack/plugin/plugin_11.png" alt></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/frontend-dev-env.git" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD#</a></li>
<li><a href="https://webpack.js.org/concepts/plugins/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/concepts/plugins/</a></li>
<li><a href="https://webpack.js.org/contribute/writing-a-plugin/" rel="external nofollow noopener noreferrer" target="_blank">https://webpack.js.org/contribute/writing-a-plugin/</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>webpack plugin</tag>
        <tag>webpack 플러그인</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 2. 람다 표현식</title>
    <url>/2019/06/03/java/java8inaction/chapter2/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. 람다 표현식을 어떻게 만드는지, 어떻게 사용하는지, 어떻게 코드를 간결하게 만들수 있는지 설명한다.<br><a id="more"></a></p>
<h2 id="람다란-무엇인가"><a href="#람다란-무엇인가" class="headerlink" title="람다란 무엇인가?"></a>람다란 무엇인가?</h2><p>람다 표현식은 메서드로 전달할 수 있는 익명 함수를 단수화한 것이라고 할 수 있다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Apple&gt; byWeight = <span class="keyword">new</span> Comparator&lt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple a1, Apple a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a1.getColor().compareTo(a2.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>람다를 이용한 코드<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparator&lt;Apple&gt; byWeightLambda = (Apple a1, Apple a2) -&gt; a1.getColor().compareTo(a2.getColor());</span><br></pre></td></tr></table></figure></p>
<p>람다를 이용한 코드가 더 간결해졌다.</p>
<ol>
<li><code>(Apple a1, Apple a2)</code>는 람다 파라미터</li>
<li><code>-&gt;</code>는 화살표</li>
<li><code>a1.getColor().compareTo(a2.getColor());</code>는 람다 바디</li>
</ol>
<h3 id="람다-예제표"><a href="#람다-예제표" class="headerlink" title="람다 예제표"></a>람다 예제표</h3><table>
<thead>
<tr>
<th>사용 사례</th>
<th>람다 예제</th>
</tr>
</thead>
<tbody>
<tr>
<td>불린 표현식</td>
<td>(List<string> list) -&gt; list.isEmpty()</string></td>
</tr>
<tr>
<td>객체 생성</td>
<td>() -&gt; new Apple(10)</td>
</tr>
<tr>
<td>객체에서 소비</td>
<td>(Apple a) -&gt; {System.out.println(a.getWeight());}</td>
</tr>
<tr>
<td>객체에서 선택/추출</td>
<td>(String s) -&gt; s.length()</td>
</tr>
<tr>
<td>두 값을 조합</td>
<td>(int a, intb) -&gt; a * b</td>
</tr>
<tr>
<td>두 객체 비교</td>
<td>(Apple a1, Apple a2) -&gt; a1.getColor().compareTo(a2.getColor())</td>
</tr>
</tbody>
</table>
<h2 id="어떻게-람다를-사용할까"><a href="#어떻게-람다를-사용할까" class="headerlink" title="어떻게 람다를 사용할까?"></a>어떻게 람다를 사용할까?</h2><p>함수형 인터페이스라는 문맥에서 람다표현식을 사용할 수 있다.</p>
<h3 id="함수형-인터페이스"><a href="#함수형-인터페이스" class="headerlink" title="함수형 인터페이스"></a>함수형 인터페이스</h3><p>함수형 인터페이스는 정확히 하나의 추상 메서드를 지정하는 인터페이스이다. 자바 API의 함수형 인터페이스 Comparator, Runnable 등이 있다.<br><figure class="highlight java"><figcaption><span>Comparator.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>Runnable.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>오직 하나의 추상 메서드를 가진 함수 인터페이스 Runnable을 람다로 표현 했다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runnable run = () -&gt; System.out.println(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="함수-디스크립터"><a href="#함수-디스크립터" class="headerlink" title="함수 디스크립터"></a>함수 디스크립터</h3><p>람다 표현식의 시그너처를 서술하는 메서드를 함수 디스크립터(function descriptor)라고 부른다. 예로 <code>(Apple) -&gt; boolean</code>의 <code>test</code>메서드의 시그니처는 <code>boolean</code>이다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;Apple&gt; a = (Apple a) -&gt; <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="람다-활용-실행-어라운드-패턴"><a href="#람다-활용-실행-어라운드-패턴" class="headerlink" title="람다 활용: 실행 어라운드 패턴"></a>람다 활용: 실행 어라운드 패턴</h2><p>실제 자원을 처리하는 코드를 설정과 정리 두 과정이 둘러싸인 형태를 실행 어라운드 패턴이라고 부른다.</p>
<blockquote>
<p>자바 7에 새로 추가된 try-with-resources 구문을 사용하면 명시적으로 닫을 필요가 없다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">processFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"data.txt"</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="1단계-함수형-인터페이스를-이용해서-동작-전달"><a href="#1단계-함수형-인터페이스를-이용해서-동작-전달" class="headerlink" title="1단계: 함수형 인터페이스를 이용해서 동작 전달"></a>1단계: 함수형 인터페이스를 이용해서 동작 전달</h3><p>시그니처와 일치하는 함수형 인터페이스 생성<br><img src="/images/java/java8inaction/chapter3_1.png" alt></p>
<figure class="highlight java"><figcaption><span>BufferedReaderProcessor.java </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BufferedReaderProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">process</span><span class="params">(BufferedReader b)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2단계-동작-실행"><a href="#2단계-동작-실행" class="headerlink" title="2단계: 동작 실행!"></a>2단계: 동작 실행!</h3><p><code>BuffrerdReaderProcessor</code>에 정의된 process 메서드의 시그니처(<code>BufferedReader -&gt; String</code>)와 일치하는 람다를 전달할 수 있다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">processFile</span><span class="params">(BufferedReaderProcessor p)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"data.txt"</span>))) &#123;</span><br><span class="line">        <span class="keyword">return</span> p.process(br);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3단계-람다-전달"><a href="#3단계-람다-전달" class="headerlink" title="3단계: 람다 전달"></a>3단계: 람다 전달</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String result = processFile((BufferedReader br) -&gt; br.readLine() + br.readLine());</span><br></pre></td></tr></table></figure>
<h2 id="함수형-인터페이스-사용"><a href="#함수형-인터페이스-사용" class="headerlink" title="함수형 인터페이스 사용"></a>함수형 인터페이스 사용</h2><p>자바8 라이브러리 <code>java.util.function</code> 패키지로 여러 가지 새로운 함수형 인터페이스를 제공한다.</p>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p><code>java.util.function.Predicate&lt;T&gt;</code>인터페이스는 test라는 추상 메서드를 정의하면 test는 제네릭 형식 T의 객체를 인수로 받아 불린을 반환한다.<br><figure class="highlight java"><figcaption><span>Predicate.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>LambdaPredicate.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaPredicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Predicate&lt;String&gt; nonEmptyStringPredicate = (String s) -&gt; !s.isEmpty();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOfString = Arrays.asList(<span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">""</span>);</span><br><span class="line">        List&lt;String&gt; nonEmpty = filter(listOfString, nonEmptyStringPredicate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">filter</span><span class="params">(List&lt;T&gt; list, Predicate&lt;T&gt; p)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.test(s)) &#123;</span><br><span class="line">                results.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><p><code>java.util.function.Consumer&lt;T&gt;</code>인터페이스는 제네릭 형식 T 객체를 받아서 void를 반환 하는 accept라는 추상 메서드를 정의한다.<br><figure class="highlight java"><figcaption><span>Consumer.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>LambdaCunsumer.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaCunsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        forEach(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>), (Integer i) -&gt; System.out.println(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(List&lt;T&gt; list, Consumer&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T i : list) &#123;</span><br><span class="line">            c.accept(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p><code>java.util.function.Function&lt;T, R&gt;</code>인터페이스는 제네릭 형식 T를 인수로 받아서 제네릭 형식 R 객체를 반환하는 apply라는 추상 메서드를 정의한다.<br><figure class="highlight java"><figcaption><span>Function.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>LambdasFunction.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdasFunction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; l = map(Arrays.asList(<span class="string">"lambdas"</span> ,<span class="string">"in"</span>, <span class="string">"action"</span>), (String s) -&gt; s.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; <span class="function">List&lt;R&gt; <span class="title">map</span><span class="params">(List&lt;T&gt; list, Function&lt;T, R&gt; f)</span> </span>&#123;</span><br><span class="line">        List&lt;R&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (T s : list) &#123;</span><br><span class="line">            result.add(f.apply(s));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="형식-검사-형식-추론-제약"><a href="#형식-검사-형식-추론-제약" class="headerlink" title="형식 검사, 형식 추론, 제약"></a>형식 검사, 형식 추론, 제약</h2><p>람다 표현식 자체에는 람다가 어떤 함수형 인터페이스를 구현하는지의 정보가 포함되어 있지 않기 때문에, 람다의 실제 형식을 파악해야 한다.</p>
<h3 id="형식-검사"><a href="#형식-검사" class="headerlink" title="형식 검사"></a>형식 검사</h3><p>람다가 사용되는 콘테스트(context)를 이용해서 람다의 형식(type)을 추론할 수 있다. 어떤 콘텍스트에서 기대되는 람다 표현식의 형식을 대상 형식(target type)이라고 한다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Apple&gt; heavierThan150g = filter(inventory, (Apple a) -&gt; a.getWeight() &gt; <span class="number">150</span>);</span><br></pre></td></tr></table></figure></p>
<h4 id="형식-확인"><a href="#형식-확인" class="headerlink" title="형식 확인"></a>형식 확인</h4><ol>
<li>filter 메서드의 선언을 확인한다.</li>
<li>filter 메서드는 두 번재 파라미터로 <code>Predicate&lt;Apple&gt;</code> 형식(대상 형식)을 기대한다.</li>
<li><code>Predicate&lt;Apple&gt;</code>은 test라는 한 개의 추상 메서드를 정의하는 함수형 인터페이스다.</li>
<li>test 메서드는 Apple을 받아 boolean을 반환하는 함수 디스크립터를 묘사한다.</li>
<li>filter 메서드로 전달된 인수는 이와 같은 요구사항을 만족해야 한다.</li>
</ol>
<h3 id="형식-추론"><a href="#형식-추론" class="headerlink" title="형식 추론"></a>형식 추론</h3><p>자바 컴파일러는 람다 표현식이 사용된 콘텍스트(대상 형식)를 이용해서 람다 표현식과 관련된 함수형 인터페이스를 추론한다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 형식을 추론 하지 않음</span></span><br><span class="line">Comparator&lt;Apple&gt; c = (Apple a1, Apple a2) -&gt; a1.getColor().compareTo(a2.getColor());</span><br><span class="line"><span class="comment">// 형식을 추론함</span></span><br><span class="line">Comparator&lt;Apple&gt; c2 = (a1, a2) -&gt; a1.getColor().compareTo(a2.getColor());</span><br></pre></td></tr></table></figure></p>
<h3 id="직역-변수-사용"><a href="#직역-변수-사용" class="headerlink" title="직역 변수 사용"></a>직역 변수 사용</h3><p>자유 변수(파라미터로 넘겨진 변수가 아닌 외부에서 정의된 변수)를 활용 하는 것을 람다 캡처링(capturing lambda)라고 부른다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> portNumber = <span class="number">1337</span>;</span><br><span class="line">Runnable r = () -&gt; System.out.println(portNumber);</span><br></pre></td></tr></table></figure></p>
<p>람다는 한번 만 할당할 수 있는 지역 변수를 캡처할 수 있다.(인스턴스 변수 캡처는 final 지역 변수 this를 캡처하는 것과 마찬가지다.)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> portNumber = <span class="number">1337</span>;</span><br><span class="line">Runnable r = () -&gt; System.out.println(portNumber);</span><br><span class="line">portNumber = <span class="number">1337</span>;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>컴파일 에러 발생</p>
</blockquote>
<h2 id="메서드-레퍼런스"><a href="#메서드-레퍼런스" class="headerlink" title="메서드 레퍼런스"></a>메서드 레퍼런스</h2><p>메서드 레퍼런스를 이용하면 기존의 메서드 정의를 재활용해서 람다처럼 전달할 수 있다. </p>
<h3 id="메서드-레퍼런스-요약"><a href="#메서드-레퍼런스-요약" class="headerlink" title="메서드 레퍼런스 요약"></a>메서드 레퍼런스 요약</h3><table>
<thead>
<tr>
<th>람다</th>
<th>메서드 레퍼런스 단축 표현</th>
</tr>
</thead>
<tbody>
<tr>
<td>(Apple a) -&gt; a.getWeight()</td>
<td>Apple::getWeight</td>
</tr>
<tr>
<td>() -&gt; Thread.currentThread().dumpStack()</td>
<td>Thread.currentThread()::dumpStack</td>
</tr>
<tr>
<td>(str, i) -&gt; str.substring(i)</td>
<td>String::substring</td>
</tr>
<tr>
<td>(String s) -&gt; System.out.println(s)</td>
<td>System.out::println</td>
</tr>
</tbody>
</table>
<h2 id="람다-메서드-레퍼런스-활용하기"><a href="#람다-메서드-레퍼런스-활용하기" class="headerlink" title="람다, 메서드 레퍼런스 활용하기"></a>람다, 메서드 레퍼런스 활용하기</h2><p>동작 파라미터, 익명 클래스, 람다 표현식, 메서드 레퍼런스 예제로 확인 한다.</p>
<h3 id="1단계-코드-전달"><a href="#1단계-코드-전달" class="headerlink" title="1단계: 코드 전달"></a>1단계: 코드 전달</h3><p>자바8의 List API에서 정렬 메서드(sort)를 제공해준다. 2개의 값을 받아 비교하는 코드를 작성 하면 sort의 동작은 파라미터화 된다.<br><figure class="highlight java"><figcaption><span>AppleComparator.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Apple</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple a1, Apple a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a1.getColor().compareTo(a2.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort(<span class="keyword">new</span> AppleComparator());</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br></pre></td></tr></table></figure></p>
<h3 id="2단계-익명-클래스-사용"><a href="#2단계-익명-클래스-사용" class="headerlink" title="2단계: 익명 클래스 사용"></a>2단계: 익명 클래스 사용</h3><figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort(<span class="keyword">new</span> Comparator&lt;Apple&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Apple a1, Apple a2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a1.getColor().compareTo(a2.getColor());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br></pre></td></tr></table></figure></p>
<h3 id="3단계-람다-표현식-사용"><a href="#3단계-람다-표현식-사용" class="headerlink" title="3단계: 람다 표현식 사용"></a>3단계: 람다 표현식 사용</h3><figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort((Apple a1, Apple a2) -&gt; a1.getColor().compareTo(a2.getColor()));</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br></pre></td></tr></table></figure></p>
<p>형식을 추론<br><figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort((a1, a2) -&gt; a1.getColor().compareTo(a2.getColor()));</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br></pre></td></tr></table></figure></p>
<p>정적 메서드 <code>comparing</code> 사용<br> <figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort(Comparator.comparing((a1) -&gt; a1.getColor()));</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br></pre></td></tr></table></figure></p>
<h3 id="4단계-메서드-레퍼런스-사용"><a href="#4단계-메서드-레퍼런스-사용" class="headerlink" title="4단계: 메서드 레퍼런스 사용"></a>4단계: 메서드 레퍼런스 사용</h3> <figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort(Comparator.comparing(Apple::getColor));</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br></pre></td></tr></table></figure></p>
<h2 id="람다-표현식을-조합할-수-있는-유용한-메서드"><a href="#람다-표현식을-조합할-수-있는-유용한-메서드" class="headerlink" title="람다 표현식을 조합할 수 있는 유용한 메서드"></a>람다 표현식을 조합할 수 있는 유용한 메서드</h2><p>자바 API의 몇몇 함수형 인터페이스는 다양한 유틸리티 메서드를 포함한다. <code>Comparator</code>, <code>Predicate</code>같은 항수형 인터페이스는 람다 표현식을 조합할 수 있도록 유틸리티 메서드를 제공 한다. </p>
<h3 id="Comparator-조합"><a href="#Comparator-조합" class="headerlink" title="Comparator 조합"></a>Comparator 조합</h3><h4 id="역정렬"><a href="#역정렬" class="headerlink" title="역정렬"></a>역정렬</h4><p>인터페이스 자체에서 조어진 비교자의 순서를 뒤바꾸는 <code>reverse</code>라는 디폴트 메서드를 제공한다.<br> <figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">160</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort(Comparator.comparing(Apple::getColor).reversed());</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">160</span>, color=green)</span><br></pre></td></tr></table></figure></p>
<h4 id="Comparator-연결"><a href="#Comparator-연결" class="headerlink" title="Comparator 연결"></a>Comparator 연결</h4><p>2개의 값을 비교 할때 같은 값이 있으면, 다른 값으로 정렬하는 <code>thenComparing</code>을 이용하면 된다. 즉, 색깔을 내림차순으로 정렬하고 같은 색깔(red)이 있으면, 무게로 정렬 한다.<br> <figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">110</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"red"</span>));</span><br><span class="line">        inventory.sort(Comparator.comparing(Apple::getColor)</span><br><span class="line">                    .reversed()</span><br><span class="line">                    .thenComparing(Apple::getWeight));</span><br><span class="line"></span><br><span class="line">        inventory.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple(weight=<span class="number">100</span>, color=white)</span><br><span class="line">Apple(weight=<span class="number">100</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">170</span>, color=red)</span><br><span class="line">Apple(weight=<span class="number">110</span>, color=green)</span><br></pre></td></tr></table></figure></p>
<h3 id="Predicate-조합"><a href="#Predicate-조합" class="headerlink" title="Predicate 조합"></a>Predicate 조합</h3><p>Predicate 인터페이스는 복잡한 프레디케이트를 만들 수 있도록 <code>negate</code>, <code>and</code>, <code>or</code> 세 가지 메서드를 제공한다.</p>
<h4 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h4><p>기존 프레디케이트 객체의 결과를 반전시킨 객체를 만든다.<br> <figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">110</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"red"</span>));</span><br><span class="line">        Predicate&lt;Apple&gt; appleGreenTrue = (Apple apple) -&gt; <span class="string">"green"</span>.equals(apple.getColor());</span><br><span class="line">        inventory.forEach((Apple apple) -&gt; System.out.println(appleGreenTrue.test(apple)));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Predicate&lt;Apple&gt; appleGreenFalse = appleGreenTrue.negate();</span><br><span class="line">        inventory.forEach((Apple apple) -&gt; System.out.println(appleGreenFalse.test(apple)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line">------------------------------------</span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<h4 id="and"><a href="#and" class="headerlink" title="and"></a>and</h4><p><code>&amp;&amp;</code>와 같은 조건<br><figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">110</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"red"</span>));</span><br><span class="line">        Predicate&lt;Apple&gt; redAndHeavy = appleGreenTrue.and((Apple apple) -&gt; apple.getWeight() &gt; <span class="number">90</span>);</span><br><span class="line">        inventory.forEach((Apple apple) -&gt; System.out.println(redAndHeavy.test(apple)));</span><br><span class="line">        inventory.forEach((Apple apple) -&gt; System.out.println(redAndHeavy.test(apple)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<h4 id="or"><a href="#or" class="headerlink" title="or"></a>or</h4><p><code>||</code>와 같은 조건<br><figure class="highlight java"><figcaption><span>Lambdas.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambdas</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Apple&gt; inventory = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"white"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">110</span>, <span class="string">"green"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">170</span>, <span class="string">"red"</span>)</span><br><span class="line">                , <span class="keyword">new</span> Apple(<span class="number">100</span>, <span class="string">"red"</span>));</span><br><span class="line">        Predicate&lt;Apple&gt; redAndHeavyOrGreen = appleGreenTrue.and((Apple apple) -&gt; apple.getWeight() &gt; <span class="number">90</span>)</span><br><span class="line">                                                            .or((Apple apple) -&gt; <span class="string">"green"</span>.equals(apple.getColor()));</span><br><span class="line">        inventory.forEach((Apple apple) -&gt; System.out.println(redAndHeavyOrGreen.test(apple)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter2" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 6. 스트림으로 데이터 수집</title>
    <url>/2019/07/06/java/java8inaction/chapter6/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. Collectors 클래스로 컬렉션을 만들고 사용하는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="리듀싱과-요약"><a href="#리듀싱과-요약" class="headerlink" title="리듀싱과 요약"></a>리듀싱과 요약</h2><h3 id="요약-연산"><a href="#요약-연산" class="headerlink" title="요약 연산"></a>요약 연산</h3><h4 id="summingXXX"><a href="#summingXXX" class="headerlink" title="summingXXX"></a>summingXXX</h4><p><code>Collectors</code> 클래스는 <code>Collectors.summingInt</code> 라는 특별한 요약 메서드를 제공한다. 각 리스트에 선택된 값들을 합한 값으로 리턴한다.<br><figure class="highlight java"><figcaption><span>Dish.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123;</span><br><span class="line">        MEAT, FISH, OTHER</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dish&gt; menu =</span><br><span class="line">            Arrays.asList( <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.FISH),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">```java Reducing.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalCalories = Dish.menu.stream().collect(summingInt(dish -&gt; dish.getCalories()));</span><br><span class="line">        System.out.println(totalCalories);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4300</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>Collectors.summingLong</code>과 <code>Collectors.summingDouble</code>도 <code>Collectors.summingInt</code>와 같은 방식으로 동작한다. </p>
</blockquote>
<h4 id="averagingXXX"><a href="#averagingXXX" class="headerlink" title="averagingXXX"></a>averagingXXX</h4><p>평균값 계산 등의 연산도 요약 기능으로 제공된다.<br><figure class="highlight java"><figcaption><span>Reducing.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalCalories = Dish.menu.stream().collect(summingInt(dish -&gt; dish.getCalories()));</span><br><span class="line">        System.out.println(totalCalories);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> avgCalories = Dish.menu.stream().collect(averagingInt(dish -&gt; dish.getCalories()));</span><br><span class="line">        System.out.println(avgCalories);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">477.77777777777777</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>averagingInt</code>, <code>averagingLong</code>, <code>averagingDouble</code> 등으로 다양한 형식으로 이루어진 숫자 집합의 평균을 계산할 수있다.</p>
</blockquote>
<h3 id="문자열-연결"><a href="#문자열-연결" class="headerlink" title="문자열 연결"></a>문자열 연결</h3><p>컬렉터에 <code>joining</code> 팩토리 메서드를 이용하면 스트림의 각 객체에 <code>toString</code> 메서드를 호출해서 추출한 모든 문자열을 하나의 문자열로 연결해서 반환한다. <code>joining</code> 메서드는 내부적으로 <code>Stringbuilder</code>를 이용해서 문자열을 하나로 만든다.<br><figure class="highlight java"><figcaption><span>Reducing.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String shortMenu = Dish.menu.stream().map(dish -&gt; dish.getName()).collect(joining(<span class="string">", "</span>));</span><br><span class="line">        System.out.println(shortMenu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon</span><br></pre></td></tr></table></figure></p>
<h3 id="범용-리듀싱-요약-연산"><a href="#범용-리듀싱-요약-연산" class="headerlink" title="범용 리듀싱 요약 연산"></a>범용 리듀싱 요약 연산</h3><p>범용 <code>Collectors.reducing</code>으로 지금까지 살펴본 모든 컬렉터를 <code>reducing</code> 팩토리 메서드로도 정의 할 수 있다.<br><figure class="highlight java"><figcaption><span>Reducing.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> reducingTotalCalories = Dish.menu.stream().collect(reducing(<span class="number">0</span>, dish -&gt; dish.getCalories(), (i, j) -&gt; i + j));</span><br><span class="line">        System.out.println(reducingTotalCalories);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4300</span></span><br></pre></td></tr></table></figure></p>
<p><code>reducing</code>은 세 개의 인수를 받는다.</p>
<ol>
<li>첫 번째 인수는 리듀싱 연산의 시작값이거나 스트림에 인수가 없을 때는 반환값이다(숫자 합계에서는 인수가 없을 때 반환값으로 0이 적합하다).</li>
<li>두 번째 인수는 데이터 값을 정수로 변환할 떄 사용한 변환 함수다.</li>
<li>세 번째 인수는 같은 종류의 두 항목을 하나의 값으로 더하는 <code>BinaryOperator</code>다. 위에서는 두 개의 <code>int</code>가 사용 되었다.</li>
</ol>
<p>한 개의 인수를 가진 <code>reducing</code> 가장 높은 값들을 찾을수 있다.<br><figure class="highlight java"><figcaption><span>Reducing.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Dish&gt; mostCaloriesDish = Dish.menu.stream().collect(reducing((d1, d2) -&gt; d1.getCalories() &gt; d2.getCalories() ? d1 : d2));</span><br><span class="line">        System.out.println(mostCaloriesDish);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional[Dish(name=pork, vegetarian=<span class="keyword">false</span>, calories=<span class="number">800</span>, type=MEAT)]</span><br></pre></td></tr></table></figure></p>
<h2 id="그룹화"><a href="#그룹화" class="headerlink" title="그룹화"></a>그룹화</h2><p>데이터 집합을 하나 이상의 특성으로 분류해서 그룹화하는 연산도 데이터베이스에서 많이 수행되는 작업이다. 자바8의 함수형을 이용하면 가독성 있는 한 줄의 코드로 그룹화를 구현할 수 있다.</p>
<h3 id="다수준-그룹화"><a href="#다수준-그룹화" class="headerlink" title="다수준 그룹화"></a>다수준 그룹화</h3><p>두 인수를 받는 팩토리 메서드 <code>Collectors.groupingBy</code>를 이용해서 항목을 다수준으로 그룹화 할 수 있다.<br><figure class="highlight java"><figcaption><span>Grouping.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grouping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> CaloricLevel &#123; DIET, NORMAL, FAT &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;Dish.Type, Map&lt;CaloricLevel, List&lt;Dish&gt;&gt;&gt; dishesByCaloricLevel = Dish.menu.stream().collect(</span><br><span class="line">                groupingBy(dish -&gt; dish.getType(),</span><br><span class="line">                        groupingBy(dish -&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">400</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> CaloricLevel.DIET;</span><br><span class="line">                            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dish.getCalories() &lt;= <span class="number">700</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> CaloricLevel.NORMAL;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> CaloricLevel.FAT;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">        System.out.println(dishesByCaloricLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;MEAT=&#123;DIET=[Dish(name=chicken, vegetarian=<span class="keyword">false</span>, calories=<span class="number">400</span>, type=MEAT)], FAT=[Dish(name=pork, vegetarian=<span class="keyword">false</span>, calories=<span class="number">800</span>, type=MEAT)], NORMAL=[Dish(name=beef, vegetarian=<span class="keyword">false</span>, calories=<span class="number">700</span>, type=MEAT)]&#125;</span><br><span class="line">,FISH=&#123;DIET=[Dish(name=prawns, vegetarian=<span class="keyword">false</span>, calories=<span class="number">400</span>, type=FISH)], NORMAL=[Dish(name=salmon, vegetarian=<span class="keyword">false</span>, calories=<span class="number">450</span>, type=FISH)]&#125;</span><br><span class="line">,OTHER=&#123;DIET=[Dish(name=rice, vegetarian=<span class="keyword">true</span>, calories=<span class="number">350</span>, type=OTHER), Dish(name=season fruit, vegetarian=<span class="keyword">true</span>, calories=<span class="number">120</span>, type=OTHER)], NORMAL=[Dish(name=french fries, vegetarian=<span class="keyword">true</span>, calories=<span class="number">530</span>, type=OTHER), Dish(name=pizza, vegetarian=<span class="keyword">true</span>, calories=<span class="number">550</span>, type=OTHER)]&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Collectors-클래스의-정적-팩토리-메서드"><a href="#Collectors-클래스의-정적-팩토리-메서드" class="headerlink" title="Collectors 클래스의 정적 팩토리 메서드"></a>Collectors 클래스의 정적 팩토리 메서드</h2><table>
<thead>
<tr>
<th>팩토리 메서드</th>
<th>반환형식</th>
<th>사용 예제</th>
<th>활용 예</th>
</tr>
</thead>
<tbody>
<tr>
<td>toList</td>
<td>List<t></t></td>
<td>스트림의 모든 항목을 리스트로 수집</td>
<td>List<dish> dishes = menuStream.collect(toList());</dish></td>
</tr>
<tr>
<td>toSet</td>
<td>Set<t></t></td>
<td>스트림의 모든 항목을 중복이 없는 집합으로 수집</td>
<td>Set<dish> dishes = menuStream.collect(toSet());</dish></td>
</tr>
<tr>
<td>toCollection</td>
<td>Collection<t></t></td>
<td>스트림의 모든 항목을 공급자가 제공하는 컬렉션으로 수집</td>
<td>Collection<dish> dishes = menuStream.collect(toCollection(), ArrayList::new);</dish></td>
</tr>
<tr>
<td>counting</td>
<td>Long</td>
<td>스트림의 항목 수 계산</td>
<td>long howManyDishes = menuStream.collect(counting());</td>
</tr>
<tr>
<td>summingInt</td>
<td>Integer</td>
<td>스트림의 항목에서 정수 프로퍼티값을 더함</td>
<td>int totalCalories = menuStream.collect(summingInt(Dish::getCalories));</td>
</tr>
<tr>
<td>averagingInt</td>
<td>Double</td>
<td>스트림 항목의 정수 프로퍼티의 평균값 계산</td>
<td>double avgCalories = menuStream.collect(averagingInt(Dish::getCalories));</td>
</tr>
<tr>
<td>summarizing</td>
<td>IntSummaryStatistics</td>
<td>스트림 내의 항목의 최댓값, 최솟값, 합계, 평균 등의 정수 정보 통계를 수집</td>
<td>IntSummaryStatistics menuStatistics = menuStream.collect(summarizingInt(Dish::getCalories));</td>
</tr>
<tr>
<td>joining</td>
<td>String</td>
<td>스트림의 각 항목에 toString 메서드를 호출한 결과 문자열을 연결.</td>
<td>String shortMenu = menuStream.map(Dish::getName).collect(joining(“, “));</td>
</tr>
<tr>
<td>maxBy</td>
<td>Optional<t></t></td>
<td>주어진 비교자를 이용해서 스트림의 최댓값 요소를 Optional로 감싼 값을 반환. 스트림에 요소가 없을 때는 Optional.empty()를 반환</td>
<td>Optional<dish> lightest = menuStream.collect(maxBy(comparingInt(Dish::getCalories)));</dish></td>
</tr>
<tr>
<td>minBy</td>
<td>Optional<t></t></td>
<td>주어진 비교자를 이용해서 스트림의 최솟값 요소를 Optional로 감싼 값을 반환. 스트림에 요소가 없을 때는 Optional.empty()를 반환</td>
<td>Optional<dish> lightest = menuStream.collect(minBy(comparingInt(Dish::getCalories)));</dish></td>
</tr>
<tr>
<td>reducing</td>
<td>리듀싱 연산에서 형식을 결정</td>
<td>누적자를 초깃값으로 설정한 다음에 BinaryOperator로 스트림의 각 요소를 반복적으로 누적자와 합쳐 스트림을 하나의 값으로 리듀싱</td>
<td>int totalCalories = menuStream.collect(reducing(0, Dish::getCalories, Integer::sum));</td>
</tr>
<tr>
<td>collectionAndThen</td>
<td>변환 함수가 형식을 변환</td>
<td>다른 컬렉터를 감싸고 그 결과에 변환 함수를 적용</td>
<td>int howManyDishes = menuStream.collect(collectingAndThen(toList(), List::size));</td>
</tr>
<tr>
<td>groupingBy</td>
<td>Map&lt;K, List<t>&gt;</t></td>
<td>하나의 프로퍼티값을 기준으로 스트림의 항목을 그룹화하며 기준 프로퍼티값을 결과 맵의 키로 사용</td>
<td>Map&lt;Dish.Type, List<dish>&gt; dishesByType = menuStream.collect(groupingBy(Dish::getType));</dish></td>
</tr>
<tr>
<td>partitionBy</td>
<td>Map&lt;Boolean, List<t>&gt;</t></td>
<td>프레디케이트를 스트림의 각 항복에 적용한 결과로 항목을 분할</td>
<td>Map&lt;Boolean, List<dish>&gt; vegetarianDishes = menuStream.collect(partitioningBy(Dish::isVegetarian));</dish></td>
</tr>
</tbody>
</table>
<h2 id="Collector-인터페이스"><a href="#Collector-인터페이스" class="headerlink" title="Collector 인터페이스"></a>Collector 인터페이스</h2><p>Collector 인터페이스 살펴 보기<br><figure class="highlight java"><figcaption><span>Collector.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">A</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Supplier&lt;A&gt; <span class="title">supplier</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BiConsumer&lt;A, T&gt; <span class="title">accumulator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">BinaryOperator&lt;A&gt; <span class="title">combiner</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Function&lt;A, R&gt; <span class="title">finisher</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>T는 수집될 스트림 항목의 제네릭 형식이다.</li>
<li>A는 누적자, 즉 수집 과정에서 중간 결과를 누적하는 객체의 형식이다.</li>
<li>R은 수집 연산 결과 객체의 형식(항상 그런 것은 아니지만 대게 컬렉션 형식)이다.</li>
</ol>
<p>예를 들어 <code>Stream&lt;T&gt;</code>의 모든 요소를 <code>List&lt;T&gt;</code>로 수집하는 <code>ToListCollector&lt;T&gt;</code>라는 클래스를 구현할 수 있다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToListCollector</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Collector</span>&lt;<span class="title">T</span>, <span class="title">List</span>&lt;<span class="title">T</span>&gt;, <span class="title">List</span>&lt;<span class="title">T</span>&gt;&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Collector-인터페이스-메서드-살펴보기"><a href="#Collector-인터페이스-메서드-살펴보기" class="headerlink" title="Collector 인터페이스 메서드 살펴보기"></a>Collector 인터페이스 메서드 살펴보기</h3><h4 id="supplier-메서드-새로운-결과-컨테이너-만들기"><a href="#supplier-메서드-새로운-결과-컨테이너-만들기" class="headerlink" title="supplier 메서드: 새로운 결과 컨테이너 만들기"></a>supplier 메서드: 새로운 결과 컨테이너 만들기</h4><p>suplier 메서드는 빈 결과로 이루어진 Supplier를 반환해야 한다. 즉 supplier는 수집과정에서 빈 누적자 인스턴스를 만드는 파라미터가 없는 함수다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Supplier&lt;List&lt;T&gt;&gt; supplier() &#123;</span><br><span class="line">    <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> ArrayList&lt;T&gt;(); <span class="comment">// 수집 연산의 시발점</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="accumulator-메서드-결과-컨테이너에-요소-추가하기"><a href="#accumulator-메서드-결과-컨테이너에-요소-추가하기" class="headerlink" title="accumulator 메서드: 결과 컨테이너에 요소 추가하기"></a>accumulator 메서드: 결과 컨테이너에 요소 추가하기</h4><p>accumulator 메서드는 리듀싱 연산을 수행하는 함수를 반환한다. 스트림의 n번째 연산을 탐색할 때 두 인수, 즉 누적자(스트림의 첫 n-1개 항목을 수집한 상태)와 n번째 요소를 함수에 적용한다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BiConsumer&lt;List&lt;T&gt;, T&gt; accumulator() &#123;</span><br><span class="line">    <span class="keyword">return</span> (list, item) -&gt; list.add(item); <span class="comment">// 탐색한 항목을 누적하고 바로 누적자를 고친다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="finisher-메서드-최종-변환값을-결과-컨테이너로-적용하기"><a href="#finisher-메서드-최종-변환값을-결과-컨테이너로-적용하기" class="headerlink" title="finisher 메서드: 최종 변환값을 결과 컨테이너로 적용하기"></a>finisher 메서드: 최종 변환값을 결과 컨테이너로 적용하기</h4><p>finisher 메서드는 스트림 탐색을 끝내고 누적자 객체를 최종 결과로 반환하면서 누적 과정을 끝낼 때 호출할 함수를 반환해야 한다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Function&lt;List&lt;T&gt;, List&lt;T&gt;&gt; finisher() &#123;</span><br><span class="line">    <span class="keyword">return</span> i -&gt; i; <span class="comment">// 항등 함수</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="combiner-메서드-두-결과-컨테이너-병합"><a href="#combiner-메서드-두-결과-컨테이너-병합" class="headerlink" title="combiner 메서드: 두 결과 컨테이너 병합"></a>combiner 메서드: 두 결과 컨테이너 병합</h3><p>combiner는 스트림의 서로 다른 서브파트를 병렬로 처리할 때 누적자가 이 결과를 어떻게 처리할지 정의한다.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> BinaryOperator&lt;List&lt;T&gt;&gt; combiner() &#123;</span><br><span class="line">    <span class="keyword">return</span> (list1, list2) -&gt; &#123;</span><br><span class="line">        list1.addAll(list2); <span class="comment">// 두 번째 콘텐츠와 함쳐서 첫 번째 누적자를 고친다.</span></span><br><span class="line">        <span class="keyword">return</span> list1;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Characteristics-메서드"><a href="#Characteristics-메서드" class="headerlink" title="Characteristics 메서드"></a>Characteristics 메서드</h4><p>characteristics 메서드는 컬렉터의 연산을 정의하는 Characteristics 형식의 불변 집합을 반환한다. </p>
<ul>
<li>UNORDERED 이듀싱 결과는 스트림 요소의 방문 순서나 누적 순서에 영향을 받지 않는다.</li>
<li>CONCURRENT 다중 스레드에서 accumulator 함수를 동시에 호출할 수 있으며 이 컬렉터는 스트림의 병렬 리듀싱을 수행할 수 있다.</li>
<li>IDENTITIY_FINISH finisher 메서드가 반환하는 함수는 단순히 identity를 적용할 뿐이므로 이를 생략할 수 있다.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Characteristics&gt; <span class="title">characteristics</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableSet(EnumSet.of(IDENTITY_FINISH, CONCURRENT)); <span class="comment">// 콜렉터의 플래그를 IDENTITY_FINISH.CONCURRENT로 설정한다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter6" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 3. 스트림 소개</title>
    <url>/2019/06/16/java/java8inaction/chapter3/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. 스트림의 개념을 설명하고 스트림과 컬렉션을 비교 설명한다.<br><a id="more"></a></p>
<h2 id="스트림이란-무엇인가"><a href="#스트림이란-무엇인가" class="headerlink" title="스트림이란 무엇인가?"></a>스트림이란 무엇인가?</h2><p>스트림은 자바 API에 새로 추가된 기능으로, 스트림을 이용하면 선언형으로 컬렉션 데이터를 처리할 수 있고, 멀티 스레드 코드를 구현하지 않아도 데이터를 투명하게 병렬로 처리할 수 있다.<br>즉, 데이터 처리연산을 지원하도록 소스에서 추출된 연속된 요소 이다.</p>
<h3 id="Dish"><a href="#Dish" class="headerlink" title="Dish"></a>Dish</h3><figure class="highlight java"><figcaption><span>Dish.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> vegetarian;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Type &#123; </span><br><span class="line">        MEAT, FISH, OTHER</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Dish&gt; menu =</span><br><span class="line">            Arrays.asList( <span class="keyword">new</span> Dish(<span class="string">"pork"</span>, <span class="keyword">false</span>, <span class="number">800</span>, Dish.Type.MEAT),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"beef"</span>, <span class="keyword">false</span>, <span class="number">700</span>, Dish.Type.MEAT),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"chicken"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.MEAT),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"french fries"</span>, <span class="keyword">true</span>, <span class="number">530</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"rice"</span>, <span class="keyword">true</span>, <span class="number">350</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"season fruit"</span>, <span class="keyword">true</span>, <span class="number">120</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"pizza"</span>, <span class="keyword">true</span>, <span class="number">550</span>, Dish.Type.OTHER),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"prawns"</span>, <span class="keyword">false</span>, <span class="number">400</span>, Dish.Type.FISH),</span><br><span class="line">                    <span class="keyword">new</span> Dish(<span class="string">"salmon"</span>, <span class="keyword">false</span>, <span class="number">450</span>, Dish.Type.FISH));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Java7-코드"><a href="#Java7-코드" class="headerlink" title="Java7 코드"></a>Java7 코드</h3><figure class="highlight java"><figcaption><span>StreamBasic.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamBasic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getLowCaloricDishesNamesInJava7(Dish.menu).forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLowCaloricDishesNamesInJava7</span><span class="params">(List&lt;Dish&gt; dishes)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; lowCaloricDishes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Dish d : dishes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d.getCalories() &lt; <span class="number">400</span>) &#123;</span><br><span class="line">                lowCaloricDishes.add(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; lowCaloricDishesName = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 익명 클래스로 요리 정렬</span></span><br><span class="line">        Collections.sort(lowCaloricDishes, <span class="keyword">new</span> Comparator&lt;Dish&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Dish d1, Dish d2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(d1.getCalories(), d2.getCalories());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Dish d : lowCaloricDishes) &#123;</span><br><span class="line">            lowCaloricDishesName.add(d.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> lowCaloricDishesName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">season fruit</span><br><span class="line">rice</span><br></pre></td></tr></table></figure></p>
<h3 id="Java8-코드"><a href="#Java8-코드" class="headerlink" title="Java8 코드"></a>Java8 코드</h3><figure class="highlight java"><figcaption><span>StreamBasic.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamBasic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getLowCaloricDishesNamesInJava8(Dish.menu).forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLowCaloricDishesNamesInJava8</span><span class="params">(List&lt;Dish&gt; dishes)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; collect = dishes.stream()</span><br><span class="line">                .filter(d -&gt; d.getCalories() &lt; <span class="number">400</span>) <span class="comment">// 400 칼로리 이하의 요리 선택</span></span><br><span class="line">                .sorted(comparing(dish -&gt; dish.getCalories())) <span class="comment">// 칼로리로 요리 정렬</span></span><br><span class="line">                .map(dish -&gt; dish.getName()) <span class="comment">// 요리명 추출</span></span><br><span class="line">                .collect(toList()); <span class="comment">// 모든 요리명을 리스트에 저장</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">season fruit</span><br><span class="line">rice</span><br></pre></td></tr></table></figure></p>
<h3 id="Java8-코드-병렬-처리"><a href="#Java8-코드-병렬-처리" class="headerlink" title="Java8 코드 병렬 처리"></a>Java8 코드 병렬 처리</h3><p><code>stream()</code>을 <code>parallelStream()</code>으로 바꾸면 이 코드를 멀티코어 아키텍처에서 병렬로 실행할 수 있다. 결과적으로 우리는 데이터 처리 과정을 병렬화하면서 스레드와 락을 걱정할 필요가 없다.<br><figure class="highlight java"><figcaption><span>StreamBasic.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamBasic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        getLowCaloricDishesNamesInJava8Parellel(Dish.menu).forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLowCaloricDishesNamesInJava8Parellel</span><span class="params">(List&lt;Dish&gt; dishes)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; collect = dishes.parallelStream() <span class="comment">// 병렬처리</span></span><br><span class="line">                .filter(d -&gt; d.getCalories() &lt; <span class="number">400</span>) <span class="comment">// 400 칼로리 이하의 요리 선택</span></span><br><span class="line">                .sorted(comparing(dish -&gt; dish.getCalories())) <span class="comment">// 칼로리로 요리 정렬</span></span><br><span class="line">                .map(dish -&gt; dish.getName()) <span class="comment">// 요리명 추출</span></span><br><span class="line">                .collect(toList()); <span class="comment">// 모든 요리명을 리스트에 저장</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">season fruit</span><br><span class="line">rice</span><br></pre></td></tr></table></figure></p>
<p>스트림 연산을 연결해서 스트림 파이프라인 형성<br><pre class="mermaid" style="text-align: center;">
            graph LR
            menu --> filter
filter --> sorted
sorted --> map
map --> collect
          </pre></p>
<h2 id="스트림과-컬렉션"><a href="#스트림과-컬렉션" class="headerlink" title="스트림과 컬렉션"></a>스트림과 컬렉션</h2><p>컬렉션은 현재 자료구조가 포함하는 모든 값을 메모리에 저장하는 자료구조이고, 스트림은 요청할 때만 요소를 계산하는 고정된 자료구조이다.</p>
<h3 id="딱-한-번만-탐색할-수-있다"><a href="#딱-한-번만-탐색할-수-있다" class="headerlink" title="딱 한 번만 탐색할 수 있다!"></a>딱 한 번만 탐색할 수 있다!</h3><p>스트림은 단 한 번만 소비 할 수 있다.<br><figure class="highlight java"><figcaption><span>StreamVsCollection.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamVsCollection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">"Java8"</span>, <span class="string">"Lambdas"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>);</span><br><span class="line">        Stream&lt;String&gt; s = names.stream();</span><br><span class="line">        s.forEach(System.out::println);</span><br><span class="line">        s.forEach(System.out::println); <span class="comment">// java.lang.IllegalStateException 스트림이 이미 소비되었거나 닫힘</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java8</span><br><span class="line">Lambdas</span><br><span class="line">In</span><br><span class="line">Action</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.IllegalStateException: stream has already been operated upon or closed</span><br><span class="line">	at java.base/java.util.stream.AbstractPipeline.sourceStageSpliterator(AbstractPipeline.java:<span class="number">279</span>)</span><br><span class="line">	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:<span class="number">658</span>)</span><br><span class="line">	at me.action.chapter3.StreamVsCollection.main(StreamVsCollection.java:<span class="number">23</span>)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>스트림은 한번 소비 하게 되면 <code>java.lang.IllegalStateException</code>를 발생 시킨다. 여기서 컬렉션과 스트림의 또 다른 차이점은 데이터 반복 처리 방법이다.</p>
</blockquote>
<h3 id="외부-반복과-내부-반복"><a href="#외부-반복과-내부-반복" class="headerlink" title="외부 반복과 내부 반복"></a>외부 반복과 내부 반복</h3><p>컬렉션 인터페이스를 사용하려면 사용자가 직접 요소를 반복해야 되는 것을 <code>외부 반복(external iteration)</code>이라고 하고, 스트림 라이브러리는 <code>내부 반복(internal iteration)</code>을 사용한다.<br><figure class="highlight java"><figcaption><span>StreamVsCollection.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamVsCollection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">"Java8"</span>, <span class="string">"Lambdas"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 외부 반복</span></span><br><span class="line">        List&lt;String&gt; nameList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">            nameList.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"nameList = ["</span> + nameList + <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; nameList2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            String name = iterator.next();</span><br><span class="line">            nameList2.add(name);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"nameList2 = ["</span> + nameList2 + <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 내부 반복</span></span><br><span class="line">        List&lt;String&gt; externalNames = names.stream()</span><br><span class="line">                                        .map(s1 -&gt; names.get(<span class="number">0</span>))</span><br><span class="line">                                        .collect(toList());</span><br><span class="line">        externalNames.forEach(x -&gt; System.out.println(<span class="string">"externalNames = ["</span> + x + <span class="string">"]"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">nameList = [[Java8, Lambdas, In, Action]]</span><br><span class="line">nameList2 = [[Java8, Lambdas, In, Action]]</span><br><span class="line">externalNames = [Java8]</span><br><span class="line">externalNames = [Java8]</span><br><span class="line">externalNames = [Java8]</span><br><span class="line">externalNames = [Java8]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>여기서 가장 큰 차이점은 스트림라이브러리의 내부 반복은 데이터 표현과 하드웨어를 활용한 병렬성 구현을 자동으로 선택한다. 반면 <code>for-each</code>를 이용하는 외부 반복에서는 병렬성을 스스로 관리 해야하는 단점이 있다.</p>
</blockquote>
<h2 id="스트림-연산"><a href="#스트림-연산" class="headerlink" title="스트림 연산"></a>스트림 연산</h2><p>filter와 map처럼 스트림을 반환하면서 다른 연산과 연결될 수 있는 연산을 <code>중간 연산</code>이라고 한다. 중간 연산을 이용해서 파이프라인을 구성할 수 있지만 중간 연산으로 어떤 결과도 생성할 수 없다. forEach나 count처럼 스트림 파이프라인을 처리해서 스트임이 아닌 결과를 반환하는 연산을 <code>최종 연산</code>이라고 한다.</p>
<pre class="mermaid" style="text-align: center;">
            graph LR
            menu --> filter
filter --> map
map --> limit
limit --> collect
          </pre>
<ol>
<li>질의를 수행할(컬렉션 같은) <code>데이터 소스</code></li>
<li>스트림 파이프라인을 구성할 <code>중간 연산(filter, map, limit)</code> 연결</li>
<li>스트림 파이프라인을 실행하고 결과를 만들 <code>최종 연산(collect)</code></li>
</ol>
<h3 id="중간-연산"><a href="#중간-연산" class="headerlink" title="중간 연산"></a>중간 연산</h3><table>
<thead>
<tr>
<th>연산</th>
<th>형식</th>
<th>반환 형식</th>
<th>연산의 인수</th>
<th>함수 디스크립터</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>중간연산</td>
<td>Stream<t></t></td>
<td>Predicate<t></t></td>
<td>T -&gt; boolean</td>
</tr>
<tr>
<td>map</td>
<td>중간연산</td>
<td>Stream<t></t></td>
<td>Function&lt;T, R&gt;</td>
<td>T -&gt; R</td>
</tr>
<tr>
<td>limit</td>
<td>중간연산</td>
<td>Stream<t></t></td>
<td></td>
<td></td>
</tr>
<tr>
<td>sorted</td>
<td>중간연산</td>
<td>Stream<t></t></td>
<td>Comparator<t></t></td>
<td>(T, T) -&gt; int</td>
</tr>
<tr>
<td>distinct</td>
<td>중간연산</td>
<td>Stream<t></t></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="최종-연산"><a href="#최종-연산" class="headerlink" title="최종 연산"></a>최종 연산</h3><table>
<thead>
<tr>
<th>연산</th>
<th>형식</th>
<th>목적</th>
</tr>
</thead>
<tbody>
<tr>
<td>forEach</td>
<td>최종연산</td>
<td>스트림의 각 요소를 소비하면서 람다를 적용한다. void를 반환한다.</td>
</tr>
<tr>
<td>count</td>
<td>최종연산</td>
<td>스트림의 요소 개수를 반환한다. long을 반환한다.</td>
</tr>
<tr>
<td>collection</td>
<td>최종연산</td>
<td>스트임을 리듀스해서 리스트, 맵, 정수 형식의 컬렉션을 만든다.</td>
</tr>
</tbody>
</table>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter3" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 7. 디폴트 메서드</title>
    <url>/2019/07/14/java/java8inaction/chapter7/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. 디폴트 메서드란 무엇이며 API가 바뀌면서 발생한 문제를 디폴트 메서드로 어떻게 해결할 수 있는 설명한다. 그리고 디폴트 메서드를 만들어 다중 상속을 달성하는 방법을 보여준다.<br><a id="more"></a></p>
<h2 id="변화하는-API"><a href="#변화하는-API" class="headerlink" title="변화하는 API"></a>변화하는 API</h2><p>우리가 인기 있는 자바 그리기 라이브러리 설계자가 되었다고 가정한다.</p>
<ol>
<li>모양의 크기를 조정하는 데 필요한 <code>setHeigh</code>, <code>setWidth</code>, <code>getHeight</code>, <code>getWidth</code>, <code>setAbsoluteSize</code> 등의 메서드를 정의하는 <code>Resizable</code> 인터페이스 생성</li>
<li><code>Rectagle</code>이나, <code>Square</code>처럼 <code>Resizable</code>을 구현하는 클래스 제공</li>
<li>일부 사용자가 직접 <code>Resizable</code> 인터페이스를 구현하는 <code>Ellipse</code>라는 클래스 구현</li>
<li>API를 릴리즈한지 몇개월이 지나면서 <code>Resizable</code>에 몇 가지 기능이 부족하여 크기 조절 인수로 모양의 크기를 조절할 수 있는 <code>setRelativeSize</code>라는 메서드를 추가</li>
<li><code>Resizable</code>에 <code>setRelativeSize</code>를 추가하고 <code>Square</code>와 <code>Rectangle</code>구현을 수정</li>
</ol>
<blockquote>
<p>문제점 : 바로 자바 라이브러리 설계자가 라이브러리를 바꾸고 싶을 때 같은 문제가 발생</p>
</blockquote>
<h3 id="API-버전-1"><a href="#API-버전-1" class="headerlink" title="API 버전 1"></a>API 버전 1</h3><p><img src="/images/java/java8inaction/chapter7_1.png" alt><br><code>Resizable</code> 인터페이스 초기 버젼은 다음과 같은 메서드를 포함한다.</p>
<figure class="highlight java"><figcaption><span>Resizable.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resizable</span> <span class="keyword">extends</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAbsoluteSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="사용자-구현"><a href="#사용자-구현" class="headerlink" title="사용자 구현"></a>사용자 구현</h4><p>우리 라이브러리를 즐겨 사용하는 사용자 중 한 명은 직접 <code>Resizable</code>을 구현하는 <code>Ellipse</code>클래스를 만들었다.</p>
<figure class="highlight java"><figcaption><span>Ellipse.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ellipse</span> <span class="keyword">implements</span> <span class="title">Resizable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAbsoluteSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>이 사용자는 다양한 <code>Resizable</code> 모양(자신이 만든 <code>Ellipse</code>를 포함해서)을 처리하는 게임을 만들었다.</p>
<figure class="highlight java"><figcaption><span>Game.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span></span>&#123;</span><br><span class="line">        List&lt;Resizable&gt; resizableShapes = Arrays.asList(<span class="keyword">new</span> Square(), <span class="keyword">new</span> Triangle(), <span class="keyword">new</span> Ellipse()); <span class="comment">// 크기를 조절할 수 있는 모양 리스트</span></span><br><span class="line">        Utils.paint(resizableShapes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>Utils.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(List&lt;Resizable&gt; l)</span></span>&#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(List&lt;Resizable&gt; l)</span></span>&#123;</span><br><span class="line">        l.forEach(r -&gt; &#123; </span><br><span class="line">            r.setAbsoluteSize(<span class="number">42</span>, <span class="number">42</span>); <span class="comment">// 각 모양에 setAbsoluteSize 호출</span></span><br><span class="line">            r.draw();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="API-버전-2"><a href="#API-버전-2" class="headerlink" title="API 버전 2"></a>API 버전 2</h3><p><img src="/images/java/java8inaction/chapter7_2.png" alt><br>몇 개월이 지나자 <code>Resizalbe</code>을 구현하는 <code>Square</code>와 <code>Rectangle</code>구현을 개선해달라는 많은 요청을 받았다.</p>
<figure class="highlight java"><figcaption><span>Resizable.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resizable</span> <span class="keyword">extends</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAbsoluteSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRelativeSize</span><span class="params">(<span class="keyword">int</span> wFactor, <span class="keyword">int</span> hFactor)</span></span>; <span class="comment">// API 버전 2에 추가된 새로운 메서드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="사용자가-겪는-문제"><a href="#사용자가-겪는-문제" class="headerlink" title="사용자가 겪는 문제"></a>사용자가 겪는 문제</h3><p><code>Resizable</code>을 고치면 몇가지 문제가 발생한다.</p>
<ol>
<li><code>Resizable</code>을 구현하는 모든 클래스는 <code>setRelativeSize</code> 메서드를 구현해야 한다. 하지만 라이브러리 사용자가 직접 구현한 <code>Ellipse</code>는 <code>setRelativeSize</code> 메서드를 구현해야 한다.</li>
<li>공개된 API를 고치면 기존 버전과의 호환성 문제가 발생한다.</li>
<li>사용자가 라이브러리를 관리하면 결국 프로젝트에서 로딩해야 할 클래스 파일이 많아지면서 메모리 사용과 로딩 시간 문제가 발생한다.</li>
</ol>
<blockquote>
<p>위와 같은 문제를 디폴트 메서드로 해결할 수 있다.</p>
</blockquote>
<h2 id="디폴트-메서드란-무엇인가"><a href="#디폴트-메서드란-무엇인가" class="headerlink" title="디폴트 메서드란 무엇인가?"></a>디폴트 메서드란 무엇인가?</h2><p>자바8에서는 호환성을 유지하면서 API를 바꿀 수 있도록 새로운 기능인 <code>디폴트 메서드(default method)</code>를 제공한다. 우선 디폴트 메서드는 <code>defalut</code>라는 키워드로 시작하며 다른 클래스에 선언된 메서드처럼 메서드 바디를 포함한다.</p>
<figure class="highlight java"><figcaption><span>Sized.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sized</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>이제 <code>Sized</code> 인터페이스를 구현하는 모든 클래스는 <code>isEmpty</code>의 구현도 상속 받는다. 즉, 인터페이스에 디폴트 메서드를 추가하면 소스 호환성이 유지된다.</p>
</blockquote>
<h3 id="추상-클래스와-자바-8의-인터페이스"><a href="#추상-클래스와-자바-8의-인터페이스" class="headerlink" title="추상 클래스와 자바 8의 인터페이스"></a>추상 클래스와 자바 8의 인터페이스</h3><p>추상 클래스와 인터페이스는 다른점은, 둘 다 추상 메서드와 바디를 포함하는 메서드를 정의 할 수 있다.</p>
<ol>
<li>클래스는 하나의 추상 클래스만 상속받을 수 있지만 인터페이스를 여러 개 구현할 수 있다.</li>
<li>추상 클래스는 인스턴스 변수(필드)로 공통 상태를 가질 수 있다. 하지만 인터페이스는 인스턴스 변수를 가질 수 없다.</li>
</ol>
<h2 id="디폴트-메서드-활용-패턴"><a href="#디폴트-메서드-활용-패턴" class="headerlink" title="디폴트 메서드 활용 패턴"></a>디폴트 메서드 활용 패턴</h2><p>디폴트 메서드를 이용하는 두가 방식, <code>선택형 메서드(optional method)</code>와 <code>동작 다중 상속(multiple inheritance of behavior)</code>을 설명한다.</p>
<h3 id="선택형-메서드"><a href="#선택형-메서드" class="headerlink" title="선택형 메서드"></a>선택형 메서드</h3><p>예를 <code>Iterator</code>인터페이스를 보자. <code>Iterator</code>는 <code>hasNext</code>와 <code>next</code>뿐 아니라 <code>remove</code>메서드도 정의한다. 사용자들이 <code>remove</code> 기능은 잘 사용하지 않으므로 자바 8 이전에는 <code>remove</code>기능을 무시했다. 결과적으로 <code>Iterator</code>를 구현하는 많은 클래스에서는 <code>remove</code>에 빈 구현을 제공했다. 자바8의 <code>Iterator</code> 인터페이스는 다음처럼 <code>remove</code> 메서드를 정의한다.</p>
<figure class="highlight java"><figcaption><span>Iterator.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">nexT</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>기본 구현이 제공되므로 <code>Iterator</code> 인터페이스를 구현하는 클래스는 빈 <code>remove</code> 메서드를 구현 할 필요가 없어졌고, 불필요한 코드를 줄일 수 있다.</p>
<h3 id="동작-다중-상속"><a href="#동작-다중-상속" class="headerlink" title="동작 다중 상속"></a>동작 다중 상속</h3><p>자바에서 클래스는 한 개의 다른 클래스만 상속할 수 있지만 인터페이스는 여러 개 구현할 수 있다. 다음은 자바 API에 정의된 <code>ArrayList</code>클래스다.</p>
<figure class="highlight java"><figcaption><span>ArrayList.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span>, <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="해석-규칙"><a href="#해석-규칙" class="headerlink" title="해석 규칙"></a>해석 규칙</h2><ol>
<li>클래스가 항상 이긴다. 클래스나 슈퍼 클래스에서 정의한 메서드가 디폴트 메서드보다 우선권을 갖는다.</li>
<li>위 규칙 이외의 상황에서는 서브인터페이스가 이긴다. 상속관계를 갖는 인터페이스에서 같은 시그너처를 갖는 메서드를 정의할 때는 서브인터페이스가 이긴다. 즉, B가 A를 상속받는다면 B가 A를 이긴다.</li>
<li>여전히 디폴트 메서드의 우선순위가 결정되지 않았다면 여러 인터페이스를 상속 받는 클래스가 명시적으로 디폴트 메서드를 오버라이드하고 호출해야 한다.</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter7" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 5. 스트림 활용</title>
    <url>/2019/06/29/java/java8inaction/chapter5/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. 필터링, 슬라이싱, 매칭, 검색, 매칭, 리듀싱, 특정 범위의 숫자와 같은 숫자 스트림 사용하기, 다중 소스로부터 스트림 만들기, 무한 스트림 대해서 설명한다.<br><a id="more"></a></p>
<h1 id="필터링과-슬라이싱"><a href="#필터링과-슬라이싱" class="headerlink" title="필터링과 슬라이싱"></a>필터링과 슬라이싱</h1><p>프레디케이트 필터링, 고유 요소 필터링, 스트림의 일부 요소를 무시하거나 스트림을 주어진 크기로 축소하는 방법을 설명한다.</p>
<h2 id="프레디케이트로-필터링"><a href="#프레디케이트로-필터링" class="headerlink" title="프레디케이트로 필터링"></a>프레디케이트로 필터링</h2><p>스트림 인터페이스는 <code>filter</code> 메서드를 지원한다. filter 메서드는 <code>프레디케이트</code>(불린을 반환하는 함수)를 인수로 받아서 프레디케이트와 일치하는 모든 요소를 포함하는 스트림을 반환한다.<br><figure class="highlight java"><figcaption><span>Filtering.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filtering</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; vegetarianMenu = Dish.menu.stream()</span><br><span class="line">                                             .filter(d -&gt; d.isVegetarian())</span><br><span class="line">                                             .collect(toList());    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="고유-소요-필터링"><a href="#고유-소요-필터링" class="headerlink" title="고유 소요 필터링"></a>고유 소요 필터링</h2><p>스트림은 고유 요소로 이루어진 스트림을 반환하는 <code>distinct</code>라는 메서드도 지원한다.(고유 여부는 스트림에서 만든 객체의 <code>hashCode</code>, <code>equals</code>로 결정된다.)<br><figure class="highlight java"><figcaption><span>Filtering.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filtering</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        numbers.stream()</span><br><span class="line">               .filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">               .forEach(i -&gt; System.out.println(i));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; numbers2 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        numbers2.stream()</span><br><span class="line">                .filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                .distinct()</span><br><span class="line">                .forEach(i -&gt; System.out.println(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">---------------------------------------</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<h2 id="스트림-축소"><a href="#스트림-축소" class="headerlink" title="스트림 축소"></a>스트림 축소</h2><p>스트림은 주어진 사이즈 이하의 크기를 갖는 새로운 스트림을 반환하는 <code>limit(n)</code> 메서드를 지원한다. 스트림이 정렬되어 있으면 최대 n개의 요소를 반환할 수 있다.<br><figure class="highlight java"><figcaption><span>Filtering.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filtering</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; dishes = Dish.menu.stream()</span><br><span class="line">                                     .filter(d -&gt; d.getCalories() &gt; <span class="number">500</span>)</span><br><span class="line">                                     .collect(toList());</span><br><span class="line">        System.out.println(dishes);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; dishes2 = Dish.menu.stream()</span><br><span class="line">                                      .filter(d -&gt; d.getCalories() &gt; <span class="number">500</span>)</span><br><span class="line">                                      .limit(<span class="number">2</span>)</span><br><span class="line">                                      .collect(toList());</span><br><span class="line">        System.out.println(dishes2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Dish(name=pork, vegetarian=<span class="keyword">false</span>, calories=<span class="number">800</span>, type=MEAT), Dish(name=beef, vegetarian=<span class="keyword">false</span>, calories=<span class="number">700</span>, type=MEAT), Dish(name=french fries, vegetarian=<span class="keyword">true</span>, calories=<span class="number">530</span>, type=OTHER), Dish(name=pizza, vegetarian=<span class="keyword">true</span>, calories=<span class="number">550</span>, type=OTHER)]</span><br><span class="line">---------------------------------------</span><br><span class="line">[Dish(name=pork, vegetarian=<span class="keyword">false</span>, calories=<span class="number">800</span>, type=MEAT), Dish(name=beef, vegetarian=<span class="keyword">false</span>, calories=<span class="number">700</span>, type=MEAT)]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>limit(n)</code> 메서드를 이용해서 앞에서부터 2개가 출력되는 것을 확인할 수 있다.</p>
</blockquote>
<h2 id="요소-건너뛰기"><a href="#요소-건너뛰기" class="headerlink" title="요소 건너뛰기"></a>요소 건너뛰기</h2><p>스트림은 처음 n개 요소를 제외한 스트림을 반환하는 <code>skip(n)</code> 메서드를 지원한다. n개 이하의 요소를 포함하는 스트림에 <code>skip(n)</code>을 호출하면 빈 스트림이 반환된다.<br><figure class="highlight java"><figcaption><span>Filtering.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filtering</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Dish&gt; skipDishes = Dish.menu.stream()</span><br><span class="line">                                         .filter(d -&gt; d.getCalories() &gt; <span class="number">500</span>)</span><br><span class="line">                                         .collect(toList());</span><br><span class="line">        System.out.println(skipDishes);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Dish&gt; skipDishes2 = Dish.menu.stream()</span><br><span class="line">                                          .filter(d -&gt; d.getCalories() &gt; <span class="number">500</span>)</span><br><span class="line">                                          .skip(<span class="number">2</span>)</span><br><span class="line">                                          .collect(toList());</span><br><span class="line">        System.out.println(skipDishes2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Dish(name=pork, vegetarian=<span class="keyword">false</span>, calories=<span class="number">800</span>, type=MEAT), Dish(name=beef, vegetarian=<span class="keyword">false</span>, calories=<span class="number">700</span>, type=MEAT), Dish(name=french fries, vegetarian=<span class="keyword">true</span>, calories=<span class="number">530</span>, type=OTHER), Dish(name=pizza, vegetarian=<span class="keyword">true</span>, calories=<span class="number">550</span>, type=OTHER)]</span><br><span class="line">---------------------------------------</span><br><span class="line">[Dish(name=french fries, vegetarian=<span class="keyword">true</span>, calories=<span class="number">530</span>, type=OTHER), Dish(name=pizza, vegetarian=<span class="keyword">true</span>, calories=<span class="number">550</span>, type=OTHER)]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>limit(n)</code> 메서드와 다르게 앞에 2개를 skip 결과를 확인할 수 있다.</p>
</blockquote>
<h1 id="매핑"><a href="#매핑" class="headerlink" title="매핑"></a>매핑</h1><p>특정 객체에서 특정 데이터를 선택하는 작업은 데이터 처리 과정에서 자주 수행되는 연산이다.</p>
<h2 id="스트림의-각-요소에-함수-적용하기"><a href="#스트림의-각-요소에-함수-적용하기" class="headerlink" title="스트림의 각 요소에 함수 적용하기"></a>스트림의 각 요소에 함수 적용하기</h2><p>스트림은 함수를 인수로 받는 <code>map</code> 메서드를 지원한다. 인수로 제공된 함수는 각 요소에 적용되며 함수를 적용한 결과가 새로운 요소로 맵핑된다.<br><figure class="highlight java"><figcaption><span>Mapping.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; words = Arrays.asList(<span class="string">"Java8"</span>, <span class="string">"Lambdas"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>);</span><br><span class="line">        List&lt;Integer&gt; wordLengths = words.stream()</span><br><span class="line">                                         .map(s -&gt; s.length())</span><br><span class="line">                                         .collect(toList());</span><br><span class="line">        System.out.println(wordLengths);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>각 데이터에 결과 값이 길이 값으로 출력 되는 것을 확인할 수 있다.</p>
</blockquote>
<h2 id="스트림-평면화"><a href="#스트림-평면화" class="headerlink" title="스트림 평면화"></a>스트림 평면화</h2><p>리스트에서 <code>고유 문자</code>로 이루어진 리스트를 반환 하는 예를 들어 보자.</p>
<h3 id="flatMap-사용"><a href="#flatMap-사용" class="headerlink" title="flatMap 사용"></a>flatMap 사용</h3><p><code>flatMap</code>은 각 배열을 스트림이 아니라 스트림의 콘텐츠로 매핑한다. 즉 <code>map</code>과 달리 <code>flatMap</code>은 하나의 평면화된 스트림을 반환한다.<br><figure class="highlight java"><figcaption><span>Mapping.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; flatWords = Arrays.asList(<span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br><span class="line">        List&lt;String&gt; uniqueCharaters = flatWords.stream()</span><br><span class="line">                                                .map(w -&gt; w.split(<span class="string">""</span>)) <span class="comment">// 각 단어를 개별 문자열 배열로 변환</span></span><br><span class="line">                                                .flatMap(w -&gt; Arrays.stream(w)) <span class="comment">// 생성된 스트림을 하나의 스트림으로 평면화</span></span><br><span class="line">                                                .distinct()</span><br><span class="line">                                                .collect(toList());</span><br><span class="line">        System.out.println(uniqueCharaters);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[H, e, l, o, W, r, d]</span><br></pre></td></tr></table></figure></p>
<h1 id="검색과-매칭"><a href="#검색과-매칭" class="headerlink" title="검색과 매칭"></a>검색과 매칭</h1><p>특정 속성이 데이터 집합에 있는 여부를 검색하는 데이터 처리, 스트림 API에서는 <code>allMatch</code>, <code>anyMatch</code>, <code>noneMatch</code>, <code>findFirst</code>, <code>findAny</code>등 다양한 유틸리티 메서드를 제공 한다.</p>
<h2 id="프레디케이트가-적어도-한-요소와-일치하는지-확인"><a href="#프레디케이트가-적어도-한-요소와-일치하는지-확인" class="headerlink" title="프레디케이트가 적어도 한 요소와 일치하는지 확인"></a>프레디케이트가 적어도 한 요소와 일치하는지 확인</h2><p>프레디케이트가 주어진 스트림에서 적어도 한 요소와 일치하는지 확인할 때 사용.<br><figure class="highlight java"><figcaption><span>Finding.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isVegetarianFriendlyMenu())&#123;</span><br><span class="line">            System.out.println(<span class="string">"Vegetarian friendly"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVegetarianFriendlyMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dish.menu.stream().anyMatch(d -&gt; d.isVegetarian());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>isVegetarian()</code> 데이터가 하나라도 <code>true</code>가 발생하면 <code>true</code>로 처리 </p>
</blockquote>
<h2 id="프레디케이트가-모든-요소와-일치하는지-검사"><a href="#프레디케이트가-모든-요소와-일치하는지-검사" class="headerlink" title="프레디케이트가 모든 요소와 일치하는지 검사"></a>프레디케이트가 모든 요소와 일치하는지 검사</h2><p><code>allMatch</code>메서드는 <code>anyMatch</code>와 달리 스트림의 모든 요소가 주어진 프레디케이트와 일차하는지 검사한다.<br><figure class="highlight java"><figcaption><span>Finding.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isHealthyMenu());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHealthyMenu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dish.menu.stream().allMatch(d -&gt; d.getCalories() &lt; <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>getCalories()</code>의 모든 값이 1000 이하이면 <code>true</code>값을 반환한다.</p>
</blockquote>
<p><code>noneMatch</code>는 <code>allMatch</code>와 반대 연산을 수행한다.<br><figure class="highlight java"><figcaption><span>Finding.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span> </span>&#123;</span><br><span class="line">        System.out.println(isHealthyMenu());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isHealthyMenu2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dish.menu.stream().noneMatch(d -&gt; d.getCalories() &gt;= <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<div class="note success">
            <p>anyMatch, allMatch, noneMatch 세 가지 메서드는 스트림 쇼트서킷 기법, 즉 자바의 &amp;&amp;, ||와 같은 연산을 활용한다.</p>
          </div>
<h2 id="요소-검색"><a href="#요소-검색" class="headerlink" title="요소 검색"></a>요소 검색</h2><p><code>findAny</code>메서드는 현재 스트림에서 임의의 요소를 반환한다. <code>findAny</code>메서드를 다른 스트림연산과 연결해서 사용할 수 있다.<br><figure class="highlight java"><figcaption><span>Finding.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Dish&gt; dish = findVegetarianDish();</span><br><span class="line">        dish.ifPresent(d -&gt; System.out.println(d.getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Optional&lt;Dish&gt; <span class="title">findVegetarianDish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dish.menu.stream().filter(d -&gt; d.isVegetarian()).findAny();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="첫-번째-요소-찾기"><a href="#첫-번째-요소-찾기" class="headerlink" title="첫 번째 요소 찾기"></a>첫 번째 요소 찾기</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String...args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; someNumbers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        Optional&lt;Integer&gt; firstSquareDivisibleByThree = someNumbers.stream()</span><br><span class="line">                                                                   .map(x -&gt; x * x)</span><br><span class="line">                                                                   .filter(x -&gt; x % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">                                                                   .findFirst();</span><br><span class="line">        System.out.println(firstSquareDivisibleByThree.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 확인<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p>
<h1 id="리듀싱"><a href="#리듀싱" class="headerlink" title="리듀싱"></a>리듀싱</h1><p>스트림의 모든 요소를 반복적으로 처리 하는것을 <code>리듀싱 연산</code>이라고 한다.</p>
<h2 id="요소의-합"><a href="#요소의-합" class="headerlink" title="요소의 합"></a>요소의 합</h2><p>java8이하 버젼에서 <code>for-each</code>루프를 이용해서 리스트의 숫자 요소를 더하는 코드와 java8이상의 <code>reduce</code>코드를 확인해 보자.<br><figure class="highlight java"><figcaption><span>Reducing.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : numbers) &#123;</span><br><span class="line">            sum += x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"sum : "</span> + sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum_java8 = numbers.stream().reduce(<span class="number">0</span>, (a, b) -&gt; a + b);</span><br><span class="line">        System.out.println(<span class="string">"sum_java8 : "</span> + sum_java8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum : <span class="number">15</span></span><br><span class="line">sum_java8 : <span class="number">15</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>reduce 2번째 파라미터 인자값(<code>(a, b) -&gt; a + b</code>)은 두 요소를 조합해서 새로운 값을 만드는 <code>BinaryOperator&lt;T&gt;</code>를 사용했다. reduce 연산 과정은 스트림이 하나의 값으로 줄어들 때 까지 람다는 각 요소를 반복해서 조합한다.</p>
</blockquote>
<div class="note success">
            <p>초기값을 받지 않을 경우 reduce는 Optional 객체를 반환한다.</p>
          </div>
<h2 id="최대값과-최솟값"><a href="#최대값과-최솟값" class="headerlink" title="최대값과 최솟값"></a>최대값과 최솟값</h2><figure class="highlight java"><figcaption><span>Reducing.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reducing</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Optional&lt;Integer&gt; max = numbers.stream().reduce((a, b) -&gt; Integer.max(a, b));</span><br><span class="line">        System.out.println(<span class="string">"max : "</span> + max.get());</span><br><span class="line"></span><br><span class="line">        Optional&lt;Integer&gt; min = numbers.stream().reduce((a, b) -&gt; Integer.min(a, b));</span><br><span class="line">        System.out.println(<span class="string">"min : "</span> + min.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">max : <span class="number">5</span></span><br><span class="line">min : <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h1 id="중간-연산과-최종-연산-정리"><a href="#중간-연산과-최종-연산-정리" class="headerlink" title="중간 연산과 최종 연산 정리"></a>중간 연산과 최종 연산 정리</h1><table>
<thead>
<tr>
<th>연산</th>
<th>형식</th>
<th>반환 형식</th>
<th>사용된 함수형 인터페이스 형식</th>
<th>함수 디스크립터</th>
</tr>
</thead>
<tbody>
<tr>
<td>filter</td>
<td>중간 연산</td>
<td>Stream<t></t></td>
<td>Predicate<t></t></td>
<td>T -&gt; boolean</td>
</tr>
<tr>
<td>distinct</td>
<td>중간 연산(상태 있는 언바운드)</td>
<td>Stream<t></t></td>
<td></td>
<td></td>
</tr>
<tr>
<td>skip</td>
<td>중간 연산(상태 있는 언바운드)</td>
<td>Stream<t></t></td>
<td>Long</td>
<td></td>
</tr>
<tr>
<td>limit</td>
<td>중간 연산(상태 있는 언바운드)</td>
<td>Stream<t></t></td>
<td>Long</td>
<td></td>
</tr>
<tr>
<td>map</td>
<td>중간 연산</td>
<td>Stream<r></r></td>
<td>Function&lt;T, R&gt;</td>
<td>T -&gt; R</td>
</tr>
<tr>
<td>flatMap</td>
<td>중간 연산</td>
<td>Stream<r></r></td>
<td>Function&lt;T, Stream<r>&gt;</r></td>
<td>T -&gt; Stream<r></r></td>
</tr>
<tr>
<td>sorted</td>
<td>중간 연산(상태 있는 언바운드)</td>
<td>Stream<t></t></td>
<td>Comparator<t></t></td>
<td>(T, T) -&gt; int</td>
</tr>
<tr>
<td>anyMatch</td>
<td>최종 연산</td>
<td>boolean</td>
<td>Predicate<t></t></td>
<td>T -&gt; boolean</td>
</tr>
<tr>
<td>noneMatch</td>
<td>최종 연산</td>
<td>boolean</td>
<td>Predicate<t></t></td>
<td>T -&gt; boolean</td>
</tr>
<tr>
<td>allMatch</td>
<td>최종 연산</td>
<td>boolean</td>
<td>Predicate<t></t></td>
<td>T -&gt; boolean</td>
</tr>
<tr>
<td>findAny</td>
<td>최종 연산</td>
<td>Optional<t></t></td>
<td></td>
<td></td>
</tr>
<tr>
<td>findFirst</td>
<td>최종 연산</td>
<td>Optional<t></t></td>
<td></td>
<td></td>
</tr>
<tr>
<td>forEach</td>
<td>최종 연산</td>
<td>void</td>
<td>Consumer<t></t></td>
<td>T -&gt; void</td>
</tr>
<tr>
<td>Collect</td>
<td>최종 연산</td>
<td>R</td>
<td>Collector&lt;T, A, R&gt;</td>
<td></td>
</tr>
<tr>
<td>Reduce</td>
<td>최종 연산(상태 있는 바운드)</td>
<td>Optional<t></t></td>
<td>BinaryOperator<t></t></td>
<td>(T, T) -&gt; T</td>
</tr>
<tr>
<td>count</td>
<td>최종 연산</td>
<td>long</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="숫자형-스트림"><a href="#숫자형-스트림" class="headerlink" title="숫자형 스트림"></a>숫자형 스트림</h2><p><code>reduce</code>메서드는 스트림 요소의 합을 박싱 비용이 숨어있다. 이런 기본형 숫자 스트림에 대해서 살펴 본다.</p>
<h3 id="기본형-특화-스트림"><a href="#기본형-특화-스트림" class="headerlink" title="기본형 특화 스트림"></a>기본형 특화 스트림</h3><p>자바8에서는 세가 가지 기본형 특화 스트림을 제공한다. 스트림 API는 박싱 비용을 피할 수 있도록 <code>int 요소에 특화된 IntStream</code>, <code>double 요소에 특화된 DoubleStream</code>, <code>long 요소에 특화된 LongStream</code>을 제공한다.</p>
<h4 id="숫자-스트림으로-매핑"><a href="#숫자-스트림으로-매핑" class="headerlink" title="숫자 스트림으로 매핑"></a>숫자 스트림으로 매핑</h4><p>스트림을 특화 스트림으로 변환할 때는 <code>mapToInt</code>, <code>mapToDouble</code>, <code>mapToLong</code> 세 가지 메서드를 가장 많이 사용한다.<br><figure class="highlight java"><figcaption><span>NumericStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumericStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sumNumbers = numbers.stream()</span><br><span class="line">                                .mapToInt(d -&gt; d)</span><br><span class="line">                                .sum();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sumNumbers : "</span> + sumNumbers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Number of calories : <span class="number">15</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>d.getCalories()</code>데이터 타입을 기본형 <code>int</code>로 변경후 데이터에 값들을  <code>sum()</code>메서드를 이용해서 합계 결과를 리턴하는 것을 확인할 수 있다. (스트림이 비어있으면 sum은 기본값 0을 반환한다.)</p>
</blockquote>
<h4 id="객체-스트림으로-복원하기"><a href="#객체-스트림으로-복원하기" class="headerlink" title="객체 스트림으로 복원하기"></a>객체 스트림으로 복원하기</h4><p>boxed메서드를 이용해서 특화 스트림을 일반 스트림으로 변환할 수 있다.<br><figure class="highlight java"><figcaption><span>NumericStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumericStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        IntStream intStream = numbers.stream()</span><br><span class="line">                                     .mapToInt(d -&gt; d); <span class="comment">// 스트림을 숫자 스트림으로 반환</span></span><br><span class="line"></span><br><span class="line">        Stream&lt;Integer&gt; stream = intStream.boxed(); <span class="comment">// 숫자 스트림을 스트림으로 변환</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="기본값-OptionalInt"><a href="#기본값-OptionalInt" class="headerlink" title="기본값:OptionalInt"></a>기본값:OptionalInt</h4><figure class="highlight java"><figcaption><span>NumericStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumericStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        OptionalInt maxNumbers = numbers.stream()</span><br><span class="line">                                        .mapToInt(d -&gt; d)</span><br><span class="line">                                        .max();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max = maxNumbers.orElse(<span class="number">1</span>); <span class="comment">// 값이 없을 때 기본 최대값을 명시적으로 설정</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="숫자-범위"><a href="#숫자-범위" class="headerlink" title="숫자 범위"></a>숫자 범위</h3><p>특정 범위의 숫자응 이용해야 되는 상황에서 자바8에서는 <code>IntStream</code>, <code>LongStream</code>에서는 <code>range</code>와 <code>rangeClosed</code>라는 두 가지 정적 메서드를 제공한다. <code>range</code>는 시작값과 종료값을 포함되지 않는 반면 <code>rangeClosed</code>는 시작값과 종료값이 결과에 포함된다.<br><figure class="highlight java"><figcaption><span>NumericStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumericStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        IntStream evenNumbers = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">                                         .filter(n -&gt; n % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(evenNumbers.count());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure></p>
<h2 id="스트림-만들기"><a href="#스트림-만들기" class="headerlink" title="스트림 만들기"></a>스트림 만들기</h2><p>일련의 값, 배열, 파일, 심지어 함수를 이용한 무한 스트림 만들기 등 다양한 방식으로 스트림을 만드는 방법을 설명한다.</p>
<h3 id="값으로-스트림-만들기"><a href="#값으로-스트림-만들기" class="headerlink" title="값으로 스트림 만들기"></a>값으로 스트림 만들기</h3><figure class="highlight java"><figcaption><span>BuildingStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildingStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Stream.of</span></span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"Java 8"</span>, <span class="string">"Lambdas"</span>, <span class="string">"In"</span>, <span class="string">"Action"</span>);</span><br><span class="line">        stream.map(s -&gt; s.toUpperCase()).forEach(System.out::println); <span class="comment">// 스트림을 이용해 모두 대문자로 변경</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stream.empty</span></span><br><span class="line">        Stream&lt;String&gt; emptyStream = Stream.empty(); <span class="comment">// 스트림 비움</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="배열로-스트림-만들기"><a href="#배열로-스트림-만들기" class="headerlink" title="배열로 스트림 만들기"></a>배열로 스트림 만들기</h3><p><code>Arrays.stream</code>을 이용해서 스트림을 만들 수 있다.<br><figure class="highlight java"><figcaption><span>BuildingStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildingStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        System.out.println(Arrays.stream(numbers).sum()); <span class="comment">// 합:41</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="파일로-스트림-만들기"><a href="#파일로-스트림-만들기" class="headerlink" title="파일로 스트림 만들기"></a>파일로 스트림 만들기</h3><figure class="highlight java"><figcaption><span>BuildingStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildingStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// File.stream</span></span><br><span class="line">        <span class="keyword">long</span> uniqueWords = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (Stream&lt;String&gt; lines =  Files.lines(Paths.get(<span class="string">"me/action/chapter5/data.txt"</span>), Charset.defaultCharset())) &#123; <span class="comment">// 스트림은 자원을 자동으로 해제할 수 있는 AutoClosable 이다.</span></span><br><span class="line">            uniqueWords = lines.flatMap(line -&gt; Arrays.stream(line.split(<span class="string">" "</span>))) <span class="comment">// 단어 스트림 생성</span></span><br><span class="line">                                    .distinct() <span class="comment">// 중복 제거</span></span><br><span class="line">                                    .count(); <span class="comment">// 고유 단어 수 계산</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace(); <span class="comment">// 파일을 열다가 예외가 발생하면 처리한다.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(uniqueWords); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="함수로-무한-스트림-만들기"><a href="#함수로-무한-스트림-만들기" class="headerlink" title="함수로 무한 스트림 만들기"></a>함수로 무한 스트림 만들기</h3><p>두 연산을 이용해서 <code>무한 스트림</code>, 즉 고정된 컬렉션에서 고정된 크기의 스트림을 만들었던 것과는 달리 크기가 고정되지 않은 스트림을 만들 수 있다.<br><figure class="highlight java"><figcaption><span>BuildingStreams.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildingStreams</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// iterate</span></span><br><span class="line">        Stream.iterate(<span class="number">0</span> ,n -&gt; n + <span class="number">2</span>)</span><br><span class="line">              .limit(<span class="number">10</span>)</span><br><span class="line">              .forEach(i -&gt; System.out.println(i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// generate</span></span><br><span class="line">        Stream.generate(() -&gt; Math.random())</span><br><span class="line">              .limit(<span class="number">5</span>)</span><br><span class="line">              .forEach(i -&gt; System.out.println(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.5765920818526044</span></span><br><span class="line"><span class="number">0.0475038182662455</span></span><br><span class="line"><span class="number">0.6976521441399889</span></span><br><span class="line"><span class="number">0.5598998624593787</span></span><br><span class="line"><span class="number">0.6460743089135811</span></span><br></pre></td></tr></table></figure></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter5" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 4. 새로운 날짜와 시간 API</title>
    <url>/2019/06/23/java/java8inaction/chapter4/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. 자바8에서 날짜와 시간 문제를 개선하는 새로운 날짜와 시간 API를 제공하는 새로운 기능에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="Localdate-LocalTime-Instant-Duration-Period"><a href="#Localdate-LocalTime-Instant-Duration-Period" class="headerlink" title="Localdate, LocalTime, Instant, Duration, Period"></a>Localdate, LocalTime, Instant, Duration, Period</h2><p><code>java.time</code> 패키지는 <code>Localdate</code>, <code>LocalTime</code>, <code>LocalDateTime</code>, <code>Instant</code>, <code>Duration</code>, <code>Period</code> 등 새로운 클래스를 제공한다.</p>
<h3 id="LocaDate와-LocalTime-사용"><a href="#LocaDate와-LocalTime-사용" class="headerlink" title="LocaDate와 LocalTime 사용"></a>LocaDate와 LocalTime 사용</h3><p><code>LocalDate</code> 인스턴스는 시간을 제외한 날짜를 표현하는 불변 객체다. 정적 팩토리 메서드는 <code>of</code>로 <code>LocalDate</code> 인스턴스를 만들 수 있다.<br><figure class="highlight java"><figcaption><span>DateTimeExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useLocalDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useLocalDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now(); <span class="comment">// 시스템의 현재 날짜 정보</span></span><br><span class="line">        System.out.println(<span class="string">"today : "</span> + today);</span><br><span class="line"></span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">"date : "</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> year = date.getYear();</span><br><span class="line">        System.out.println(<span class="string">"year : "</span> + year);</span><br><span class="line"></span><br><span class="line">        Month month = date.getMonth();</span><br><span class="line">        System.out.println(<span class="string">"month : "</span> + month);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> day = date.getDayOfMonth();</span><br><span class="line">        System.out.println(<span class="string">"day : "</span> + day);</span><br><span class="line"></span><br><span class="line">        DayOfWeek dayOfWeek = date.getDayOfWeek();</span><br><span class="line">        System.out.println(<span class="string">"dayOfWeek : "</span> + dayOfWeek);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len = date.lengthOfMonth(); <span class="comment">// 6월의 일수</span></span><br><span class="line">        System.out.println(<span class="string">"len : "</span> + len);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> leap = date.isLeapYear(); <span class="comment">// 윤년이 아님</span></span><br><span class="line">        System.out.println(<span class="string">"leap : "</span> + leap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>위에 코드에서 보여주는 것처럼 <code>LocalDate</code> 인스턴스는 년도, 달, 요일 등을 반환하는 메서드를 제공한다.</p>
</blockquote>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">today : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line">date : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span></span><br><span class="line">year : <span class="number">2019</span></span><br><span class="line">month : JUNE</span><br><span class="line">day : <span class="number">21</span></span><br><span class="line">dayOfWeek : FRIDAY</span><br><span class="line">len : <span class="number">30</span></span><br><span class="line">leap : <span class="keyword">false</span></span><br></pre></td></tr></table></figure></p>
<h4 id="get-메서드에-TemporalField를-이용해서-LocalDate값-읽기"><a href="#get-메서드에-TemporalField를-이용해서-LocalDate값-읽기" class="headerlink" title="get 메서드에 TemporalField를 이용해서 LocalDate값 읽기"></a>get 메서드에 TemporalField를 이용해서 LocalDate값 읽기</h4><figure class="highlight java"><figcaption><span>DateTimeExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useTempLocalDate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useTempLocalDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">"date : "</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> year = date.get(ChronoField.YEAR);</span><br><span class="line">        System.out.println(<span class="string">"year : "</span> + year);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> month = date.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line">        System.out.println(<span class="string">"month : "</span> + month);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> day = date.get(ChronoField.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(<span class="string">"year : "</span> + year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span></span><br><span class="line">year : <span class="number">2019</span></span><br><span class="line">month : <span class="number">6</span></span><br><span class="line">year : <span class="number">2019</span></span><br></pre></td></tr></table></figure></p>
<h4 id="LocalTime-만들고-값-읽기"><a href="#LocalTime-만들고-값-읽기" class="headerlink" title="LocalTime 만들고 값 읽기"></a>LocalTime 만들고 값 읽기</h4><figure class="highlight java"><figcaption><span>DateTimeExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useLocalTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useLocalTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalTime time = LocalTime.of(<span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">"time : "</span> + time);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> hour = time.getHour();</span><br><span class="line">        System.out.println(<span class="string">"hour : "</span> + hour);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> minute = time.getMinute();</span><br><span class="line">        System.out.println(<span class="string">"minute : "</span> + minute);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> second = time.getSecond();</span><br><span class="line">        System.out.println(<span class="string">"second : "</span> + second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">time : <span class="number">13</span>:<span class="number">45</span>:<span class="number">20</span></span><br><span class="line">hour : <span class="number">13</span></span><br><span class="line">minute : <span class="number">45</span></span><br><span class="line">second : <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h4 id="날짜와-시간-문자열로-LocalDate와-LocalTime의-인스턴스를-만드는-방법"><a href="#날짜와-시간-문자열로-LocalDate와-LocalTime의-인스턴스를-만드는-방법" class="headerlink" title="날짜와 시간 문자열로 LocalDate와 LocalTime의 인스턴스를 만드는 방법"></a>날짜와 시간 문자열로 LocalDate와 LocalTime의 인스턴스를 만드는 방법</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useLocalParse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useLocalParse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.parse(<span class="string">"2019-06-20"</span>);</span><br><span class="line">        System.out.println(<span class="string">"date : "</span> + date);</span><br><span class="line"></span><br><span class="line">        LocalTime time = LocalTime.parse(<span class="string">"13:45:20"</span>);</span><br><span class="line">        System.out.println(<span class="string">"time : "</span> + time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">20</span></span><br><span class="line">time : <span class="number">13</span>:<span class="number">45</span>:<span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h3 id="날짜와-시간-조합"><a href="#날짜와-시간-조합" class="headerlink" title="날짜와 시간 조합"></a>날짜와 시간 조합</h3><p><code>LocalDateTime</code>은 <code>LocalDate</code>와 <code>LocalTime</code>을 쌍으로 갖는 복합 클래스다.<br><figure class="highlight java"><figcaption><span>LocalDatetimeExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDatetimeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useLocalDateTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useLocalDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDateTime dt1 = LocalDateTime.of(<span class="number">2019</span>, Month.MARCH, <span class="number">23</span>, <span class="number">20</span>, <span class="number">48</span>, <span class="number">11</span>);</span><br><span class="line">        System.out.println(<span class="string">"dt1 : "</span> + dt1);</span><br><span class="line">        System.out.println(<span class="string">"dt1.toLocalDate : "</span> + dt1.toLocalDate());</span><br><span class="line">        System.out.println(<span class="string">"dt1.toLocalTime : "</span> + dt1.toLocalTime());</span><br><span class="line"></span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">21</span>);</span><br><span class="line">        LocalTime time = LocalTime.of(<span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line">        LocalDateTime dt2 = LocalDateTime.of(date, time);</span><br><span class="line">        System.out.println(<span class="string">"dt2 : "</span> + dt2);</span><br><span class="line"></span><br><span class="line">        LocalDateTime dt3 = date.atTime(<span class="number">10</span>, <span class="number">30</span>, <span class="number">25</span>);</span><br><span class="line">        System.out.println(<span class="string">"dt3 : "</span> + dt3);</span><br><span class="line"></span><br><span class="line">        LocalDateTime dt4 = date.atTime(time);</span><br><span class="line">        System.out.println(<span class="string">"dt4 : "</span> + dt4);</span><br><span class="line"></span><br><span class="line">        LocalDateTime dt5 = time.atDate(date);</span><br><span class="line">        System.out.println(<span class="string">"dt5 : "</span> + dt5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dt1 : <span class="number">2019</span>-<span class="number">03</span>-<span class="number">23</span>T20:<span class="number">48</span>:<span class="number">11</span></span><br><span class="line">dt1.toLocalDate : <span class="number">2019</span>-<span class="number">03</span>-<span class="number">23</span></span><br><span class="line">dt1.toLocalTime : <span class="number">20</span>:<span class="number">48</span>:<span class="number">11</span></span><br><span class="line">dt2 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span>T13:<span class="number">45</span>:<span class="number">20</span></span><br><span class="line">dt3 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span>T10:<span class="number">30</span>:<span class="number">25</span></span><br><span class="line">dt4 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span>T13:<span class="number">45</span>:<span class="number">20</span></span><br><span class="line">dt5 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span>T13:<span class="number">45</span>:<span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Duration와-Period-정의"><a href="#Duration와-Period-정의" class="headerlink" title="Duration와 Period 정의"></a>Duration와 Period 정의</h3><p><code>Duration</code> 클래스의 정적 팩토리 메서드 <code>between</code>으로 두 시간 객체 사이의 지속시간을 만들 수 있다. <code>Period</code> 클래스 팩토리 메서드 <code>between</code>을 이용하면 두 <code>LocalDate</code>의 차이를 확인할 수 있다.<br><figure class="highlight java"><figcaption><span>DurationAndPeriodExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DurationAndPeriodExamples</span> </span></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        useDurationAndPeroid();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useDurationAndPeroid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalTime time = LocalTime.of(<span class="number">13</span>, <span class="number">45</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        Instant instant = Instant.ofEpochSecond(<span class="number">44</span> * <span class="number">365</span> * <span class="number">86400</span>);</span><br><span class="line">        Instant now = Instant.now();</span><br><span class="line"></span><br><span class="line">        Duration d1 = Duration.between(LocalTime.of(<span class="number">13</span>, <span class="number">45</span>, <span class="number">10</span>), time);</span><br><span class="line">        Duration d2 = Duration.between(instant, now);</span><br><span class="line">        System.out.println(<span class="string">"d1.getSeconds : "</span> + d1.getSeconds());</span><br><span class="line">        System.out.println(<span class="string">"d2.getSeconds : "</span> + d2.getSeconds());</span><br><span class="line"></span><br><span class="line">        Duration threeMinutes = Duration.ofMinutes(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"threeMinutes : "</span> + threeMinutes);</span><br><span class="line"></span><br><span class="line">        Duration threeMinutes2 = Duration.of(<span class="number">3</span>, ChronoUnit.MINUTES);</span><br><span class="line">        System.out.println(<span class="string">"threeMinutes2 : "</span> + threeMinutes2);</span><br><span class="line"></span><br><span class="line">        Period tendays = Period.ofDays(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"tendays : "</span> + tendays);</span><br><span class="line"></span><br><span class="line">        Period threeWeeks = Period.ofWeeks(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"threeWeeks : "</span> + threeWeeks);</span><br><span class="line"></span><br><span class="line">        Period twoYearsSixMonthsOneDay = Period.of(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"twoYearsSixMonthsOneDay : "</span> + twoYearsSixMonthsOneDay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">d1.getSeconds : <span class="number">10</span></span><br><span class="line">d2.getSeconds : <span class="number">173709219</span></span><br><span class="line">threeMinutes : PT3M</span><br><span class="line">threeMinutes2 : PT3M</span><br><span class="line">tendays : P10D</span><br><span class="line">threeWeeks : P21D</span><br><span class="line">twoYearsSixMonthsOneDay : P2Y6M1D</span><br></pre></td></tr></table></figure></p>
<p>간격을 표현하는 날짜와 시간 클래스의 공통 메서드</p>
<table>
<thead>
<tr>
<th>메서드</th>
<th>정적</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>between</td>
<td>네</td>
<td>두시간 사이의 간격을 생성함.</td>
</tr>
<tr>
<td>from</td>
<td>네</td>
<td>시간 단위로 간격을 생성함</td>
</tr>
<tr>
<td>of</td>
<td>네</td>
<td>주어진 구성 요소에서 간격 인스턴스를 생성함.</td>
</tr>
<tr>
<td>parse</td>
<td>네</td>
<td>문자열을 파싱해서 간격 인스턴스를 생성함.</td>
</tr>
<tr>
<td>addTo</td>
<td>아니요</td>
<td>현재값의 복사본을 생성한 다음에 지정된 Temporal 객체에 추가함</td>
</tr>
<tr>
<td>get</td>
<td>아니요</td>
<td>현재 간격 정보값을 읽음.</td>
</tr>
<tr>
<td>isNegative</td>
<td>아니요</td>
<td>간격이 음수인지 확인함</td>
</tr>
<tr>
<td>isZero</td>
<td>아니요</td>
<td>간격이 0인지 확인함.</td>
</tr>
<tr>
<td>minus</td>
<td>아니요</td>
<td>현재값에서 주어진 시간을 뺀 복사본을 생성함.</td>
</tr>
<tr>
<td>multipliedBy</td>
<td>아니요</td>
<td>현재값에 주어진 값을 곱한 복사본을 생성함.</td>
</tr>
<tr>
<td>negated</td>
<td>아니요</td>
<td>주어진 값의 부호를 반전한 복사본을 생성함.</td>
</tr>
<tr>
<td>plus</td>
<td>아니요</td>
<td>현재값에 주어진 시간을 더한 복사본을 생성함.</td>
</tr>
<tr>
<td>subtractFrom</td>
<td>아니요</td>
<td>지정된 Temporal 객체에서 간격을 뺌.</td>
</tr>
</tbody>
</table>
<h2 id="날짜-조정-파싱-포메팅"><a href="#날짜-조정-파싱-포메팅" class="headerlink" title="날짜 조정, 파싱, 포메팅"></a>날짜 조정, 파싱, 포메팅</h2><p><code>withAttribute</code>  메서드로 기존의 <code>LocalDate</code>를 바꾼 버전을 직접 간단하게 만들 수 있다.</p>
<h3 id="절대적인-방식으로-LocalDate의-속성-바꾸기"><a href="#절대적인-방식으로-LocalDate의-속성-바꾸기" class="headerlink" title="절대적인 방식으로 LocalDate의 속성 바꾸기"></a>절대적인 방식으로 LocalDate의 속성 바꾸기</h3><figure class="highlight java"><figcaption><span>WithAttributeExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithAttributeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        userAbsoluteWithAttribute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">userAbsoluteWithAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date1 = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(<span class="string">"date1 : "</span> + date1);</span><br><span class="line"></span><br><span class="line">        LocalDate date2 = date1.withYear(<span class="number">2018</span>);</span><br><span class="line">        System.out.println(<span class="string">"date2 : "</span> + date2);</span><br><span class="line"></span><br><span class="line">        LocalDate date3 = date2.withDayOfMonth(<span class="number">30</span>);</span><br><span class="line">        System.out.println(<span class="string">"date3 : "</span> + date3);</span><br><span class="line"></span><br><span class="line">        LocalDate date4 = date3.with(ChronoField.MONTH_OF_YEAR, <span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">"date4 : "</span> + date4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date1 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line">date2 : <span class="number">2018</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line">date3 : <span class="number">2018</span>-<span class="number">06</span>-<span class="number">30</span></span><br><span class="line">date4 : <span class="number">2018</span>-<span class="number">07</span>-<span class="number">30</span></span><br></pre></td></tr></table></figure></p>
<h3 id="상대적인-방식으로-LocalDate의-속성-바꾸기"><a href="#상대적인-방식으로-LocalDate의-속성-바꾸기" class="headerlink" title="상대적인 방식으로 LocalDate의 속성 바꾸기"></a>상대적인 방식으로 LocalDate의 속성 바꾸기</h3><figure class="highlight java"><figcaption><span>WithAttributeExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithAttributeExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        userRelativeWithAttribute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">userRelativeWithAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date1 = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">23</span>);</span><br><span class="line">        System.out.println(<span class="string">"date1 : "</span> + date1);</span><br><span class="line"></span><br><span class="line">        LocalDate date2 = date1.plusWeeks(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"date2 : "</span> + date2);</span><br><span class="line"></span><br><span class="line">        LocalDate date3 = date2.minusWeeks(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"date3 : "</span> + date3);</span><br><span class="line"></span><br><span class="line">        LocalDate date4 = date3.plus(<span class="number">6</span>, ChronoUnit.MONTHS);</span><br><span class="line">        System.out.println(<span class="string">"date4 : "</span> + date4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date1 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line">date2 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">30</span></span><br><span class="line">date3 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">09</span></span><br><span class="line">date4 : <span class="number">2019</span>-<span class="number">12</span>-<span class="number">09</span></span><br></pre></td></tr></table></figure></p>
<p>특정 시점을 표현하는 날짜 시간 클래스의 공통 메서드</p>
<table>
<thead>
<tr>
<th>메서드</th>
<th>정적</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>from</td>
<td>네</td>
<td>주어진 Temporal 객체를 이용해서 클래스의 인스턴스를 생성함.</td>
</tr>
<tr>
<td>now</td>
<td>네</td>
<td>시스템 시계로 Temporal 객체를 생성함.</td>
</tr>
<tr>
<td>of</td>
<td>네</td>
<td>주어진 구성 요소에서 Temporal 객체의 인스턴스를 생성함.</td>
</tr>
<tr>
<td>parse</td>
<td>네</td>
<td>문자열을 파싱해서 Temporal 객체를 생성함.</td>
</tr>
<tr>
<td>atOffset</td>
<td>아니요</td>
<td>시간대 오프셋과 Temporal 객체를 합침.</td>
</tr>
<tr>
<td>atZone</td>
<td>아니요</td>
<td>시간대와 Temporal 객체를 합침.</td>
</tr>
<tr>
<td>foramt</td>
<td>아니요</td>
<td>지정도니 포매터를 이용해서 temporal 객체를 문자열로 변환함(Instant는 지원하지 않음.)</td>
</tr>
<tr>
<td>get</td>
<td>아니요</td>
<td>Temporal 객체의 상태를 읽음.</td>
</tr>
<tr>
<td>minus</td>
<td>아니요</td>
<td>특정 시간을 뺀 Temporal 객체의 복사본을 생성함.</td>
</tr>
<tr>
<td>plus</td>
<td>아니요</td>
<td>특정 시간을 더한 Temporal 객체의 복사본을 생성함.</td>
</tr>
<tr>
<td>with</td>
<td>아니요</td>
<td>일부 상태를 바꾼 Temporal 객체의 복사본을 생성함.</td>
</tr>
</tbody>
</table>
<h3 id="TemporalAdjusters-사용하기"><a href="#TemporalAdjusters-사용하기" class="headerlink" title="TemporalAdjusters 사용하기"></a>TemporalAdjusters 사용하기</h3><p>다음 주 일요일, 돌아오는 평일, 어떤 달의 마지막 날 등 좀 더 복잡한 날짜 조정 기능이 필요 할 때 이용<br><figure class="highlight java"><figcaption><span>AdjusterExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdjusterExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useTemporalAdjuster();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useTemporalAdjuster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date1 = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">"date1 : "</span> + date1);</span><br><span class="line"></span><br><span class="line">        LocalDate date2 = date1.with(nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line">        System.out.println(<span class="string">"date2 : "</span> + date2);</span><br><span class="line"></span><br><span class="line">        LocalDate date3 = date2.with(lastDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">"date3 : "</span> + date3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">date1 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">21</span></span><br><span class="line">date2 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line">date3 : <span class="number">2019</span>-<span class="number">06</span>-<span class="number">30</span></span><br></pre></td></tr></table></figure></p>
<p>TemporalAdjusters 클래스의 팩토리 메서드(<a href="https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAdjusters.html" rel="external nofollow noopener noreferrer" target="_blank">API 레퍼런스 참조</a>)</p>
<table>
<thead>
<tr>
<th>메서드</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>dayOfWeekInMonth</td>
<td>‘3월의 둘째 화요일’처럼 서수 요일에 해당하는 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>firstDayofMonth</td>
<td>현재 달의 첫 번째 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>firstDayOfNextMonth</td>
<td>다음 달의 첫 번째 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>firstDayOfNextYear</td>
<td>내년의 첫 번째 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>firstDayOfYear</td>
<td>올해의 첫 번째 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>firstInMonth</td>
<td>‘3월의 첫 번째 화요일’처럼 현재 달의 첫 번째 요일에 해당하는 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>lastDayOfMonth</td>
<td>현재 달의 마지막 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>lastDayOfNexMonth</td>
<td>다음 달의 마지막 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>lastDayOfYear</td>
<td>올해의 마지막 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>lastInMonth</td>
<td>‘3월의 마지막 화요일’처럼 현재 달의 마지막 요일에 해당하는 날짜를 반환하는 TemporalAdjuster를 반환함.</td>
</tr>
<tr>
<td>next</td>
<td>현재 날짜 이후로 지정한 요일이 처음으로 나타는 날짜를 반환하는 TemporalAdjuster를 반환함(현재 날짜는 포함하지 않음.)</td>
</tr>
<tr>
<td>previous</td>
<td>현재 날짜 이후로 역으로 날짜를 거슬러 올라가며 지정한 요일이 처음으로 나타나는 날짜를 반환하는 TemporalAdjuster를 반환함(현재 날짜는 포함하지 않음.</td>
</tr>
<tr>
<td>nextOrSame</td>
<td>현재 날짜 이후로 지정한 요일이 처음으로 나타나는 날짜를 반환하는 TemporalAdjuster를 반환함(현재 날짜도 포함.)</td>
</tr>
<tr>
<td>previousOrSame</td>
<td>현재 날짜 이후로 역으로 날짜를 거슬러 올라가며 지정한 요일이 처음으로 나타나는 날짜를 반환하는 TemporalAdjuster를 반환함(현재 날짜도 포함.)</td>
</tr>
</tbody>
</table>
<h3 id="커스텀-TemporalAdjuster-구현"><a href="#커스텀-TemporalAdjuster-구현" class="headerlink" title="커스텀 TemporalAdjuster 구현"></a>커스텀 TemporalAdjuster 구현</h3><figure class="highlight java"><figcaption><span>CustomTemporalAdjister.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomTemporalAdjister</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2019</span>, <span class="number">06</span>, <span class="number">23</span>);</span><br><span class="line">        date = date.with(nextOrSame(DayOfWeek.SUNDAY));</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        date = date.with(lastDayOfMonth());</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        date = date.with(<span class="keyword">new</span> NextWorkingDay());</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        date = date.with(nextOrSame(DayOfWeek.FRIDAY));</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        date = date.with(<span class="keyword">new</span> NextWorkingDay());</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        date = date.with(nextOrSame(DayOfWeek.FRIDAY));</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 람다 표현식</span></span><br><span class="line">        date = date.with(temporal -&gt; &#123;</span><br><span class="line">            DayOfWeek dow = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">            <span class="keyword">int</span> dayToAdd = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (dow == DayOfWeek.FRIDAY) dayToAdd = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (dow == DayOfWeek.SATURDAY) dayToAdd = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">return</span> temporal.plus(dayToAdd, ChronoUnit.DAYS);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NextWorkingDay</span> <span class="keyword">implements</span> <span class="title">TemporalAdjuster</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span> </span>&#123;</span><br><span class="line">            DayOfWeek dow = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));</span><br><span class="line">            <span class="keyword">int</span> dayToAdd = <span class="number">1</span>; <span class="comment">// 하루 추가</span></span><br><span class="line">            <span class="keyword">if</span> (dow == DayOfWeek.FRIDAY) dayToAdd = <span class="number">3</span>; <span class="comment">// 오늘이 금요일이면 3일 추가</span></span><br><span class="line">            <span class="keyword">if</span> (dow == DayOfWeek.SATURDAY) dayToAdd = <span class="number">2</span>; <span class="comment">// 토요일이면 2일 추가</span></span><br><span class="line">            <span class="keyword">return</span> temporal.plus(dayToAdd, ChronoUnit.DAYS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">30</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">01</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">05</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">08</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">12</span></span><br><span class="line"><span class="number">2019</span>-<span class="number">07</span>-<span class="number">15</span></span><br></pre></td></tr></table></figure></p>
<h3 id="날짜와-시간-객체-출력과-파싱"><a href="#날짜와-시간-객체-출력과-파싱" class="headerlink" title="날짜와 시간 객체 출력과 파싱"></a>날짜와 시간 객체 출력과 파싱</h3><p><code>DateTimeFomatter</code>를 이용해서 날짜나 시간을 특정 형식의 문자열로 만들 수 있다.<br><figure class="highlight java"><figcaption><span>DateFormatterExamples.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatterExamples</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        useDateFormatter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useDateFormatter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2019</span>, <span class="number">6</span>, <span class="number">23</span>);</span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"dd/MM/yyyy"</span>);</span><br><span class="line">        DateTimeFormatter koreaFormatter = DateTimeFormatter.ofPattern(<span class="string">"d. MMMM yyyy"</span>, Locale.KOREA);</span><br><span class="line"></span><br><span class="line">        System.out.println(date.format(DateTimeFormatter.ISO_LOCAL_DATE));</span><br><span class="line">        System.out.println(date.format(formatter));</span><br><span class="line">        System.out.println(date.format(koreaFormatter));</span><br><span class="line"></span><br><span class="line">        DateTimeFormatter complexFormatter = <span class="keyword">new</span> DateTimeFormatterBuilder()</span><br><span class="line">                .appendText(ChronoField.DAY_OF_MONTH)</span><br><span class="line">                .appendLiteral(<span class="string">". "</span>)</span><br><span class="line">                .appendText(ChronoField.MONTH_OF_YEAR)</span><br><span class="line">                .appendLiteral(<span class="string">" "</span>)</span><br><span class="line">                .appendText(ChronoField.YEAR)</span><br><span class="line">                .parseCaseInsensitive()</span><br><span class="line">                .toFormatter(Locale.KOREA);</span><br><span class="line"></span><br><span class="line">        System.out.println(date.format(complexFormatter));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>결과 화면<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span>-<span class="number">06</span>-<span class="number">23</span></span><br><span class="line"><span class="number">23</span>/<span class="number">06</span>/<span class="number">2019</span></span><br><span class="line"><span class="number">23</span>. <span class="number">6</span>월 <span class="number">2019</span></span><br><span class="line"><span class="number">23</span>. <span class="number">6</span>월 <span class="number">2019</span></span><br></pre></td></tr></table></figure></p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter4" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAdjusters.html" rel="external nofollow noopener noreferrer" target="_blank">https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAdjusters.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 - 1. 함수형 자바스크립트 기본기</title>
    <url>/2019/08/24/javascript/es6/chapter1/</url>
    <content><![CDATA[<hr>
<p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 기본기 평가와 일급, 일급 함수, 고차 함수 에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="평가"><a href="#평가" class="headerlink" title="평가"></a>평가</h2><p>코드가 계산(Envalutation)되어 값을 만드는 것 </p>
<p><img src="/images/javascript/es6/chapter1/1.png" alt></p>
<blockquote>
<p>예를 들어 1 + 2에 대한 결과 값이 3으로 평가 되었다고 한다.</p>
</blockquote>
<h2 id="일급"><a href="#일급" class="headerlink" title="일급"></a>일급</h2><ul>
<li>값으로 다룰 수 있다.</li>
<li>변수에 담을 수 있다.</li>
<li>함수의 인자로 사용될 수 있다.</li>
<li>함수의 결과로 사용될 수 있다.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> add10 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> r = add10(a);</span><br><span class="line"><span class="built_in">console</span>.log(r);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">20</span></span><br></pre></td></tr></table></figure>
<h2 id="일급-함수"><a href="#일급-함수" class="headerlink" title="일급 함수"></a>일급 함수</h2><ul>
<li>함수를 값으로 다룰 수 있다.</li>
<li>조합성과 추상화의 도구</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add5 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">5</span>; <span class="comment">// a라는 변수에 함수를 값으로 다뤄서 담을 수 있다.</span></span><br><span class="line"><span class="built_in">console</span>.log(add5); <span class="comment">// 함수로 전달</span></span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">5</span>)); <span class="comment">// 함수는 평가를 해서 결과로 리턴</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(f1()); <span class="comment">// f1의 함수의 결과는 함수를 전달</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = f1(); <span class="comment">// f1의 함수를 다른 변수(f2)에 담는다.</span></span><br><span class="line"><span class="built_in">console</span>.log(f2);</span><br><span class="line"><span class="built_in">console</span>.log(f2()); <span class="comment">// f2함수 평가</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">5</span></span><br><span class="line">&lt; <span class="number">10</span></span><br><span class="line">&gt; <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span></span><br><span class="line">&gt; <span class="function"><span class="params">()</span> =&gt;</span> <span class="number">1</span></span><br><span class="line">&lt; <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="고차-함수"><a href="#고차-함수" class="headerlink" title="고차 함수"></a>고차 함수</h2><p>함수를 값으로 다루는 함수</p>
<h3 id="함수를-인자로-받아서-실행하는-함수"><a href="#함수를-인자로-받아서-실행하는-함수" class="headerlink" title="함수를 인자로 받아서 실행하는 함수"></a>함수를 인자로 받아서 실행하는 함수</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. apply1 함수</span></span><br><span class="line"><span class="keyword">const</span> apply1 = <span class="function"><span class="params">f</span> =&gt;</span> f(<span class="number">1</span>); <span class="comment">// apply1은 f(함수)를 받아서 f(함수)에 1을 적용 한다.(함수가 함수를 받는다.)</span></span><br><span class="line"><span class="keyword">const</span> add2 = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(apply1(add2)); <span class="comment">// f =&gt; (a =&gt; a + 2)(1)</span></span><br><span class="line"><span class="built_in">console</span>.log(apply1(<span class="function"><span class="params">a</span> =&gt;</span> a - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. times 함수</span></span><br><span class="line"><span class="keyword">const</span> times = <span class="function">(<span class="params">f, n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(++i &lt; n) f(i);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">times(<span class="built_in">console</span>.log, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">times(<span class="function"><span class="params">a</span> =&gt;</span> <span class="built_in">console</span>.log(a + <span class="number">10</span>), <span class="number">3</span>); <span class="comment">// 함수(a =&gt; console.log(a + 10))를 times 함수의 인자값f로 받음.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">0</span></span><br><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">10</span></span><br><span class="line">&gt; <span class="number">11</span></span><br><span class="line">&gt; <span class="number">22</span></span><br></pre></td></tr></table></figure>
<h3 id="함수를-만들어-리턴하는-함수-클로저를-만들어-리턴하는-함수"><a href="#함수를-만들어-리턴하는-함수-클로저를-만들어-리턴하는-함수" class="headerlink" title="함수를 만들어 리턴하는 함수 (클로저를 만들어 리턴하는 함수)"></a>함수를 만들어 리턴하는 함수 (클로저를 만들어 리턴하는 함수)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> addMaker = <span class="function"><span class="params">a</span> =&gt;</span> <span class="function"><span class="params">b</span> =&gt;</span> a + b; <span class="comment">// 함수를 리턴하는 함수(클로저 함수)</span></span><br><span class="line"><span class="keyword">const</span> add10 = addMaker(<span class="number">10</span>); <span class="comment">// add10라는 또 다른 함수를 생성</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">5</span>));</span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">20</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>클로저 함수란 <code>b =&gt; a + b</code>함수가 계속 인자값 <code>a</code>를 기억하고 있다는 뜻이다. 즉, <code>b =&gt; a + b</code>함수는 <code>a</code>기억하는 함수이자 클로저 함수이다.</p>
</blockquote>
<h2 id="함수형-자바스크립트-기본기-소스코드"><a href="#함수형-자바스크립트-기본기-소스코드" class="headerlink" title="함수형 자바스크립트 기본기 소스코드"></a>함수형 자바스크립트 기본기 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/1.%20%ED%95%A8%EC%88%98%ED%98%95%20%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%20%EA%B8%B0%EB%B3%B8%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JavaScript Funtional ES6</category>
      </categories>
      <tags>
        <tag>JavaScript Funtional ES6</tag>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 In Action - 8. null 대신 Optional</title>
    <url>/2019/07/15/java/java8inaction/chapter8/</url>
    <content><![CDATA[<hr>
<p><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">Java8 In Action</a> 을 읽고 정리한 내용이다. <code>java.util.Optional&lt;T&gt;</code>에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="Optional-적용-패턴"><a href="#Optional-적용-패턴" class="headerlink" title="Optional 적용 패턴"></a>Optional 적용 패턴</h2><h3 id="Optional-객체-만들기"><a href="#Optional-객체-만들기" class="headerlink" title="Optional 객체 만들기"></a>Optional 객체 만들기</h3><p><code>Optional</code>을 사용하려면 <code>Optional</code> 객체를 만들어야 한다. 다양한 방법으로 <code>Optional</code> 객체를 만들 수 있다.</p>
<h4 id="빈-Optional"><a href="#빈-Optional" class="headerlink" title="빈 Optional"></a>빈 Optional</h4><p>정적 팩토리 메서드 <code>Optional.empty</code>로 빈 <code>Optional</code> 객체를 얻을 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Car&gt; optionalCar = Optional.empty();</span><br></pre></td></tr></table></figure>
<h4 id="null이-아닌-값으로-Optional-만들기"><a href="#null이-아닌-값으로-Optional-만들기" class="headerlink" title="null이 아닌 값으로 Optional 만들기"></a>null이 아닌 값으로 Optional 만들기</h4><p>정적 팩토리 메서드 <code>Optional.of</code>로 null이 아닌 값을 포함하는 <code>Optional</code>을 만들 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Car&gt; optionalCar1 = Optional.of(car);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>car</code>가 <code>null</code>이면 즉시 <code>NullPointerException</code>이 발생한다.</p>
</blockquote>
<h4 id="null값으로-Optional-만들기"><a href="#null값으로-Optional-만들기" class="headerlink" title="null값으로 Optional 만들기"></a>null값으로 Optional 만들기</h4><p>정적 팩토리 메서드 <code>Optional.ofNullable</code>로 null값을 저장할 수 있는 <code>Optional</code>을 만들 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Car&gt; optionalCar2 = Optional.ofNullable(car);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>car</code>가 <code>null</code>이면 빈 <code>Optional(Optional.empty)</code> 객체가 반환된다.</p>
</blockquote>
<h3 id="디폴트-액션과-Optional-언랩"><a href="#디폴트-액션과-Optional-언랩" class="headerlink" title="디폴트 액션과 Optional 언랩"></a>디폴트 액션과 Optional 언랩</h3><p><code>Optional</code>클래스는 <code>Optional</code> 인스턴스에서 값을 읽을 수 있는 다양한 인스턴스 메서드를 제공한다.</p>
<ol>
<li><code>get()</code>은 값을 읽는 가장 간단한 메서드면서 동시에 가장 안전하지 않은 메서드다. 메서드 get은 래핑된 값이 있으면 해당 값을 반환하고 값이 없으면 <code>NoSuchElementException</code>을 발생 시킨다. 따라서 <code>Optional</code> 에 값이 반드시 있다고 가정할 수 있는 상황이 아니면 get 메서드를 사용하지 않는 것이 바람직하다.</li>
<li><code>orElse(T other)</code> 메서드를 이용하면 <code>Optional</code>이 값을 포함하지 않을 때 디폴트값으로 제공할 수 있다.</li>
<li><code>orElseGet(Supplier&lt;? extends T&gt; other)</code>는 <code>orElse</code> 메서드에 대응하는 게으른 버전의 메서드가. <code>Optional</code>에 값이 없을 때만 Supplier가 실행되기 때문이다.</li>
<li><code>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code>는 <code>Optional</code>이 비어있을때 예외를 발생시킨다는 점에서 get 메서드와 비슷하다. 하지만 이 메서드는 발생시킬 예외의 종류를 선택할 수 있다.</li>
<li><code>ifPresent(Comsumer&lt;? super T&gt; comsumer)</code>를 이용하면 값이 존재할 때 인수로 넘겨준 동작을 실행할 수 있다. 값이 없으면 아무 일도 일어나지 않는다.</li>
</ol>
<h2 id="Optional-클래스의-메서드"><a href="#Optional-클래스의-메서드" class="headerlink" title="Optional 클래스의 메서드"></a>Optional 클래스의 메서드</h2><table>
<thead>
<tr>
<th>메서드</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>empty</td>
<td>빈 Optional 인스턴스 반환.</td>
</tr>
<tr>
<td>filter</td>
<td>값이 존재하며 프레디케이트와 일치하면 값을 포함하는 Optional을 반환하고, 값이 없거나 프레디케이트와 일치하지 않으면 빈 Optional을 반환함.</td>
</tr>
<tr>
<td>flatMap</td>
<td>값이 존재하면 인수로 제공된 함수를 적용한 결과 Optional을 반환하고, 값이 없으면 빈 Optional을 반환함.</td>
</tr>
<tr>
<td>get</td>
<td>값이 존재하면 Optional이 감싸고 있는 값을 반환하고, 값이 없으면 NoSuchElementException이 발생함.</td>
</tr>
<tr>
<td>ifPresent</td>
<td>값이 존재하면 지정된 Consumer를 실행하고, 값이 없으면 아무 일도 일어나지 않음.</td>
</tr>
<tr>
<td>isPresent</td>
<td>값이 존재하면 true를 반환하고, 값이 없으면 false를 반환함.</td>
</tr>
<tr>
<td>map</td>
<td>값이 존재하면 제공된 매핑 함수를 적용함.</td>
</tr>
<tr>
<td>of</td>
<td>값이 존재하면 값을 감싸는 Optional을 반환하고, 값이 null이면 NullPointerException을 발생함.</td>
</tr>
<tr>
<td>ofNullable</td>
<td>값이 존재하면 값을 감싸는 Optional을 반환하고, 값이 null이면 빈 Optional을 반환함.</td>
</tr>
<tr>
<td>orElse</td>
<td>값이 존재하면 값을 반환하고, 값이 없으면 디폴트값을 반환함.</td>
</tr>
<tr>
<td>orElseGet</td>
<td>값이 존재하면 값을 반환하고, 값이 없으면 Supplier에서 제공하는 값을 반환함.</td>
</tr>
<tr>
<td>orElseThrow</td>
<td>값이 존재하면 값을 반환하고, 값이 없으면 Supplier에서 생성한 예외를 발생함.</td>
</tr>
</tbody>
</table>
<h2 id="Optional을-사용한-실용-예제"><a href="#Optional을-사용한-실용-예제" class="headerlink" title="Optional을 사용한 실용 예제"></a>Optional을 사용한 실용 예제</h2><h3 id="잠재적으로-null이-될-수-있는-대상을-Optional로-감싸기"><a href="#잠재적으로-null이-될-수-있는-대상을-Optional로-감싸기" class="headerlink" title="잠재적으로 null이 될 수 있는 대상을 Optional로 감싸기"></a>잠재적으로 null이 될 수 있는 대상을 Optional로 감싸기</h3><p>Map 클래스의 get 메서드의 시그너처는 우리가 고칠 수 없지만 get 메서드의 반환값은 Optional로 감쌀 수 있다.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line">Object value = map.get(<span class="string">"key"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line">Optional&lt;Object&gt; value = Optional.ofNullable(map.get(<span class="string">"key"</span>));</span><br></pre></td></tr></table></figure>
<h3 id="예외의-Optional"><a href="#예외의-Optional" class="headerlink" title="예외의 Optional"></a>예외의 Optional</h3><p>문자열을 정수 Optional로 변환</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Optional&lt;Integer&gt; <span class="title">stringToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(Integer.parseInt(s)); <span class="comment">// 문자열을 정수로 변환할 수 잇으면 정수로 변환된 값을 포함하는 Optional을 반환한다.</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.empty(); <span class="comment">// 그렇지 않으면 빈 Optiona을 반환한다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="응용"><a href="#응용" class="headerlink" title="응용"></a>응용</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">props.setProperty(<span class="string">"a"</span>, <span class="string">"5"</span>);</span><br><span class="line">props.setProperty(<span class="string">"b"</span>, <span class="string">"true"</span>);</span><br><span class="line">props.setProperty(<span class="string">"c"</span>, <span class="string">"-3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readDurationImperative</span><span class="params">(Properties props, String name)</span> </span>&#123;</span><br><span class="line">    String value = props.getProperty(name);</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(value);</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readDurationWithOptional</span><span class="params">(Properties props, String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(props.getProperty(name))</span><br><span class="line">            .flatMap(s -&gt; stringToInt(s))</span><br><span class="line">            .filter(i -&gt; i &gt; <span class="number">0</span>).orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/java-study/tree/master/java-in-action8/src/main/java/me/action/chapter8" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123" rel="external nofollow noopener noreferrer" target="_blank">http://www.hanbit.co.kr/store/books/look.php?p_code=B1999551123</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>Java8 In Action</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java8 In Action</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 - 2. ES6에서의 순회와 이터러블:이터레이터 프로토콜</title>
    <url>/2019/08/28/javascript/es6/chapter2/</url>
    <content><![CDATA[<hr>
<p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 이터레이터 프로토콜에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="기존과-달라진-ES6에서의-리스트-순회"><a href="#기존과-달라진-ES6에서의-리스트-순회" class="headerlink" title="기존과 달라진 ES6에서의 리스트 순회"></a>기존과 달라진 ES6에서의 리스트 순회</h2><h3 id="ES5-이하-버젼"><a href="#ES5-이하-버젼" class="headerlink" title="ES5 이하 버젼"></a>ES5 이하 버젼</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(list[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; a</span><br><span class="line">&gt; b</span><br><span class="line">&gt; c</span><br></pre></td></tr></table></figure>
<p>ES5 이하의 버젼에서는 변수(list, str)에 담긴 값에 길이를 구하기위해서 <code>length</code>라는 프로퍼티를 이용해서 리스트 순회를 적용 하였다.</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> str) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; a</span><br><span class="line">&gt; b</span><br><span class="line">&gt; c</span><br></pre></td></tr></table></figure>
<p>ES6에서는 ES5이하보다 더 선언적으로 for…of  문을 이용해서 순회한다. 코드를 간결하게 해주는 것뿐만 아니라 for…of  문에 대해서 어떻게 추상화를 했는지에 대해서는 더 알아보자.</p>
<h2 id="Array-Set-Map을-통해-알아보는-이터러블-이터레이터-프로토콜"><a href="#Array-Set-Map을-통해-알아보는-이터러블-이터레이터-프로토콜" class="headerlink" title="Array, Set, Map을 통해 알아보는 이터러블/이터레이터 프로토콜"></a>Array, Set, Map을 통해 알아보는 이터러블/이터레이터 프로토콜</h2><h3 id="Array을-통해-알아보기"><a href="#Array을-통해-알아보기" class="headerlink" title="Array을 통해 알아보기"></a>Array을 통해 알아보기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="built_in">Symbol</span>.iterator] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; Uncaught <span class="built_in">TypeError</span>: arr is not iterable</span><br></pre></td></tr></table></figure>
<p><code>Symbol</code>는 ES6에서 추가된 어떤 객체에 대해서 Key로 사용될 수 있다. 여기서 <code>arr[Symbol.iterator] = null;</code>코드를 추가하면 결과에서 에러가 나타나는 것을 확인할 수 있다. 즉, <code>Symbol.iterator</code>가 for…of 문에 영향을 준다는 것을 알 수 있다. (Array, Set, Map 동일)</p>
<h3 id="Set을-통해-알아보기"><a href="#Set을-통해-알아보기" class="headerlink" title="Set을 통해 알아보기"></a>Set을 통해 알아보기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3]);</span><br><span class="line">for (const a of <span class="keyword">set</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&lt; <span class="keyword">set</span>[Symbol.iterator]</span><br><span class="line">&gt; <span class="keyword">set</span>[Symbol.iterator]</span><br><span class="line">    length = 0</span><br><span class="line">    name = "values"</span><br><span class="line">    [[Scopes]] = Scopes[0]</span><br><span class="line">    __proto__ = function () &#123; [native code] &#125;</span><br></pre></td></tr></table></figure>
<p><code>set[Symbol.iterator]</code>안에 구현되어있는 함수 확인</p>
<h3 id="Map을-통해-알아보기"><a href="#Map을-통해-알아보기" class="headerlink" title="Map을 통해 알아보기"></a>Map을 통해 알아보기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"a"</span>, <span class="number">1</span>], [<span class="string">"b"</span>, <span class="number">2</span>], [<span class="string">"c"</span>, <span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="number">0</span> = <span class="string">"a"</span></span><br><span class="line">    <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">    length = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">&gt; <span class="built_in">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="number">0</span> = <span class="string">"b"</span></span><br><span class="line">    <span class="number">1</span> = <span class="number">2</span></span><br><span class="line">    length = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">&gt; <span class="built_in">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="number">0</span> = <span class="string">"c"</span></span><br><span class="line">    <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">    length = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">&lt; map[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">&gt; map[<span class="built_in">Symbol</span>.iterator]</span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line">    name = <span class="string">"entries"</span></span><br><span class="line">    [[Scopes]] = Scopes[<span class="number">0</span>]</span><br><span class="line">    __proto__ = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; [native code] &#125;</span><br></pre></td></tr></table></figure>
<p><code>map[Symbol.iterator]</code>안에 구현되어있는 함수 확인</p>
<h3 id="이터러블-이터레이터-프로토콜"><a href="#이터러블-이터레이터-프로토콜" class="headerlink" title="이터러블/이터레이터 프로토콜"></a>이터러블/이터레이터 프로토콜</h3><ul>
<li>이터러블: 이터레이터를 리턴하는 <code>[Symbol.iterator]()</code> 를 가진 값</li>
<li>이터레이터: { value, done } 객체를 리턴하는 next() 를 가진 값</li>
</ul>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> iterator = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">&lt; iterator.next();</span><br><span class="line">&gt; iterator.next();</span><br><span class="line">    done = <span class="literal">false</span></span><br><span class="line">    value = <span class="number">1</span></span><br><span class="line">    __proto__ = <span class="built_in">Object</span> &#123;<span class="attr">constructor</span>: , <span class="attr">__defineGetter__</span>: , <span class="attr">__defineSetter__</span>: , <span class="attr">hasOwnProperty</span>: , <span class="attr">__lookupGetter__</span>: , ...&#125;</span><br><span class="line">&lt; iterator.next();</span><br><span class="line">&gt; iterator.next();</span><br><span class="line">    done = <span class="literal">false</span></span><br><span class="line">    value = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Object</span> &#123;<span class="attr">constructor</span>: , <span class="attr">__defineGetter__</span>: , <span class="attr">__defineSetter__</span>: , <span class="attr">hasOwnProperty</span>: , <span class="attr">__lookupGetter__</span>: , ...&#125;</span><br><span class="line">&lt; iterator.next();</span><br><span class="line">&gt;iterator.next();</span><br><span class="line">    done = <span class="literal">false</span></span><br><span class="line">    value = <span class="number">3</span></span><br><span class="line">    __proto__ = <span class="built_in">Object</span> &#123;<span class="attr">constructor</span>: , <span class="attr">__defineGetter__</span>: , <span class="attr">__defineSetter__</span>: , <span class="attr">hasOwnProperty</span>: , <span class="attr">__lookupGetter__</span>: , ...&#125;</span><br><span class="line">&lt; iterator.next();</span><br><span class="line">&gt; iterator.next();</span><br><span class="line">    done = <span class="literal">true</span></span><br><span class="line">    value = <span class="literal">undefined</span></span><br><span class="line">    __proto__ = <span class="built_in">Object</span> &#123;<span class="attr">constructor</span>: , <span class="attr">__defineGetter__</span>: , <span class="attr">__defineSetter__</span>: , <span class="attr">hasOwnProperty</span>: , <span class="attr">__lookupGetter__</span>: , ...&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>이터러블/이터레이터 프로토콜: 이터러블을 for…of, 전개 연산자 등과 함께 동작하도록한 규약</li>
</ul>
<div class="note info no-icon">
            <p>위에 console 에서 <code>value</code>에 들어오는 값을 담아서 출력을 해주는데 <code>done = true</code>가 되면 for…of 에서 빠져 나오게 되어있다.</p>
          </div>
<h3 id="Array-코드로-이터레이터-다시-알아보기"><a href="#Array-코드로-이터레이터-다시-알아보기" class="headerlink" title="Array 코드로 이터레이터 다시 알아보기"></a>Array 코드로 이터레이터 다시 알아보기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrIter = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> iter1 = arrIter[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">iter1.next();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><code>Symbol.iterator</code>를 실행한 arrIter는 <code>iter1.next()</code>를 호출하고 그다음에 실행할 iter1의 <code>value</code>값을 for…of의 변수 a에 담아 출력한다.<br>여기서 알 수 있는 게 for…of 안에서 <code>Symbol.iterator</code>에 <code>next()</code>함수가 호출되는 것을 알 수 있다. (Set, Map도 동일)</p>
<h3 id="Map에만-있는-이터레이터-확인"><a href="#Map에만-있는-이터레이터-확인" class="headerlink" title="Map에만 있는 이터레이터 확인"></a>Map에만 있는 이터레이터 확인</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapIter = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>], [<span class="string">'c'</span>, <span class="number">3</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> mapIter.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> mapIter.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> mapIter.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; a</span><br><span class="line">&gt; b</span><br><span class="line">&gt; c</span><br><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; <span class="built_in">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="number">0</span> = <span class="string">"a"</span></span><br><span class="line">    <span class="number">1</span> = <span class="number">1</span></span><br><span class="line">    length = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">&gt; <span class="built_in">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="number">0</span> = <span class="string">"b"</span></span><br><span class="line">    <span class="number">1</span> = <span class="number">2</span></span><br><span class="line">    length = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Array</span>(<span class="number">0</span>)</span><br><span class="line">&gt; <span class="built_in">Array</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="number">0</span> = <span class="string">"c"</span></span><br><span class="line">    <span class="number">1</span> = <span class="number">3</span></span><br><span class="line">    length = <span class="number">2</span></span><br><span class="line">    __proto__ = <span class="built_in">Array</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="사용자-정의-이터러블을-통해-알아보기"><a href="#사용자-정의-이터러블을-통해-알아보기" class="headerlink" title="사용자 정의 이터러블을 통해 알아보기"></a>사용자 정의 이터러블을 통해 알아보기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterable = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next() &#123;</span><br><span class="line">                <span class="keyword">return</span> i == <span class="number">0</span> ? &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125; : &#123;<span class="attr">value</span>: --i, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iterator = iterable[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">2</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    done: <span class="literal">false</span></span><br><span class="line">    value: <span class="number">2</span></span><br><span class="line">    __proto__: <span class="built_in">Object</span></span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    done: <span class="literal">false</span></span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">    __proto__: <span class="built_in">Object</span></span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">0</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">    done: <span class="literal">false</span></span><br><span class="line">    value: <span class="number">0</span></span><br><span class="line">    __proto__: <span class="built_in">Object</span></span><br><span class="line">&gt; &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<p>여기서 iterator변수에  <code>[Symbol.iterator]</code>가 들어가있기때문에 iterator변수는 for…of 문에 들어갈수 있는 것이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterable = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next() &#123;</span><br><span class="line">                <span class="keyword">return</span> i == <span class="number">0</span> ? &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125; : &#123;<span class="attr">value</span>: --i, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> a <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>그리고 iterable이 이터레이터가되게 만들기위해서는 <code>[Symbol.iterator]()</code>를 반환을 해야된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> iterable = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                next() &#123;</span><br><span class="line">                    <span class="keyword">return</span> i == <span class="number">0</span> ? &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125; : &#123;<span class="attr">value</span>: i--, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">                &#125;,</span><br><span class="line">                [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iterator = iterable[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">iterator.next();</span><br><span class="line">iterator.next();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="전개-연산자"><a href="#전개-연산자" class="headerlink" title="전개 연산자"></a>전개 연산자</h3><p>전개 연산자는 배열을 더욱더 직관적으로 사용 할 수 있고, 배열을 분해 하지 않고 그냥 할당 해 버리는 방식이다.<br>즉, 배열 중간에 배열 값을 할당하기 위해서 많이 사용된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...a, ...arr, ...set, ...map.keys()]);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; (<span class="number">11</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span></span><br><span class="line">    <span class="number">1</span>: <span class="number">2</span></span><br><span class="line">    <span class="number">2</span>: <span class="number">1</span></span><br><span class="line">    <span class="number">3</span>: <span class="number">2</span></span><br><span class="line">    <span class="number">4</span>: <span class="number">3</span></span><br><span class="line">    <span class="number">5</span>: <span class="number">1</span></span><br><span class="line">    <span class="number">6</span>: <span class="number">2</span></span><br><span class="line">    <span class="number">7</span>: <span class="number">3</span></span><br><span class="line">    <span class="number">8</span>: <span class="string">"a"</span></span><br><span class="line">    <span class="number">9</span>: <span class="string">"b"</span></span><br><span class="line">    <span class="number">10</span>: <span class="string">"c"</span></span><br><span class="line">    length: <span class="number">11</span></span><br><span class="line">    __proto__: <span class="built_in">Array</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ES6에서의-순회와-이터러블-이터레이터-프로토콜-소스코드"><a href="#ES6에서의-순회와-이터러블-이터레이터-프로토콜-소스코드" class="headerlink" title="ES6에서의 순회와 이터러블:이터레이터 프로토콜 소스코드"></a>ES6에서의 순회와 이터러블:이터레이터 프로토콜 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/2.%20ES6%EC%97%90%EC%84%9C%EC%9D%98%20%EC%88%9C%ED%9A%8C%EC%99%80%20%EC%9D%B4%ED%84%B0%EB%9F%AC%EB%B8%94%20%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0%20%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JavaScript Funtional ES6</category>
      </categories>
      <tags>
        <tag>JavaScript Funtional ES6</tag>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 - 3. 제너레이터와 이터레이터</title>
    <url>/2019/09/09/javascript/es6/chapter3/</url>
    <content><![CDATA[<hr>
<p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 제너레이터와 이터레이터에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="제너레이터와-이터레이터"><a href="#제너레이터와-이터레이터" class="headerlink" title="제너레이터와 이터레이터"></a>제너레이터와 이터레이터</h2><ul>
<li>제너레이터는 이터레이터이자 이터러블을 생성하는 함수(이터레이터를 리턴하는 함수)</li>
<li>제네레이터의 리턴값은 마지막 <code>done</code>에 값이 <code>true</code> 일때 전달되고, for…of 문에는 적용이 안된다.</li>
<li>제너레이터는 순회하는 함수에 문장으로 구현할 수 있다. </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter = gen(); <span class="comment">// 제너레이트를 실행한 결과가 이터레이터</span></span><br><span class="line"><span class="built_in">console</span>.log(iter[<span class="built_in">Symbol</span>.iterator]() == iter);</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter.next());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> gen()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="literal">true</span></span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">100</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="odds"><a href="#odds" class="headerlink" title="odds"></a>odds</h2><p>제너레이터를 이용해서 홀수만 발생시키는 예제</p>
<h3 id="직접-입력하여-홀수-발생"><a href="#직접-입력하여-홀수-발생" class="headerlink" title="직접 입력하여 홀수 발생"></a>직접 입력하여 홀수 발생</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds();</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="해당-값을-받아-처리"><a href="#해당-값을-받아-처리" class="headerlink" title="해당 값을 받아 처리"></a>해당 값을 받아 처리</h3><p>10을 입력하여 10보다 작은 홀수를 출력한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">7</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">9</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="무한수열을-통해-홀수만-출력"><a href="#무한수열을-통해-홀수만-출력" class="headerlink" title="무한수열을 통해 홀수만 출력"></a>무한수열을 통해 홀수만 출력</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">infinity</span>(<span class="params">i = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> infinity(<span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a == l) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">7</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">9</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="limit-제네레이터-이용하여-순회하는-함수-생성"><a href="#limit-제네레이터-이용하여-순회하는-함수-생성" class="headerlink" title="limit 제네레이터 이용하여 순회하는 함수 생성"></a>limit 제네레이터 이용하여 순회하는 함수 생성</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 무한 수열</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">infinity</span>(<span class="params">i = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">limit</span>(<span class="params">l, iter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        <span class="keyword">if</span> (a == l) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">odds</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> limit(l, infinity(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iter2 = odds(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br><span class="line"><span class="built_in">console</span>.log(iter2.next());</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">5</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">7</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="number">9</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&gt; &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="for…of-전개-연산자-구조-분해-나머지-연산자"><a href="#for…of-전개-연산자-구조-분해-나머지-연산자" class="headerlink" title="for…of, 전개 연산자, 구조 분해, 나머지 연산자"></a>for…of, 전개 연산자, 구조 분해, 나머지 연산자</h2><p><a href="#odds">odds</a>에서 만든 제네러이터를 이용해서 실행</p>
<h3 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> odds(<span class="number">14</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; <span class="number">5</span></span><br><span class="line">&gt; <span class="number">7</span></span><br><span class="line">&gt; <span class="number">9</span></span><br><span class="line">&gt; <span class="number">11</span></span><br><span class="line">&gt; <span class="number">13</span></span><br></pre></td></tr></table></figure>
<h3 id="전개-연산자"><a href="#전개-연산자" class="headerlink" title="전개 연산자"></a>전개 연산자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...odds(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log([...odds(<span class="number">10</span>)], ...odds(<span class="number">20</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line">&gt; (<span class="number">5</span>) [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>] <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">11</span> <span class="number">13</span> <span class="number">15</span> <span class="number">17</span> <span class="number">19</span></span><br></pre></td></tr></table></figure>
<h3 id="구조-분해"><a href="#구조-분해" class="headerlink" title="구조 분해"></a>구조 분해</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [head, ...tail] = odds(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(head);</span><br><span class="line"><span class="built_in">console</span>.log(tail);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; (<span class="number">2</span>) [<span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h3 id="나머지-연산자"><a href="#나머지-연산자" class="headerlink" title="나머지 연산자"></a>나머지 연산자</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [head, ...tail] = odds(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(head);</span><br><span class="line"><span class="built_in">console</span>.log(tail);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">1</span></span><br><span class="line">&gt; <span class="number">3</span></span><br><span class="line">&gt; (<span class="number">3</span>) [<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<h2 id="제너레이터와-이터레이터-소스코드"><a href="#제너레이터와-이터레이터-소스코드" class="headerlink" title="제너레이터와 이터레이터 소스코드"></a>제너레이터와 이터레이터 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/3.%20%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0%EC%99%80%20%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JavaScript Funtional ES6</category>
      </categories>
      <tags>
        <tag>JavaScript Funtional ES6</tag>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 - 5. 코드를 값으로 다루어 표현력 높이기</title>
    <url>/2019/09/17/javascript/es6/chapter5/</url>
    <content><![CDATA[<hr>
<p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 코드를 값으로 다루어 표현력 높이기에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="go-함수-만들기"><a href="#go-함수-만들기" class="headerlink" title="go 함수 만들기"></a>go 함수 만들기</h2><p><code>...args</code> 인자를 받아서 다음 함수 <code>a =&gt; a + 1</code> 그다음 <code>a =&gt; a + 10</code> 에게 전달을 하여 계속해서 연속적으로 하나의 일을 해야하는 <code>reduce</code> 를 이용해서 특정 함수로 축약해서 하나의 값으로 만들어 간다는 것을 구현해보자.</p>
<div class="note info no-icon">
            <p>reduce 관련은 <a href="https://jaehyun8719.github.io/2019/09/16/javascript/es6/chapter4/#reduce">reduce 관련 링크</a> 에서 확인하면 된다.</p>
          </div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function">(<span class="params">...args</span>) =&gt;</span> reduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), args);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    a =&gt; a + <span class="number">1</span>,</span><br><span class="line">    a =&gt; a + <span class="number">10</span>,</span><br><span class="line">    a =&gt; a + <span class="number">100</span>,</span><br><span class="line"><span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">111</span></span><br></pre></td></tr></table></figure>
<h2 id="pipe-함수-만들기"><a href="#pipe-함수-만들기" class="headerlink" title="pipe 함수 만들기"></a>pipe 함수 만들기</h2><p>pipe 함수는 go 함수와 다르게 함수를 리턴하는 <code>pipe</code> 함수를 구현해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="function">(<span class="params">...args</span>) =&gt;</span> reduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), args);</span><br><span class="line"><span class="keyword">const</span> pipe = <span class="function">(<span class="params">f, ...fs</span>) =&gt;</span> <span class="function">(<span class="params">...<span class="keyword">as</span></span>) =&gt;</span> go(f(...as), ...fs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">    a =&gt; a + <span class="number">10</span>,</span><br><span class="line">    a =&gt; a + <span class="number">100</span>,</span><br><span class="line"><span class="built_in">console</span>.log)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = pipe(</span><br><span class="line">    (a, b) =&gt; a + b,</span><br><span class="line">    a =&gt; a + <span class="number">10</span>,</span><br><span class="line">    a =&gt; a + <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">0</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">111</span></span><br><span class="line">&gt; <span class="number">111</span></span><br></pre></td></tr></table></figure>
<h2 id="curry-함수-만들기"><a href="#curry-함수-만들기" class="headerlink" title="curry 함수 만들기"></a>curry 함수 만들기</h2><p>함수를 값으로 다루면서 받아둔 함수를 내가 원하는 시점에 평가하는 함수 이다. <code>curry</code>라는 함수는 우선 함수를 받아서 함수를 리턴하고, 인자를 받아서 인자가 원하는 갯수만큼 들어왔을때 받아 두었던 함수를 나중에 평가 시키는 함수 이다.</p>
<h3 id="curry-함수-생성"><a href="#curry-함수-생성" class="headerlink" title="curry 함수 생성"></a>curry 함수 생성</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">    (a, ..._) =&gt; _.length ? f(a, ..._) : <span class="function">(<span class="params">..._</span>) =&gt;</span> f(a, ..._);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mult = curry(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b);</span><br><span class="line"><span class="built_in">console</span>.log(mult(<span class="number">1</span>)(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mult3 = mult(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(mult3(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">2</span></span><br><span class="line">&gt; <span class="number">30</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>(a, ..._)</code> 첫번째 인자와 나머지 인자를 받음.</li>
<li><code>_.length</code>가 있으면 즉시 함수를 실행, 즉 인자가 2개 이상이면 즉시 실행</li>
<li>2번이 아니라면 <code>(..._) =&gt; f(a, ..._)</code> 다시 실행한 후 인자를<code>(..._)</code> 받아 합쳐서 실행 </li>
</ol>
<h3 id="go-curry를-사용하여-더-읽기-좋은-코드로-만들기"><a href="#go-curry를-사용하여-더-읽기-좋은-코드로-만들기" class="headerlink" title="go+curry를 사용하여 더 읽기 좋은 코드로 만들기"></a>go+curry를 사용하여 더 읽기 좋은 코드로 만들기</h3><h3 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h3><p><img src="/images/javascript/es6/chapter5/1.png" alt></p>
<figure class="highlight javascript"><figcaption><span>fx.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function"><span class="params">f</span> =&gt;</span></span><br><span class="line">    (a, ..._) =&gt; _.length ? f(a, ..._) : <span class="function">(<span class="params">..._</span>) =&gt;</span> f(a, ..._);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        res.push(f(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filter = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(a)) res.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reduce = curry(<span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) &#123;</span><br><span class="line">        iter = acc[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">        acc = iter.next().value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'반팔티'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'긴팔티'</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'핸드폰케이스'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'후드티'</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'바지'</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> go = <span class="function">(<span class="params">...args</span>) =&gt;</span> reduce(<span class="function">(<span class="params">a, f</span>) =&gt;</span> f(a), args);</span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    reduce(</span><br><span class="line">        add,</span><br><span class="line">        map(<span class="function"><span class="params">p</span> =&gt;</span> p.price,</span><br><span class="line">            filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, products))));</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    products =&gt; filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, products),</span><br><span class="line">    products =&gt; map(<span class="function"><span class="params">p</span> =&gt;</span> p.price, products),</span><br><span class="line">    prices =&gt; reduce(add, prices),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">30000</span></span><br></pre></td></tr></table></figure>
<h2 id="함수-조합으로-함수-만들기"><a href="#함수-조합으로-함수-만들기" class="headerlink" title="함수 조합으로 함수 만들기"></a>함수 조합으로 함수 만들기</h2><p>파이프라인으로 만들어진 코드를 쉽게 조합하여 중복을 제거 할 수 있다.</p>
<div class="note info no-icon">
            <p>위에서 예제로 사용했던 <code>products</code> 변수와 동일하다.</p>
          </div>
<h3 id="중복된-코드-확인"><a href="#중복된-코드-확인" class="headerlink" title="중복된 코드 확인"></a>중복된 코드 확인</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &gt;= <span class="number">20000</span>),</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">75000</span></span><br></pre></td></tr></table></figure>
<h3 id="중복된-코드-제거해서-공통-함수-만들기"><a href="#중복된-코드-제거해서-공통-함수-만들기" class="headerlink" title="중복된 코드 제거해서 공통 함수 만들기"></a>중복된 코드 제거해서 공통 함수 만들기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    total_price,</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &gt;= <span class="number">20000</span>),</span><br><span class="line">    total_price,</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">75000</span></span><br></pre></td></tr></table></figure>
<h3 id="고차함수-이용해서-공통-함수-만들기"><a href="#고차함수-이용해서-공통-함수-만들기" class="headerlink" title="고차함수 이용해서 공통 함수 만들기"></a>고차함수 이용해서 공통 함수 만들기</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseTotalPrice = <span class="function"><span class="params">predi</span> =&gt;</span> pipe(</span><br><span class="line">    filter(predi),</span><br><span class="line">    totalPrice);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    baseTotalPrice(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line">go(</span><br><span class="line">    products,</span><br><span class="line">    baseTotalPrice(<span class="function"><span class="params">p</span> =&gt;</span> p.price &gt;= <span class="number">20000</span>),</span><br><span class="line">    <span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">30000</span></span><br><span class="line">&gt; <span class="number">75000</span></span><br></pre></td></tr></table></figure>
<h2 id="코드를-값으로-다루어-표현력-높이기-소스코드"><a href="#코드를-값으로-다루어-표현력-높이기-소스코드" class="headerlink" title="코드를 값으로 다루어 표현력 높이기 소스코드"></a>코드를 값으로 다루어 표현력 높이기 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/5.%20%EC%BD%94%EB%93%9C%EB%A5%BC%20%EA%B0%92%EC%9C%BC%EB%A1%9C%20%EB%8B%A4%EB%A3%A8%EC%96%B4%20%ED%91%9C%ED%98%84%EB%A0%A5%20%EB%86%92%EC%9D%B4%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JavaScript Funtional ES6</category>
      </categories>
      <tags>
        <tag>JavaScript Funtional ES6</tag>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 - 6. HTML 출력해보기</title>
    <url>/2019/10/28/javascript/es6/chapter6/</url>
    <content><![CDATA[<hr>
<p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 HTML 출력해보기에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="총-수량을-출력"><a href="#총-수량을-출력" class="headerlink" title="총 수량을 출력"></a>총 수량을 출력</h2><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'반팔티'</span>, <span class="attr">price</span>: <span class="number">15000</span>, <span class="attr">quantity</span>: <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'긴팔티'</span>, <span class="attr">price</span>: <span class="number">20000</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'핸드폰케이스'</span>, <span class="attr">price</span>: <span class="number">15000</span>, <span class="attr">quantity</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'후드티'</span>, <span class="attr">price</span>: <span class="number">30000</span>, <span class="attr">quantity</span>: <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span> : <span class="string">'바지'</span>, <span class="attr">price</span>: <span class="number">25000</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 총 수량</span></span><br><span class="line"><span class="keyword">const</span> totalQuantity = <span class="function"><span class="params">products</span> =&gt;</span> go(products,</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity),</span><br><span class="line">    reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>products 받아서 <code>go함수</code>에 products를 넣는다는것은 <code>pipe함수</code>를 이용해도 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> totalQuantity = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity),</span><br><span class="line">    reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br></pre></td></tr></table></figure>
<h2 id="합산된-모든-값-구하기"><a href="#합산된-모든-값-구하기" class="headerlink" title="합산된 모든 값 구하기"></a>합산된 모든 값 구하기</h2><figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity),</span><br><span class="line">    reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure>
<h2 id="중복된-함수-처리-하기"><a href="#중복된-함수-처리-하기" class="headerlink" title="중복된 함수 처리 하기"></a>중복된 함수 처리 하기</h2><p>위에 코드를 보면 <code>reduce((a, b) =&gt; a + b))</code> 가 중복된 것을 볼 수 있다. 코드에서 중복을 처리 하는 것은 기본이라고 생각이 든다.</p>
<figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalQuantity = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = pipe(</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure>
<h2 id="추상함수-처리"><a href="#추상함수-처리" class="headerlink" title="추상함수 처리"></a>추상함수 처리</h2><p>위에 코드를 보면 <code>map(p =&gt; p.quantity)</code>와 <code>map(p =&gt; p.price * p.quantity)</code> 비슷한 것을 볼 수 있다. 이것에 대해서 추상 처리를 하면 더욱 더 간결해 진다.</p>
<figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> go(</span><br><span class="line">    iter,</span><br><span class="line">    map(f),</span><br><span class="line">    reduce(add));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalQuantity = <span class="function"><span class="params">products</span> =&gt;</span> sum(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity, products);</span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = <span class="function"><span class="params">products</span> =&gt;</span> sum(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity, products);</span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure>
<h2 id="curry-함수-이용"><a href="#curry-함수-이용" class="headerlink" title="curry 함수 이용"></a>curry 함수 이용</h2><p><code>products</code>를 받는 함수가 <code>sum</code>이 리턴한 함수의 <code>products</code>전달 하기 때문에 대신해서 평가를 할 수 있다.</p>
<figure class="highlight javascript"><figcaption><span>1.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> go(</span><br><span class="line">    iter,</span><br><span class="line">    map(f),</span><br><span class="line">    reduce(add)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalQuantity = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity);</span><br><span class="line"><span class="built_in">console</span>.log(totalQuantity(products));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity);</span><br><span class="line"><span class="built_in">console</span>.log(totalPrice(products));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">345000</span></span><br></pre></td></tr></table></figure>
<h2 id="HTML-코드를-이용해서-응용하기"><a href="#HTML-코드를-이용해서-응용하기" class="headerlink" title="HTML 코드를 이용해서 응용하기"></a>HTML 코드를 이용해서 응용하기</h2><figure class="highlight html"><figcaption><span>1.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 출력해보기 - 장바구니<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/fx.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"cart"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">const</span> products = [</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'반팔티'</span>, price: <span class="number">15000</span>, quantity: <span class="number">1</span>, isSelected: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'긴팔티'</span>, price: <span class="number">20000</span>, quantity: <span class="number">2</span>, isSelected: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'핸드폰케이스'</span>, price: <span class="number">15000</span>, quantity: <span class="number">3</span>, isSelected: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'후드티'</span>, price: <span class="number">30000</span>, quantity: <span class="number">4</span>, isSelected: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="actionscript">        &#123;name : <span class="string">'바지'</span>, price: <span class="number">25000</span>, quantity: <span class="number">5</span>, isSelected: <span class="literal">false</span>&#125;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> sum = curry(<span class="function">(<span class="params">f, iter</span>) =&gt;</span> go(</span></span><br><span class="line">        iter,</span><br><span class="line">        map(f),</span><br><span class="line">        reduce(add)));</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> totalQuantity = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.quantity);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> totalPrice = sum(<span class="function"><span class="params">p</span> =&gt;</span> p.price * p.quantity);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'#cart'</span>).innerHTML = <span class="string">`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>상품 이름<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>가격<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>수량<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>총 가격<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">            $&#123;go(products, sum(<span class="function"><span class="params">p</span> =&gt;</span> <span class="string">`</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> $&#123;<span class="attr">p.isSelected</span> ? '<span class="attr">checked</span>' <span class="attr">:</span> ''&#125;&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;p.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;p.price&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">value</span>=<span class="string">"$&#123;p.quantity&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;p.price * p.quantity&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line">                `))&#125;</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>합계<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">                &lt;td&gt;$&#123;totalQuantity(filter(<span class="function"><span class="params">p</span> =&gt;</span> p.isSelected, products))&#125;&lt;<span class="regexp">/td&gt;</span></span></span><br><span class="line"><span class="javascript">                &lt;td&gt;$&#123;totalPrice(filter(<span class="function"><span class="params">p</span> =&gt;</span> p.isSelected, products))&#125;&lt;<span class="regexp">/td&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span></span><br><span class="line">    `;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/javascript/es6/chapter6/1.png" alt></p>
<h2 id="HTML-출력해보기-소스코드"><a href="#HTML-출력해보기-소스코드" class="headerlink" title="HTML 출력해보기 소스코드"></a>HTML 출력해보기 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/6.%20HTML%20출력해보기" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JavaScript Funtional ES6</category>
      </categories>
      <tags>
        <tag>JavaScript Funtional ES6</tag>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript ES6 - 4. map, filter, reduce</title>
    <url>/2019/09/16/javascript/es6/chapter4/</url>
    <content><![CDATA[<hr>
<p>유인동님의 함수형 프로그래밍과 JavaScript ES6+ 인프런 강의를 듣고 개인적으로 정리한 내용입니다.<br>함수형 프로그래밍과 JavaScript ES6 map, filter, reduce에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>Map 객체는 요소의 삽입 순서대로 원소를 순회한다. <code>for...of</code> 반복문은 각 순회에서 <code>[key, value]</code>로 이루어진 배열을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"후드티"</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"바지"</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> products) &#123;</span><br><span class="line">    names.push(p.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(names)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prices = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> products) &#123;</span><br><span class="line">    prices.push(p.price);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(prices)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; (<span class="number">5</span>) [<span class="string">"반팔티"</span>, <span class="string">"반팔티"</span>, <span class="string">"핸드폰케이스"</span>, <span class="string">"후드티"</span>, <span class="string">"바지"</span>]</span><br><span class="line">&gt; (<span class="number">5</span>) [<span class="number">15000</span>, <span class="number">20000</span>, <span class="number">15000</span>, <span class="number">30000</span>, <span class="number">25000</span>]</span><br></pre></td></tr></table></figure>
<p>map은 고차 함수이며 함수를 값으로 다루면서 원하는 시점에 인자를 적용시킨다.<br>아래 예제에서 products라는 이터러블에서 내가 원하는 인자를 가지고 오는 예제이다.</p>
<div class="note info no-icon">
            <p>map은 인자와 리턴값을 사용하기를 권장한다.</p>
          </div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        res.push(f(p)); <span class="comment">// 내가 수집할 인자를 받음.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">p</span> =&gt;</span> p.name, products));</span><br><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">p</span> =&gt;</span> p.price, products));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; (<span class="number">5</span>) [<span class="string">"반팔티"</span>, <span class="string">"반팔티"</span>, <span class="string">"핸드폰케이스"</span>, <span class="string">"후드티"</span>, <span class="string">"바지"</span>]</span><br><span class="line">&gt; (<span class="number">5</span>) [<span class="number">15000</span>, <span class="number">20000</span>, <span class="number">15000</span>, <span class="number">30000</span>, <span class="number">25000</span>]</span><br></pre></td></tr></table></figure>
<h2 id="이터러블-프로토콜을-따른-map의-다형성"><a href="#이터러블-프로토콜을-따른-map의-다형성" class="headerlink" title="이터러블 프로토콜을 따른 map의 다형성"></a>이터러블 프로토콜을 따른 map의 다형성</h2><p><code>map()</code> 메서드는 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 모아 새로운 배열을 반환한다.<br>헬퍼(Helper)함수를 사용하여 map의 다형성에 대해서 알아보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>).map(<span class="function"><span class="params">el</span> =&gt;</span> el.nodeName));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console error</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; Uncaught <span class="built_in">TypeError</span>: <span class="built_in">document</span>.querySelectorAll(...).map is not a <span class="function"><span class="keyword">function</span></span></span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>위에 코드와 같이 <code>document.querySelectorAll</code> 함수 내부에 <code>map</code> 함수가 없는 것을 확인 할 수 있다. 그 이유는 <code>document</code> 함수는 Array를 상속받은 객체가 아니기 때문에 <code>map</code> 함수가 프로토타입이 구현이 안되어 있다.</p>
          </div>
<p>Array는 map을 통해서 값을 수집 할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; (<span class="number">3</span>) [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>위에서 만든<a href="#map">map</a> 함수를 이용해서 <code>document.querySelectorAll(&quot;*&quot;).map(el =&gt; el.nodeName)</code>를 사용해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">el</span> =&gt;</span> el.nodeName, <span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>)));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">(<span class="number">7</span>) [<span class="string">"HTML"</span>, <span class="string">"HEAD"</span>, <span class="string">"META"</span>, <span class="string">"BODY"</span>, <span class="string">"SCRIPT"</span>, <span class="string">"SCRIPT"</span>, <span class="string">"SCRIPT"</span>]</span><br></pre></td></tr></table></figure>
<p>실행이 정상적으로 되는 이유가 <code>document.querySelectorAll</code>가 이터러블 프로토콜을 따르고 있기 때문이다. 이터러블을 정상적으로 따르면서 for…of문을 사용하여 순회가 가능한지 확인 해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> it = <span class="built_in">document</span>.querySelectorAll(<span class="string">"*"</span>)[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br><span class="line"><span class="built_in">console</span>.log(it.next());</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">value</span>: html, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: head, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: meta, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: body, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">&#123;<span class="attr">value</span>: script, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure>
<p>이와 같이 제네레이터 함수도 이용해보면</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map(<span class="function"><span class="params">a</span> =&gt;</span> a * a, gen()));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>) [<span class="number">4</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure>
<p>추가적으로 <code>new Map()</code>을 이용해보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">"a"</span>, <span class="number">10</span>);</span><br><span class="line">m.set(<span class="string">"b"</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Map</span>(map(<span class="function">(<span class="params">[k, a]</span>) =&gt;</span> [k, a * <span class="number">2</span>], m)));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Map</span>(<span class="number">2</span>) &#123;<span class="string">"a"</span> =&gt; <span class="number">20</span>, <span class="string">"b"</span> =&gt; <span class="number">40</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>map</code>은 문장도 역시 사용할 수 있다.(모든 것 들을 map으로 사용할 수 있다는 것이다)<br>여기서 이터러블 프로토콜을 사용한다는것은 다른 헬퍼함수들과 조합성이 좋아진다.</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filterProducts = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    name: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"후드티"</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"바지"</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> under20000 = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> filterProducts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p.price &lt; <span class="number">20000</span>) &#123;</span><br><span class="line">        under20000.push(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전개 연산자 사용</span></span><br><span class="line"><span class="built_in">console</span>.log(...under20000);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125; &gt; &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;</span><br></pre></td></tr></table></figure>
<p><code>filter()</code> 메서드를 만들어서 적용 시키면</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> filter = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(a)) &#123;</span><br><span class="line">            res.push(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(...filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, filterProducts));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;()));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125; &gt; &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;</span><br><span class="line">&gt; (<span class="number">2</span>) [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">&gt; (<span class="number">2</span>) [<span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p><code>reduce()</code> 메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> n <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    total = total + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>외부 인터페이스로 살펴보자.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(add, <span class="number">0</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(add(add(add(add(add(<span class="number">0</span>, <span class="number">1</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">5</span>));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>추가적으로 <code>filter()</code> 메서드에 <code>acc</code>값이 없이 사용 할 수 있도록 reduce가 구현 되어 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) &#123;</span><br><span class="line">        iter = acc[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">        acc = iter.next().value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(add, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">15</span></span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p><code>acc</code> 값이 없으면 <code>[1, 2, 3, 4, 5]</code> 에서 맨 앞에 있는 <code>1</code>이 초기 값으로 설정된다. 그래서 <code>2, 3, 4, 5</code> 더한 <code>13</code> 의 결과 값이 나온다.</p>
          </div>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> reduceProducts = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"반팔티"</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"핸드폰케이스"</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"후드티"</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">"바지"</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(<span class="function">(<span class="params">totalPrice, product</span>) =&gt;</span> totalPrice + product.price, <span class="number">0</span>, reduceProducts));</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="number">105000</span></span><br></pre></td></tr></table></figure>
<h2 id="map-filter-reduce-중첩-사용과-함수형-사고"><a href="#map-filter-reduce-중첩-사용과-함수형-사고" class="headerlink" title="map+filter+reduce 중첩 사용과 함수형 사고"></a>map+filter+reduce 중첩 사용과 함수형 사고</h2><h3 id="폴더-구조"><a href="#폴더-구조" class="headerlink" title="폴더 구조"></a>폴더 구조</h3><p><img src="/images/javascript/es6/chapter4/1.png" alt></p>
<h4 id="fx-js-함수"><a href="#fx-js-함수" class="headerlink" title="fx.js 함수"></a>fx.js 함수</h4><figure class="highlight javascript"><figcaption><span>fx.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        res.push(f(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filter = <span class="function">(<span class="params">f, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f(a)) res.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reduce = <span class="function">(<span class="params">f, acc, iter</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!iter) &#123;</span><br><span class="line">        iter = acc[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">        acc = iter.next().value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> iter) &#123;</span><br><span class="line">        acc = f(acc, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="20000원-이하의-모든-값의-합"><a href="#20000원-이하의-모든-값의-합" class="headerlink" title="20000원 이하의 모든 값의 합"></a>20000원 이하의 모든 값의 합</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> products = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'반팔티'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'긴팔티'</span>, <span class="attr">price</span>: <span class="number">20000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'핸드폰케이스'</span>, <span class="attr">price</span>: <span class="number">15000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'후드티'</span>, <span class="attr">price</span>: <span class="number">30000</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'바지'</span>, <span class="attr">price</span>: <span class="number">25000</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(</span><br><span class="line">    add,</span><br><span class="line">    map(<span class="function"><span class="params">p</span> =&gt;</span> p.price,</span><br><span class="line">        filter(<span class="function"><span class="params">p</span> =&gt;</span> p.price &lt; <span class="number">20000</span>, products))));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">    reduce(</span><br><span class="line">        add,</span><br><span class="line">        filter(<span class="function"><span class="params">n</span> =&gt;</span> n &gt;= <span class="number">20000</span>,</span><br><span class="line">            map(<span class="function"><span class="params">p</span> =&gt;</span> p.price, products))));</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; 30000</span><br><span class="line">&gt; 30000</span><br></pre></td></tr></table></figure>
<div class="note info no-icon">
            <p>함수는 함수를 중첩해서 사용할수 있다. 코드를 읽을때 오른쪽에서부터 왼쪽으로 읽으면, products에 price가 20000원 이하를 필터를 하고, 해당하는 값(price)을 map으로 뽑아내고, 합하여 축약을 한다.</p>
          </div>
<h2 id="map-filter-reduce-소스코드"><a href="#map-filter-reduce-소스코드" class="headerlink" title="map, filter, reduce 소스코드"></a>map, filter, reduce 소스코드</h2><p><a href="https://github.com/jaehyun8719/javascript-study/tree/master/es6/4.%20map%2C%20filter%2C%20reduce" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/functional-es6/#" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/functional-es6/#</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>JavaScript Funtional ES6</category>
      </categories>
      <tags>
        <tag>JavaScript Funtional ES6</tag>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning Javascript - 1. 리터럴과 변수, 상수, 데이터 타입</title>
    <url>/2019/11/20/javascript/learning-javascript/chapter1/</url>
    <content><![CDATA[<hr>
<p><a href="http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940" rel="external nofollow noopener noreferrer" target="_blank">Leanring Javascript(러닝 자바스크립트)</a> 읽고 개인적으로 정리한 내용입니다.<br>리터럴과 변수, 상수, 데이터 타입에 대해서 설명 한다.<br><a id="more"></a></p>
<h2 id="변수와-상수"><a href="#변수와-상수" class="headerlink" title="변수와 상수"></a>변수와 상수</h2><h3 id="변수-Variable"><a href="#변수-Variable" class="headerlink" title="변수(Variable)"></a>변수(Variable)</h3><p>변수(Variable)란 간단히 말해 이름이 붙은 값으로, 변수라는 이름이 암시하듯 값은 언제든 바뀔 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentTempC = <span class="number">22</span>; <span class="comment">// 섭씨온도</span></span><br></pre></td></tr></table></figure>
<p>이 문은 변수 <code>currentTempC</code>를 선언(생성)하고 초깃값을 할당하는 두 가지 일을 한다. 그래서 <code>currentTempC</code>값을 언제든 바꿀 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">currentTempC = <span class="number">22.5</span>;</span><br></pre></td></tr></table></figure>
<p>변수를 선언 할때 꼭 초깃값을 지정해야 하는 건 아니다. 초깃값을 할당하지 않으면 암시적으로 특별한 값 <code>undefined</code>가 할당 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> targetTempC; <span class="comment">// let targetTempC = undefined;와 같다.</span></span><br></pre></td></tr></table></figure>
<p>let 문 하나에 변수 여러 개를 선언할 수 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> targetTempC, room1 = <span class="string">"conference_room_a"</span>, room2 = <span class="string">"lobby"</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; targetTempC</span><br><span class="line">&lt; <span class="literal">undefined</span></span><br><span class="line">&gt; room1</span><br><span class="line">&lt; <span class="string">"conference_room_a"</span></span><br><span class="line">&gt; room2</span><br><span class="line">&lt; <span class="string">"lobby"</span></span><br></pre></td></tr></table></figure>
<p><code>targetTempC</code> 값을 할당하지 않았으므로 암시적으로 <code>undefined</code>가 할당 되고, <code>room1</code>과 <code>room2</code>는 문자열(텍스를)를 할당하였기 때문에 문자열 변수 이다.</p>
<h3 id="상수-Constant"><a href="#상수-Constant" class="headerlink" title="상수(Constant)"></a>상수(Constant)</h3><p>상수도 변수와 마찬가지로 값을 할당받을 수 있지만, 한 번 할당한 값을 바꿀 수 없다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ROOM_TEMP_C = <span class="number">21.5</span>, MAX_TEMP_C = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>변수보다 상수를 쓰도록 노력하자. 상수를 사용하면 바꾸지 말아야 할 데이터에서 실수로 값을 바꾸는 일이 줄어 든다.</p>
          </div>
<h2 id="식별자-이름"><a href="#식별자-이름" class="headerlink" title="식별자 이름"></a>식별자 이름</h2><p>변수와 상수, 함수 이름을 식별자(identifier)라 부른다. 그리고 식별자에는 규칙이 있다.</p>
<ul>
<li>식별자는 반드시 글자나 달러 기호($), 밑줄(_)로 시작해야 한다.</li>
<li>식별자에는 글자와 숫자, 달러 기호, 밑줄만 쓸 수 있다.</li>
<li>𝜋 나 ⊇ 같은 유니코드 문자도 쓸 수 있다.</li>
<li>예약어는 식별자로 쓸 수 없다</li>
</ul>
<p>자바 스크립트의 식별자 표기법</p>
<ul>
<li>카멜 케이스(camel case) : 낙타 혹처럼 보이게 currentTempC 처럼 문자가 변경 될때 대문자를 붙이는 방법이다.</li>
<li>스네이크 케이스(snake case) : current_temp_c 스네이크 케이스에 다라 이름을 만든 방법이다.</li>
</ul>
<h2 id="리터럴"><a href="#리터럴" class="headerlink" title="리터럴"></a>리터럴</h2><p>리터럴(literal)이란 값을 프로그램 안에서 직접 지정한다는 의미이다.<br>리터럴과 식별자의 차이를 예를 들면 <code>room1</code>변수에 값 <code>&quot;confrence_room_a&quot;</code>은 할당 했을때, <code>room1</code>은 변수를 가리키는 식별자이며, <code>&quot;confrence_room_a&quot;</code> 문자열 리터럴인 동시에 <code>room1</code>의 값이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> room1 = <span class="string">"conference_room_a"</span>; <span class="comment">// "conference_room_a"(따옴표 안)은 리터럴이다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentRoom = room1;         <span class="comment">// currentRoom의 값은 room1값("conference_room_a")과 같다.</span></span><br><span class="line"></span><br><span class="line">currentRoom = conference_room_a  <span class="comment">// conference_room_a란 식별자가 존재하지 않으므로 에러가 난다.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">Uncaught <span class="built_in">ReferenceError</span>: conference_room_a is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">3</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="원시-타입과-객체"><a href="#원시-타입과-객체" class="headerlink" title="원시 타입과 객체"></a>원시 타입과 객체</h2><p>자바스크립트에의 값은 원시 값(primitive) 또는 객체(object) 이다.<br>원시 타입 6가지</p>
<ul>
<li>숫자</li>
<li>문자열</li>
<li>불리언</li>
<li>null</li>
<li>undefined</li>
<li>심볼(Symbol)</li>
</ul>
<p>원시 값과 다르게 객체는 여러 가지 형태와 값을 가질 수 있다</p>
<ul>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Map과 WeakMap</li>
<li>Set과 WeakSet</li>
</ul>
<h2 id="숫자"><a href="#숫자" class="headerlink" title="숫자"></a>숫자</h2><p>자바스크립트는 10진수, 16진수, 지수 등 어떤 리터럴 형식을 사용하더라도 결국 숫자는 더블 형식으로 저장 된다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>;           <span class="comment">// 숫자 리터럴. count는 더블이다</span></span><br><span class="line"><span class="keyword">const</span> blue = <span class="number">0x000ff</span>;     <span class="comment">// 16진수, 16진수ff는 10진수 255와 같다.</span></span><br><span class="line"><span class="keyword">const</span> umask = <span class="number">0o0022</span>;     <span class="comment">// 8진수, 8진수 22는 십진수 18과 같다.</span></span><br><span class="line"><span class="keyword">const</span> roomTemp = <span class="number">21.5</span>;    <span class="comment">// 십진수</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3.0e6</span>;          <span class="comment">// 지수 (3.0 x 10^6 = 3,000,000)</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="number">-1.6e-19</span>;       <span class="comment">// 지수 (-1.6 x 10^-19 = 0.00000000000000000016)</span></span><br><span class="line"><span class="keyword">const</span> inf = <span class="literal">Infinity</span>;</span><br><span class="line"><span class="keyword">const</span> ninf = -<span class="literal">Infinity</span>;</span><br><span class="line"><span class="keyword">const</span> nan = <span class="literal">NaN</span>;          <span class="comment">// "숫자가 아님"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; count</span><br><span class="line">&lt; <span class="number">10</span></span><br><span class="line">&gt; blue</span><br><span class="line">&lt; <span class="number">255</span></span><br><span class="line">&gt; umask</span><br><span class="line">&lt; <span class="number">18</span></span><br><span class="line">&gt; roomTemp</span><br><span class="line">&lt; <span class="number">21.5</span></span><br><span class="line">&gt; c</span><br><span class="line">&lt; <span class="number">3000000</span></span><br><span class="line">&gt; e</span><br><span class="line">&lt; <span class="number">-1.6e-19</span></span><br><span class="line">&gt; inf</span><br><span class="line">&lt; <span class="literal">Infinity</span></span><br><span class="line">&gt; ninf</span><br><span class="line">&lt; -<span class="literal">Infinity</span></span><br></pre></td></tr></table></figure>
<p>또한 숫자에 대응하는 <code>Number</code> 객체에는 중요한 숫자형 값에 해당하는 유용한 프로퍼티가 있다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> small = <span class="built_in">Number</span>.EPSILON;             <span class="comment">// 1에 더했을 때 1과 구분되는 결과를 만들 수 있는 가장 작은값이다. 근사치 2.2e-16</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;   <span class="comment">// 표현할 수 있는 가장 큰 정수</span></span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Number</span>.MAX_VALUE;             <span class="comment">// 표현할 수 있는 가장 큰 숫자</span></span><br><span class="line"><span class="keyword">const</span> minInt = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;   <span class="comment">// 표현할 수 있는 가장 작은 정수</span></span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Number</span>.MIN_VALUE;             <span class="comment">// 표현할 수 있는 가장 작은 숫자</span></span><br><span class="line"><span class="keyword">const</span> nInf = <span class="built_in">Number</span>.NEGATIVE_INFINITY;    <span class="comment">// -Infinity</span></span><br><span class="line"><span class="keyword">const</span> nan = <span class="built_in">Number</span>.NaN;                   <span class="comment">// Nan</span></span><br><span class="line"><span class="keyword">const</span> inf = <span class="built_in">Number</span>.POSITIVE_INFINITY;     <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; small</span><br><span class="line">&lt; <span class="number">2.220446049250313e-16</span></span><br><span class="line">&gt; bigInt</span><br><span class="line">&lt; <span class="number">9007199254740991</span></span><br><span class="line">&gt; max</span><br><span class="line">&lt; <span class="number">1.7976931348623157e+308</span></span><br><span class="line">&gt; minInt</span><br><span class="line">&lt; <span class="number">-9007199254740991</span></span><br><span class="line">&gt; min</span><br><span class="line">&lt; <span class="number">5e-324</span></span><br><span class="line">&gt; nInf</span><br><span class="line">&lt; -<span class="literal">Infinity</span></span><br><span class="line">&gt; nan</span><br><span class="line">&lt; <span class="literal">NaN</span></span><br><span class="line">&gt; inf</span><br><span class="line">&lt; <span class="literal">Infinity</span></span><br></pre></td></tr></table></figure>
<h2 id="특수문자"><a href="#특수문자" class="headerlink" title="특수문자"></a>특수문자</h2><table>
<thead>
<tr>
<th>코드</th>
<th>설명</th>
<th>예제</th>
</tr>
</thead>
<tbody>
<tr>
<td>\n</td>
<td>줄바꿈 문자</td>
<td>“Line1\nLine2”</td>
</tr>
<tr>
<td>\r</td>
<td>캐리지 리턴(Carriage return)</td>
<td>“Windows line 1\r\nWindows line2”</td>
</tr>
<tr>
<td>\t</td>
<td>탭</td>
<td>“Speed:\t60kph”</td>
</tr>
<tr>
<td>\’</td>
<td>작은따옴표, 꼭 이스케이프할 필요가 없어도 작은따옴표를 쓸 수 있는 곳에서는 항상 이스케이프한 작은 따옴표를 쓸 수 있다</td>
<td>“Don\’t”</td>
</tr>
<tr>
<td>\”</td>
<td>큰따옴표, 꼭 이스케이프할 필요가 없어도 큰따옴표를 쓸 수 있는 곳에는 항상 이스케이프한 큰따옴표를 쓸 수 있다.</td>
<td>‘Sam Said \”hello\”.’</td>
</tr>
<tr>
<td>`</td>
<td>백틱. ES6에서 새로 생겼다.</td>
<td>`New in ES6: \` strings.`</td>
</tr>
<tr>
<td>\$</td>
<td>달러 기호. ES6에서 새로 생겼다.</td>
<td>`New in ES6: ${interpolation}`</td>
</tr>
<tr>
<td>\</td>
<td>역슬래시</td>
<td>“Use \\ to represent \!”</td>
</tr>
</tbody>
</table>
<h3 id="템플릿-문자열"><a href="#템플릿-문자열" class="headerlink" title="템플릿 문자열"></a>템플릿 문자열</h3><p>문자열 병합을 통해 변수나 상수를 문자열 안에 쓸 수 있다.</p>
<figure class="highlight javascript"><figcaption><span>ES5 </span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentTemp = <span class="number">19.5</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"The current temperature is "</span> + currentTemp + <span class="string">"\u00b0C"</span>;</span><br></pre></td></tr></table></figure>
<p>ES6에서는 문자열 템플릿(template)기능이 도입댔다.</p>
<figure class="highlight javascript"><figcaption><span>ES6</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentTemp = <span class="number">19.5</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">`The current temperature is <span class="subst">$&#123;currentTemp&#125;</span> \u00b0C`</span>;</span><br></pre></td></tr></table></figure>
<h3 id="숫자와-문자열"><a href="#숫자와-문자열" class="headerlink" title="숫자와 문자열"></a>숫자와 문자열</h3><p>숫자를 따옴표 안에 넣으면 그건 숫자가 아니라 문자열이다. 하지만 자바스크립트는 필요하다면 숫자가 들어 있는 문자열을 자동으로 숫자로 바꾼다.<br>숫자열과 문자열은 명확하게 표시해주는것이 좋다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result1 = <span class="number">3</span> + <span class="string">"30"</span>; <span class="comment">// 3이 문자열로 바뀐다. </span></span><br><span class="line"><span class="keyword">const</span> result2 = <span class="number">3</span> * <span class="string">"30"</span>; <span class="comment">// '30'이 숫자로 바뀐다.</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; result1</span><br><span class="line">&lt; <span class="string">"330"</span></span><br><span class="line">&gt; result2</span><br><span class="line">&lt; <span class="number">90</span></span><br></pre></td></tr></table></figure>
<h3 id="심볼"><a href="#심볼" class="headerlink" title="심볼"></a>심볼</h3><p>심볼(symbol)은 유일한 토큰을 나타내기 위해 ES6에서 도입한 새 데이터 타입이다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RED = <span class="built_in">Symbol</span>(<span class="string">"The color of a sunset!"</span>);</span><br><span class="line"><span class="keyword">const</span> ORANGE = <span class="built_in">Symbol</span>(<span class="string">"The color of a sunset!"</span>);</span><br><span class="line">RED === ORANGE</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>console</span></figcaption><table><tr><td class="code"><pre><span class="line">&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="null과-undefined"><a href="#null과-undefined" class="headerlink" title="null과 undefined"></a>null과 undefined</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentTemp;              <span class="comment">// 암시적으로 undefined</span></span><br><span class="line"><span class="keyword">const</span> targetTemp = <span class="literal">null</span>;      <span class="comment">// null 값이므로 아직 모르는 값</span></span><br><span class="line">currentTemp = <span class="number">19.5</span>;           <span class="comment">// 19.5라는 값이 있음.</span></span><br><span class="line">currentTemp = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>
<h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>객체의 콘텐츠는 프로퍼티(property) 또는 멤버(member)라고 부른다. 프로퍼티 이름은 반드시 문자열 또는 심볼이어야 하며, 값은 어떤 타입이든 상관없다.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obj.color = &quot;yellow&quot;;</span><br></pre></td></tr></table></figure>
<p>프로퍼티 이름에 유요한 식별자를 써야 멤버 접근 연산자(member access operator) <code>.</code>를 사용할 수 있다. 프로퍼티 이름에 유요한 식별자가 아닌 이름을 쓴다면 계산된 멤버 접근 연산자(computed member access operator) <code>[]</code>를 써야 한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj[<span class="string">"not an identifier"</span>] = <span class="number">3</span>;</span><br><span class="line">obj[<span class="string">"not an identifier"</span>];    <span class="comment">// 3</span></span><br><span class="line">obj[<span class="string">"color"</span>];                <span class="comment">// "yellow"</span></span><br></pre></td></tr></table></figure>
<p>심볼 프로퍼티에 접근할 때도 대괄호를 사용한다.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SIZE = <span class="built_in">Symbol</span>();</span><br><span class="line">obj[SIZE] = <span class="number">8</span>;</span><br><span class="line">obj[SIZE];               <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>
<h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]             <span class="comment">// 숫자로 구성된 배열</span></span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">1</span>, <span class="string">'tow'</span>, <span class="number">3</span>, <span class="literal">null</span>]      <span class="comment">// 여러 가지 타입으로 구성된 배열</span></span><br><span class="line"><span class="keyword">const</span> a3 = [                        <span class="comment">// 객체가 들어있는 배열</span></span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Ruby"</span>, <span class="attr">hardness</span>: <span class="number">9</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Diamond"</span>, <span class="attr">hardness</span>: <span class="number">10</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">"Topaz"</span>, <span class="attr">hardness</span>: <span class="number">8</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940" rel="external nofollow noopener noreferrer" target="_blank">http://m.hanbit.co.kr/store/books/book_view.html?p_code=B2328850940</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>Learning Javascript</category>
      </categories>
      <tags>
        <tag>JavaScript ES6</tag>
        <tag>JavaScript</tag>
        <tag>Learning Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 1. 코틀린에서 변수를 다루는 방법</title>
    <url>/2022/08/09/kotlin/basic/chapter1/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 변수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="변수-선언-키워드-var과-val의-차이점"><a href="#변수-선언-키워드-var과-val의-차이점" class="headerlink" title="변수 선언 키워드 - var과 val의 차이점"></a>변수 선언 키워드 - var과 val의 차이점</h2><p>코틀린에서 가변은 <code>var</code> 불변은 <code>val</code>을 사용 하면된다.</p>
<ul>
<li>var(발)는 Variable의 약자</li>
<li>val(밸)은 Value의 약자</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number1 = <span class="number">10L</span></span><br><span class="line"><span class="keyword">val</span> number2 = <span class="number">10L</span></span><br></pre></td></tr></table></figure>
<p>코틀린은 Type추론이 가능하기 때문에 원한다면 :Type을 작성해서 사용 할 수 있다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number1: <span class="built_in">Long</span> = <span class="number">10L</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = <span class="number">10L</span></span><br></pre></td></tr></table></figure>
<h2 id="초기값을-지정해주지-않는-경우"><a href="#초기값을-지정해주지-않는-경우" class="headerlink" title="초기값을 지정해주지 않는 경우"></a>초기값을 지정해주지 않는 경우</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number: <span class="built_in">Int</span></span><br><span class="line">println(a) <span class="comment">// 컴파일 에러 발생, Variable 'a' must be initialize</span></span><br></pre></td></tr></table></figure>
<h2 id="Primitive-Type"><a href="#Primitive-Type" class="headerlink" title="Primitive Type"></a>Primitive Type</h2><p>코틀린에서는 boxing/unboxing을 고려하지 않아도 되도록 처리</p>
<h2 id="nullable"><a href="#nullable" class="headerlink" title="nullable"></a>nullable</h2><p>코틀린에서 null이 변수에 들어갈 수 있다면 <code>?</code>를 사용해야 된다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number3: <span class="built_in">Long</span>? = <span class="number">1_000L</span></span><br><span class="line">number3 = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<h2 id="객체-인스턴스화"><a href="#객체-인스턴스화" class="headerlink" title="객체 인스턴스화"></a>객체 인스턴스화</h2><p>코틀린에서는 객체 인스턴스화를 할 때에는 new를 붙이지 않는다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> person = Person(<span class="string">"사람1"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/1-variable" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 2. 코틀린에서 null을 다루는 방법</title>
    <url>/2022/08/11/kotlin/basic/chapter2/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 null을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="코틀린에서-null-체크"><a href="#코틀린에서-null-체크" class="headerlink" title="코틀린에서 null 체크"></a>코틀린에서 null 체크</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA1</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"null이 들어왔습니다."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA2</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA3</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>startWithA1</code>에서 parameter값에 null이 올수 있기 때문에 type에 <code>?</code> 붙여 null이 들어올 수 있음을 명시</li>
<li><code>startWithA2</code>에서 return type에 null이 올수 있기 떄문에 return type에 <code>?</code> 붙여 null이 들어올 수 있음을 명시</li>
<li>1번과 동일</li>
</ol>
<h2 id="Safe-Call과-Elvis-연산자"><a href="#Safe-Call과-Elvis-연산자" class="headerlink" title="Safe Call과 Elvis 연산자"></a>Safe Call과 Elvis 연산자</h2><h3 id="Safe-Call"><a href="#Safe-Call" class="headerlink" title="Safe Call"></a>Safe Call</h3><p>Safe Call(?)은 null 아니면 실행하고, null이면 실행하지 않고 null값을 반환 </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> str: String? = <span class="string">"ABC"</span></span><br><span class="line">str.length <span class="comment">// 불가능</span></span><br><span class="line">str?.length <span class="comment">// 가능!</span></span><br></pre></td></tr></table></figure>
<h3 id="Elvis-연산자"><a href="#Elvis-연산자" class="headerlink" title="Elvis 연산자"></a>Elvis 연산자</h3><p>Elvis 연산자(?:)는 앞의 연산 결과가 null이면 뒤의 값을 사용</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str2: String? = <span class="literal">null</span></span><br><span class="line">str2?.length ?: <span class="number">0</span> <span class="comment">// null 이면 무조건 0</span></span><br></pre></td></tr></table></figure>
<h3 id="코틀린에서-null-체크를-코틀린-스럽게-변경"><a href="#코틀린에서-null-체크를-코틀린-스럽게-변경" class="headerlink" title="코틀린에서 null 체크를 코틀린 스럽게 변경"></a>코틀린에서 null 체크를 코틀린 스럽게 변경</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA1</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>) ?: <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"null이 들어왔습니다."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA2</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWithA3</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str?.startsWith(<span class="string">"A"</span>) ?: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="null-아님-단언"><a href="#null-아님-단언" class="headerlink" title="null 아님 단언"></a>null 아님 단언</h2><p>nullable type이지만, 아무리 생각해도 null이 될 수 없는 경우 <code>!!</code>를 사용<br>만약 null 값이 들어왔을 경우는 nullPointException이 발생</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startWith</span><span class="params">(str: <span class="type">String</span>?)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str!!.startsWith(<span class="string">"A"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/2-null" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 3. 코틀린에서 Type을 다루는 방법</title>
    <url>/2022/08/11/kotlin/basic/chapter3/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 Type을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="기본타입"><a href="#기본타입" class="headerlink" title="기본타입"></a>기본타입</h2><p>Byte, Short, Int, Long, Float, Double 부호 없는 정수들</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number1 = <span class="number">3</span>     <span class="comment">// Int</span></span><br><span class="line"><span class="keyword">val</span> number2 = <span class="number">3L</span>    <span class="comment">// Long</span></span><br><span class="line"><span class="keyword">val</span> number3 = <span class="number">3.0F</span>  <span class="comment">// Float</span></span><br><span class="line"><span class="keyword">val</span> number4 = <span class="number">3.0</span>   <span class="comment">// Double</span></span><br></pre></td></tr></table></figure>
<p>kotlin은 기본 타입간의 변환은 명시적<code>(to변환타입())</code>으로 이루어 져야 한다. </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> number1 = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1 <span class="comment">// Type mismatch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 변경</span></span><br><span class="line"><span class="keyword">val</span> number1 = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1.toLong()</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 이 올수 있는 type</span></span><br><span class="line"><span class="keyword">val</span> number1: <span class="built_in">Int</span>? = <span class="number">4</span></span><br><span class="line"><span class="keyword">val</span> number2: <span class="built_in">Long</span> = number1?.toLong() ?: <span class="number">0L</span></span><br></pre></td></tr></table></figure>
<h2 id="타입-캐스팅"><a href="#타입-캐스팅" class="headerlink" title="타입 캐스팅"></a>타입 캐스팅</h2><h3 id="is-as"><a href="#is-as" class="headerlink" title="is, as"></a>is, as</h3><p>java에서 <code>instanceOf</code>를 <code>is</code>로 사용하고, 타입 캐스팅은 <code>as</code>를 사용한다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">        <span class="keyword">val</span> person = obj <span class="keyword">as</span> Person</span><br><span class="line">        println(person.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타입 캐스팅 as 생략가능한 스마트 캐스트</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Person) &#123;</span><br><span class="line">        println(obj.age)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="is"><a href="#is" class="headerlink" title="!is"></a>!is</h2><p><code>!is</code>를 붙여 타입 체크를 하면 반대의 오브젝트만 올수 있다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfPerson</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !<span class="keyword">is</span> Person) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="as"><a href="#as" class="headerlink" title="as?"></a>as?</h3><p><code>as?</code>를 이용해서 Object 앖이 null 인지를 체크 할 수 있다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAgeIfPerson(<span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAgeIfAsPerson</span><span class="params">(obj: <span class="type">Any</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = obj <span class="keyword">as</span>? Person</span><br><span class="line">    println(person?.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="특이한-타입-3가지"><a href="#특이한-타입-3가지" class="headerlink" title="특이한 타입 3가지"></a>특이한 타입 3가지</h2><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><ul>
<li>JAVA의 Object 역할</li>
<li>모든 Primitive Type의 최상의 타입도 Any</li>
<li>Any 자체로는 null을 포함할 수 없어 null 포함하고 싶다면, Any?로 표현</li>
<li>Any에 equals / hashCode / toString 존재</li>
</ul>
<h3 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h3><ul>
<li>Unit은 Java의 void와 동일한 역할</li>
<li>void와 다르게 Unit은 그 자체로 타입 인자로 사용 가능</li>
<li>함수형 프로그래밍에서 Unit은 단 하나의 인스턴스만 갖는 타입을 의미. 즉, 코틀린의 Unit은 실제 존재하는 타입이라는 것을 표현</li>
</ul>
<h3 id="Nothing"><a href="#Nothing" class="headerlink" title="Nothing"></a>Nothing</h3><ul>
<li>Nothing은 함수가 정상적으로 끝나지 않았다는 사실을 표현하는 역할</li>
<li>무조건 예외를 반환하는 함수 / 무한 루프 함수 등</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fail</span><span class="params">(message: <span class="type">String</span>)</span></span>: <span class="built_in">Nothing</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> IllegalArgumentException(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="String-interpolation-String-indexing"><a href="#String-interpolation-String-indexing" class="headerlink" title="String interpolation / String indexing"></a>String interpolation / String indexing</h2><h3 id="String-interpolation"><a href="#String-interpolation" class="headerlink" title="String interpolation"></a>String interpolation</h3><p>변수 이름만 사용하더라도 ${변수}를 사용</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> age = <span class="number">77</span></span><br><span class="line"><span class="keyword">val</span> log = <span class="string">"사람의 나이는 <span class="subst">$&#123;age&#125;</span> 입니다."</span></span><br></pre></td></tr></table></figure>
<h3 id="String-indexing"><a href="#String-indexing" class="headerlink" title="String indexing"></a>String indexing</h3><p><code>&quot;&quot;&quot;&quot;&quot;&quot;</code>를 사용 하여 칸이동 등 자유롭게 문자사용 가능</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"""</span></span><br><span class="line"><span class="string">    ABC</span></span><br><span class="line"><span class="string">    EFG</span></span><br><span class="line"><span class="string">    <span class="subst">$&#123;age&#125;</span></span></span><br><span class="line"><span class="string">"""</span>.trimIndent() </span><br><span class="line"></span><br><span class="line"><span class="comment">// 출력</span></span><br><span class="line">    ABC</span><br><span class="line">    EFG</span><br><span class="line">    <span class="number">77</span></span><br></pre></td></tr></table></figure>
<p>kotlin에서 문자열의 특정 문자 가져오기</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> str = <span class="string">"ABC"</span></span><br><span class="line"><span class="keyword">val</span> ch = str[<span class="number">1</span>] <span class="comment">// A 출력</span></span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/3-type" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 4. 코틀린에서 연사자를 다루는 방법</title>
    <url>/2022/08/12/kotlin/basic/chapter4/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 연산자를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="비교-연산자와-동등성-동일성"><a href="#비교-연산자와-동등성-동일성" class="headerlink" title="비교 연산자와 동등성, 동일성"></a>비교 연산자와 동등성, 동일성</h2><p>Kotlin에서는 동일성에 <code>===</code>를 사용, 동등성에 <code>==</code>를 호출 <code>==</code>를 사용하면 간접적으로 equals를 호출해준다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> person1 = Person(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">val</span> person2 = person1</span><br><span class="line"><span class="keyword">val</span> person3 = Person(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">println(person1 == person3) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="논리연산자"><a href="#논리연산자" class="headerlink" title="논리연산자"></a>논리연산자</h2><p>Java 처럼 Lazy 연산을 수행</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fun1() || fun2()) &#123;</span><br><span class="line">        println(<span class="string">"본문"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun1</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">"fun 1"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fun2</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    println(<span class="string">"fun 2"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---- 결과</span><br><span class="line">fun1</span><br><span class="line">본문</span><br></pre></td></tr></table></figure>
<h2 id="특이한-연산자"><a href="#특이한-연산자" class="headerlink" title="특이한 연산자"></a>특이한 연산자</h2><h3 id="in-in"><a href="#in-in" class="headerlink" title="in / !in"></a>in / !in</h3><p>컬렉션이나 범위에 포함되어 있다, 포함되어 있지 않다</p>
<h3 id="a-b"><a href="#a-b" class="headerlink" title="a..b"></a>a..b</h3><p>a부터 b까지의 범위 객체를 생성한다.</p>
<h3 id="a-i"><a href="#a-i" class="headerlink" title="a[i]"></a>a[i]</h3><p>a의 특정 index i에 b를 넣는다.</p>
<h2 id="연산자-오버로딩"><a href="#연산자-오버로딩" class="headerlink" title="연산자 오버로딩"></a>연산자 오버로딩</h2><figure class="highlight kotlin"><figcaption><span>Money.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span></span>(</span><br><span class="line">    <span class="keyword">val</span> amount: <span class="built_in">Long</span></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">plus</span><span class="params">(other: <span class="type">Money</span>)</span></span>: Money &#123;</span><br><span class="line">        <span class="keyword">return</span> Money(<span class="keyword">this</span>.amount + other.amount)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 연산자 오버로딩</span></span><br><span class="line">    <span class="keyword">val</span> money1 = Money(<span class="number">1_000L</span>)</span><br><span class="line">    <span class="keyword">val</span> money2 = Money(<span class="number">2_000L</span>)</span><br><span class="line"></span><br><span class="line">    Money(amount=<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/4-operator" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 5. 코틀린에서 제어문를 다루는 방법</title>
    <url>/2022/08/12/kotlin/basic/chapter5/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 제어문을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="if문"><a href="#if문" class="headerlink" title="if문"></a>if문</h2><p>Kotlin에서는 if-else는 Expression 이다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getPassOrFail</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (score &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="string">"P"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="string">"F"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getGradeWithSwitch</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (score / <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="number">9</span> -&gt; <span class="string">"A"</span></span><br><span class="line">        <span class="number">8</span> -&gt; <span class="string">"B"</span></span><br><span class="line">        <span class="number">7</span> -&gt; <span class="string">"C"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"D"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getGradeWithSwitchRange</span><span class="params">(score: <span class="type">Int</span>)</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (score) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">90</span>..<span class="number">99</span> -&gt; <span class="string">"A"</span></span><br><span class="line">        <span class="keyword">in</span> <span class="number">80</span>..<span class="number">89</span> -&gt; <span class="string">"B"</span></span><br><span class="line">        <span class="keyword">in</span> <span class="number">70</span>..<span class="number">79</span> -&gt; <span class="string">"C"</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="string">"D"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">startsWithA</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (obj) &#123;</span><br><span class="line">        <span class="keyword">is</span> String -&gt; obj.startsWith(<span class="string">"A"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">judgeNumber</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> (number) &#123;</span><br><span class="line">        <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span> -&gt; println(<span class="string">"어디서 많이 본 숫자입니다"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"1, 0, -1 아닙니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when 조건 값이 없을 경우</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">judgeNumber2</span><span class="params">(number: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">when</span> &#123;</span><br><span class="line">        number == <span class="number">0</span> -&gt; println(<span class="string">"주어진 숫자는 0 입니다"</span>)</span><br><span class="line">        number % <span class="number">2</span> == <span class="number">0</span> -&gt; println(<span class="string">"주어진 숫자는 짝수입니다"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; print(<span class="string">"주어지는 숫자는 홀수입니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/5-if" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 6. 코틀린에서 반복문을 다루는 방법</title>
    <url>/2022/08/13/kotlin/basic/chapter6/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 반복문을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="for-each-문"><a href="#for-each-문" class="headerlink" title="for each 문"></a>for each 문</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = listOf(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>)</span><br><span class="line"><span class="keyword">for</span> (number <span class="keyword">in</span> numbers) &#123;</span><br><span class="line">    println(number)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 전통적인 for문</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자가 내려가는 for문</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">3</span> downTo <span class="number">1</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2씩 올리는 경우</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> step <span class="number">2</span>) &#123;</span><br><span class="line">    println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Progression과-Range"><a href="#Progression과-Range" class="headerlink" title="Progression과 Range"></a>Progression과 Range</h2><h3 id="연산자"><a href="#연산자" class="headerlink" title="..연산자"></a>..연산자</h3><ol>
<li>.. 연산자는 범위를 만들어 내는 연산자로 1..3은 1부터 3의 범위를 나타낸다.</li>
<li>IntRange는 IntProgression(등차수열)을 상속 받어 등차수열을 만든다.</li>
<li>downTo, step 도 함수(중위 호출 함수)</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/6-loop" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 7. 코틀린에서 예외를 다루는 방법</title>
    <url>/2022/08/13/kotlin/basic/chapter7/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 예외를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="try-cahtch-finally-구문"><a href="#try-cahtch-finally-구문" class="headerlink" title="try cahtch finally 구문"></a>try cahtch finally 구문</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseIntOrThrow</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str.toInt()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"주어진 <span class="subst">$&#123;str&#125;</span>은 숫자가 아닙니다"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null 코드를 반환할 경우</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseIntOrThrow2</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">        str.toInt()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: NumberFormatException) &#123;</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Checked-Exception과-Unchecked-Exception"><a href="#Checked-Exception과-Unchecked-Exception" class="headerlink" title="Checked Exception과 Unchecked Exception"></a>Checked Exception과 Unchecked Exception</h2><p>Kotlin에서는 Checked Exception과 Unchecked Exception을 구분하지 않는다.<br>모두 Unchecked Excpetion 이다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> currentFile = File(<span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">val</span> file = File(currentFile.absolutePath + <span class="string">"/a.txt"</span>)</span><br><span class="line">    <span class="keyword">val</span> reader = BufferedReader(FileReader(file))</span><br><span class="line">    println(reader.readLine())</span><br><span class="line">    reader.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try with resources"></a>try with resources</h2><p>java에서 try with resource가 kotlin에서는 <code>use</code>를 사용한다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">readFile</span><span class="params">(path: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    BufferedReader(FileReader(path)).use &#123;reader -&gt;</span><br><span class="line">        println(reader.readLine())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/7-exception" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 8. 코틀린에서 함수를 다루는 방법</title>
    <url>/2022/08/18/kotlin/basic/chapter8/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 함수를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="함수-선언-문법"><a href="#함수-선언-문법" class="headerlink" title="함수 선언 문법"></a>함수 선언 문법</h2><p>if - else 문은 expression 이기때문에 아래와 같이 함수 선언이 가능하다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max2</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> =</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 추론이 가능하기때문에 type 생략 가능</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">max3</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span>  b</span><br></pre></td></tr></table></figure>
<h2 id="default-parameter"><a href="#default-parameter" class="headerlink" title="default parameter"></a>default parameter</h2><p>JAVA에서 Overloading을 하여 parameter 값을 넣어줘야하는데, parameter 값이 없을떄는 default parameter 값이 적용된다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">2</span>)</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, <span class="number">6</span>, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="named-argument"><a href="#named-argument" class="headerlink" title="named argument"></a>named argument</h2><p>parameter를 통해서 직접 지정하고, 지정되지 않는 parameter는 기본값을 사용한다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    repeat(<span class="string">"Hello World"</span>, useNewLine = <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">repeat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    num: <span class="type">Int</span> = <span class="number">3</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    useNewLine: <span class="type">Boolean</span> = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..num) &#123;</span><br><span class="line">        <span class="keyword">if</span> (useNewLine) &#123;</span><br><span class="line">            println(str)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            print(str)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="같은-타입의-여러-파라미터-받기-가변인자"><a href="#같은-타입의-여러-파라미터-받기-가변인자" class="headerlink" title="같은 타입의 여러 파라미터 받기 (가변인자)"></a>같은 타입의 여러 파라미터 받기 (가변인자)</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    printAll(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    printAll(*array) <span class="comment">// spread 연산자</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printAll</span><span class="params">(<span class="keyword">vararg</span> strings: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (str <span class="keyword">in</span> strings) &#123;</span><br><span class="line">        println(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/8-fun" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 9. 코틀린에서 클래스를 다루는 방법</title>
    <url>/2022/08/20/kotlin/basic/chapter9/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 클래스를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="클래스와-프로퍼티"><a href="#클래스와-프로퍼티" class="headerlink" title="클래스와 프로퍼티"></a>클래스와 프로퍼티</h2><p>프로퍼티 = 필드 + getter + setter<br>kotlin엥서는 필드만 만들면 getter, setter를 자동으로 생성</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(name: String, age: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">    <span class="keyword">var</span> age = age</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>생성자에서 프로퍼티와 생성자를 생성할 경우</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String, </span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>생성한 클래스 호출 후 데이터 입력</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    println(person.name)</span><br><span class="line">    person.age = <span class="number">10</span></span><br><span class="line">    println(person.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="생성자와-init"><a href="#생성자와-init" class="headerlink" title="생성자와 init"></a>생성자와 init</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>클래스가 초기화되는 시점에서 한번 호출하고 싶을때는 <code>init</code> 블록 생성하여 사용</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="argument에-값을-넣고-인스턴스화-할-경우"><a href="#argument에-값을-넣고-인스턴스화-할-경우" class="headerlink" title="argument에 값을 넣고 인스턴스화 할 경우"></a>argument에 값을 넣고 인스턴스화 할 경우</h3><ul>
<li>주생성자(primary constructor) </li>
<li>부생성자(secondary constructor) 는 최종적으로 주생성자 this를 호출해야 된다.</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 부생성자(secondary constructor)</span></span><br><span class="line">    <span class="keyword">constructor</span>(name: String): <span class="keyword">this</span>(name, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main 함수</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> person2 = Person(<span class="string">"재현"</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">val</span> person3 = Person(<span class="string">"재현"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>부생성자 사용보다는 정적 팩토리 메소드를 사용하는것이 좋음.</li>
</ul>
<h3 id="부생성자보다는-default-parameter를-권장"><a href="#부생성자보다는-default-parameter를-권장" class="headerlink" title="부생성자보다는 default parameter를 권장"></a>부생성자보다는 default parameter를 권장</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 주생성자(primary constructor)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">100</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="커스텀-getter-setter"><a href="#커스텀-getter-setter" class="headerlink" title="커스텀 getter, setter"></a>커스텀 getter, setter</h2><p>프로퍼티의 속성을 나타내면 커스텀으로 생성하여 호출 해주는것이 좋음</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"나이는 <span class="subst">$&#123;this.age&#125;</span>일 수 없습니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">idAdult</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 함수 대신 프로퍼티 처럼 생성</span></span><br><span class="line">    <span class="keyword">val</span> isAdult: <span class="built_in">Boolean</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">this</span>.age &gt; <span class="number">20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="getter"><a href="#getter" class="headerlink" title="getter"></a>getter</h3><p>예약어 <code>field</code>(자신을 가리키는) 를 사용하는 이유는 <code>name.uppercase()</code>를 사용 할 경우에 <code>name -&gt; get() -&gt; name -&gt; get()</code>을 호출 하여 무한 루프가 발생한다. </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> name = name</span><br><span class="line">        <span class="keyword">get</span>() = field.uppercase()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>backing field를 사용안하고 하는 경우 <code>this.name</code>을 이용</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> getUpperCaseName: String </span><br><span class="line">       <span class="keyword">get</span>() = <span class="keyword">this</span>.name.uppercase()</span><br></pre></td></tr></table></figure>
<h3 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h3><p>setter 도 getter 와 동일하나 var를 이용해서 생성하면된다. 하지만 setter를 무분별하게 이용하는걸 지양하기때문에 update 와 같은 함수를 이용해서 호출하는 방법이 좋다.</p>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/9-class" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 10. 코틀린에서 상속을 다루는 방법</title>
    <url>/2022/08/20/kotlin/basic/chapter10/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 상속을 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><figure class="highlight kotlin"><figcaption><span>Animal.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> species: String,</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">open</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>상위 클래스의 생성자를 바로 호출</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">4</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">" 고양이가 사뿐 사뿐 걸어가~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span></span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 프로퍼치를 override 할 때 무조건 open 을 붙여 줘야 한다.</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><figure class="highlight kotlin"><figcaption><span>Flyable.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"파닥 파닥"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>Swimable.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"어푸 어푸"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>Penguin.kt</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> </span>(</span><br><span class="line">    species: String</span><br><span class="line">) : Animal(species, <span class="number">2</span>), Swimable, Flyable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> wingCount: <span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"펭귄이 움직인다~"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> legCount: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = <span class="keyword">super</span>.legCount + <span class="keyword">this</span>.wingCount</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 중복되는 인터페이스를 특정할때 `super&lt;타입&gt;.함수` 사용</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">act</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Swimable&gt;.act()</span><br><span class="line">        <span class="keyword">super</span>&lt;Flyable&gt;.act()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="상속-관련-키워드"><a href="#상속-관련-키워드" class="headerlink" title="상속 관련 키워드"></a>상속 관련 키워드</h2><ol>
<li>final: override를 할 수 없게 한다. default로 보이지 않게 존재</li>
<li>open: override를 열어 준다.</li>
<li>abstract: 반드시 override 해야 한다.</li>
<li>override: 상위 타입을 오버라이드 하고 있다.</li>
</ol>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/10-inheritance" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 11. 코틀린에서 접근 제어를 다루는 방법</title>
    <url>/2022/08/22/kotlin/basic/chapter11/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 접근 제어를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="접근-제어"><a href="#접근-제어" class="headerlink" title="접근 제어"></a>접근 제어</h2><ul>
<li>Koltin의 기본 접근 지시어는 <code>public</code> 이다</li>
</ul>
<table>
<thead>
<tr>
<th>접근 제어 명령어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>모든 곳에서 접근 가능</td>
</tr>
<tr>
<td>protected</td>
<td>선언된 클래스 또는 하위 클래스에서만 접급 가능</td>
</tr>
<tr>
<td>internal</td>
<td>같은 모듈에서만 접근 가능</td>
</tr>
<tr>
<td>private</td>
<td>선언된 클래스 내에서만 접근 가능</td>
</tr>
</tbody>
</table>
<ul>
<li>Kotlin 파일</li>
</ul>
<table>
<thead>
<tr>
<th>접근 제어 명령어</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>기본값은 어디서든 접근</td>
</tr>
<tr>
<td>protected</td>
<td>파일(최상단)에는 사용 불가능</td>
</tr>
<tr>
<td>internal</td>
<td>같은 모듈에서만 접근 가능</td>
</tr>
<tr>
<td>private</td>
<td>같은 파일 내에서만 접근 가능</td>
</tr>
</tbody>
</table>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/11-visibility-modifier" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
  <entry>
    <title>자바 개발자를 위한 코틀린 입문 - 12. 코틀린에서 object를 다루는 방법</title>
    <url>/2022/08/22/kotlin/basic/chapter12/</url>
    <content><![CDATA[<hr>
<p><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">자바 개발자를 위한 코틀린 입문</a> 에 강의 내용을 정리한 내용이다.<br>코틀린에서 object를 다루는 방법에 대해서 설명한다.<br><a id="more"></a></p>
<h2 id="static-함수와-변수"><a href="#static-함수와-변수" class="headerlink" title="static 함수와 변수"></a>static 함수와 변수</h2><p>companion object(동행 객체)는 클래스와 동일하는 유일한 오브젝트 이다.<br>const를 붙이는 이유는 컴파일시 값을 할당한다.</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MIN_AGE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newBaby</span><span class="params">(name: <span class="type">String</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(name, MIN_AGE)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>companion object에 인터페이스 구현 </li>
</ul>
<figure class="highlight kotlin"><figcaption><span>Log</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><figcaption><span>Person</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> basic</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>(</span><br><span class="line">    <span class="keyword">val</span> name: String = <span class="string">"재현"</span>,</span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">1</span>,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> Factory : Log &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> MIN_AGE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">newBaby</span><span class="params">(name: <span class="type">String</span>)</span></span>: Person &#123;</span><br><span class="line">            <span class="keyword">return</span> Person(name, MIN_AGE)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">log</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"나는 Person 클래스의 동행객체 Factory 입니다."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="싱글톤"><a href="#싱글톤" class="headerlink" title="싱글톤"></a>싱글톤</h2><p>obejct 를 사용하면 싱글톤 객체 생성</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line"></span><br><span class="line">    println(Singleton.a)</span><br><span class="line">    Singleton.a += 10</span><br><span class="line">    println(Singleton.a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object Singleton &#123;</span><br><span class="line">    var a: Int = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="익명-클래스"><a href="#익명-클래스" class="headerlink" title="익명 클래스"></a>익명 클래스</h2><p><code>obejct: 타입이름</code>을 이용하여 익명 클래스 선언</p>
<figure class="highlight kotlin"><figcaption><span>Movable</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Movable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    moveSomething(<span class="keyword">object</span> : Movable &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"move"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">fly</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"fly"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">moveSomething</span><span class="params">(movable: <span class="type">Movable</span>)</span></span> &#123;</span><br><span class="line">    movable.move()</span><br><span class="line">    movable.fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="소스코드"><a href="#소스코드" class="headerlink" title="소스코드"></a>소스코드</h2><p><a href="https://github.com/jaehyun8719/kotlin-basic/tree/12-object" rel="external nofollow noopener noreferrer" target="_blank"><img src="/images/github.png" width="200"></a></p>
<h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul>
<li><a href="https://www.inflearn.com/course/java-to-kotlin" rel="external nofollow noopener noreferrer" target="_blank">https://www.inflearn.com/course/java-to-kotlin</a></li>
</ul>
]]></content>
      <categories>
        <category>kotlin</category>
        <category>kotlin basic</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>kotlin basic</tag>
      </tags>
  </entry>
</search>
